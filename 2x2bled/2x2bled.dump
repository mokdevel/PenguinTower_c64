0000   ----              ;-------------------------------------------------
0001   ----              ;DEFINES
0002   ----              DEBUG
0003   ----              LOADGFX         ;Load default graphics at compile time
0004   ----              STARTWITHRUN    ;Run will start the program. Otherwise compiled from $0810
0005   ----              
0006   ----              
0007   ----              
0008   ----              !macro incd020 {
0009  ????              !ifdef DEBUG {
0010  ????              inc $d020
0011  ????              }
0012  ????              }
0013   ----              !macro decd020 {
0014  ????              !ifdef DEBUG {
0015  ????              dec $d020
0016  ????              }
0017  ????              }
0018   ----              
0019   ----              !macro setd020 col {
0020  ????              !ifdef DEBUG {
0021  ????              pha
0022  ????              lda #col
0023  ????              sta $d020
0024  ????              pla
0025  ????              }
0026  ????              }
0027   ----              
0028   ----              ;---------------------------------------------------
0029   ----              ;Include files
0030   ----              
0031   ----              ;---------------------------
0032   ----              ;Macro definitions
0033   ----              ; DEBUG   ;Can be used to disable incd020-macro below
0034   ----              
0035   ----              ;---------------------------
0036   ----              HELP_EDITOR = $2400
0037   ----              HELP_MAPEDIT= $2800
0038   ----              BLEDSPRITES = $2e00
0039   ----              BTEMP       = $2f00       ;ISO TEMP ALUE
0040   ----              FDAT        = $3000       ;CHARDATA (FONT) ADDY
0041   ----              FDAT_SAVE_START = FDAT-8
0042   ----              FDAT_SAVE_END   = FDAT+$1000
0043   ----              BLEDSCREEN  = $4000
0044   ----              CODE_2      = $4400       ;
0045   ----              MAP         = $4800
0046   ----              MAP_SIZE    = $100
0047   ----              MAP_LEVELS  = MAP + MAP_SIZE
0048   ----              
0049   ----              PACKFROM = MAP_LEVELS
0050   ----              PACKTO   = MAP_LEVELS+100*MAP_SIZE;$a900
0051   ----              
0052   ----              ;---------------------------
0053   ----              
0054   ----              BDAT0    = FDAT+$0800  ;BLOCKDATA
0055   ----              BDAT1    = FDAT+$0900  ; 01
0056   ----              BDAT2    = FDAT+$0A00  ; 23
0057   ----              BDAT3    = FDAT+$0B00
0058   ----              BCOL0    = BDAT0+$0400 ;BLOCKCOLORS
0059   ----              BCOL1    = BDAT0+$0500 ; 01
0060   ----              BCOL2    = BDAT0+$0600 ; 23
0061   ----              BCOL3    = BDAT0+$0700
0062   ----              
0063   ----              BIT_THROUGH         = %00010000
0064   ----              BIT_EXPLODE         = %00100000
0065   ----              BIT_THROUGH_EXPLODE = %00110000
0066   ----              BIT_SPECIAL         = %01000000
0067   ----              BIT_KILL            = %10000000
0068   ----              
0069   ----              ;---------------------------
0070   ----              HELP_EDITOR_D018  = $95
0071   ----              HELP_MAPEDIT_D018 = $a5
0072   ----              INFO_MAPEDIT_D018 = $15            ;The screen to show color details etc.
0073   ----              
0074   ----              MAPCOLOR_D021 = MAP+$f0
0075   ----              MAPCOLOR_D022 = MAP+$f1
0076   ----              MAPCOLOR_D023 = MAP+$f2
0077   ----              
0078   ----              SCR04    = $0400       ;BLOCK ON SCREEN
0079   ----              SCRD8    = SCR04+$D400 ;COLORS ON SCREEN
0080   ----              DD021    = $2FFD       ;VARIT
0081   ----              DD022    = $2FFE
0082   ----              DD023    = $2FFF
0083   ----              SPRITE   = $2E80
0084   ----              FPLC     = $06D0          ;FONT SCREENI
0085   ----              FD8PLC   = FPLC+$D400
0086   ----              BPLC     = $0590          ;Block line in bled
0087   ----              BD8PLC   = BPLC+$D400
0088   ----              BMPLC    = $0798          ;Block line in mapedit
0089   ----              BMD8PLC  = BMPLC+$D400
0090   ----              IPLC     = BMPLC-$28
0091   ----              ID8PLC   = IPLC+$D400
0092   ----              
0093   ----              BLOCKLINE_BLED = 0
0094   ----              BLOCKLINE_MAPEDIT = 1
0095   ----              
0096   ----              LOADSAVE_BLED_LOAD      = 0 ;Get the bled load filename
0097   ----              LOADSAVE_BLED_SAVE      = 1 ;Get the bled save filename
0098   ----              LOADSAVE_MAPEDIT_LOAD   = 2 ;Get the mapedit load filename
0099   ----              LOADSAVE_MAPEDIT_SAVE   = 3 ;Get the mapedit save filename
0100   ----              
0101   ----              ;4400 47ff - CODE
0102  $2400              *= HELP_EDITOR
0103  $2400  B2 98 B2 A0 82 8C 8F 83 8B A0 85 84 89 94 8F 92 A0 96 B1 AE B1 AB A8 83 A9 A0 84 A7 81 92 83 AF 94 8F 90 81 9A AF 90 90 AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD 83 92 93 92 A0 8B 85 99 93 A0 83 88 81 8E 87 85 A0 83 88 81 92 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 AC AF AE AF 93 AB AC AF AE A0 93 85 8C 85 83 94 A0 82 8C 8F 83 8B A0 A8 AB B1 AF AB B1 B0 A9 A0 A0 A0 A0 A0 A0 A0 A0 A0 92 85 94 95 92 8E A0 A0 A0 A0 83 88 81 8E 87 85 A0 8D 8F 84 85 A0 82 8C 8F 83 8B AF 86 8F 8E 94 A0 A0 A0 A0 A0 A0 A0 A0 93 90 81 83 85 A0 A0 A0 A0 A0 90 81 89 8E 94 A0 83 88 81 92 A0 94 8F A0 82 8C 8F 83 8B A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 92 95 8E A0 93 94 8F 90 A0 A0 83 88 81 8E 87 85 A0 8E 8F 92 8D 81 8C AF 86 8F 8E 94 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 88 8F 8D 85 AF 84 85 8C A0 A0 87 8F 94 8F A0 83 88 81 92 A0 B0 B0 AF 82 8C 8F 83 8B A0 B0 B0 A0 A0 A0 A0 A0 A0 A0 A0 A0 83 8C 92 AF 89 8E 93 94 A0 A0 83 8C 85 81 92 A0 83 88 81 92 AF 82 8C 8F 83 8B A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 B1 AC B2 AC B3 AC B4 A0 A0 A0 83 88 8F 8F 93 85 A0 83 8F 8C 8F 92 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 93 AB B1 AC B2 AC B3 AC B4 A0 83 88 81 8E 87 85 A0 83 8F 8C 8F 92 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 89 AF 9E A0 A0 A0 A0 A0 A0 A0 89 8E 96 85 92 93 85 AF 92 8F 8C 8C A0 8D 81 92 8B A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 98 AF 99 A0 A0 A0 A0 A0 A0 A0 8D 89 92 92 8F 92 A0 8D 81 92 8B A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 9A AF 94 AF 86 A0 A0 A0 A0 A0 9A 8C 89 84 85 AF 94 92 81 8E 93 90 81 92 85 8E 94 AF 86 89 8E 84 85 92 A0 A0 A0 A0 A0 A0 83 AF 96 A0 A0 A0 A0 A0 A0 A0 83 8F 90 99 AF 90 81 93 94 85 A0 81 A0 83 88 81 92 A0 82 89 94 93 A0 A0 A0 A0 A0 A0 A0 A0 93 AB 83 AF 93 AB 96 A0 A0 A0 83 8F 90 99 AF 90 81 93 94 85 A0 82 8C 8F 83 8B A0 83 88 81 92 93 A0 A0 A0 A0 A0 A0 A0 A0 86 B1 AC B3 AC B5 AC B7 A0 A0 83 88 81 8E 87 85 A0 82 89 94 93 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 8D A0 A0 A0 A0 A0 A0 A0 A0 A0 86 85 83 94 88 A0 8D 81 90 A0 83 8F 8C 8F 92 93 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 93 AB 93 AF 93 AB 8C AF A6 A0 93 81 96 85 AF 8C 8F 81 84 AF 84 89 92 85 83 94 8F 92 99 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 9F A0 A0 A0 A0 A0 A0 A0 A0 A0 85 98 89 94 A0 94 8F A0 8D 81 90 A0 85 84 89 94 8F 92 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 83 BD AB 83 AF 83 BD AB 96 A0 83 8F 90 99 AF 90 81 93 94 85 A0 82 8C 8F 83 8B A0 81 8E 84 A0 83 88 81 92 A0 84 81 94 81 83 BD AB 89 AF 83 BD AB 84 A0 89 8E 93 85 92 94 AF 84 85 8C 85 94 85 A0 82 8C 8F 83 8B A0 83 88 81 92 93 A0 A0 A0 A0 A0 83 BD AB 82 AF 83 BD AB 8D A0 83 8C 85 81 92 A0 AA 81 8C 8C AA A0 82 8C 8F 83 8B 93 AF 83 88 81 92 93 A0 A0 A0 A0 A0 A0 AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD 92 85 94 95 92 8E AD  !media  "help_editor.charscreen",char,0,0,40,25       ;2400 27e7 - screen: bled help
0104  $27E8              ;27e8 27ff - empty
0105  $2800              *= HELP_MAPEDIT
0106  $2800  A0 B2 98 B2 A0 8D 81 90 A0 85 84 89 94 8F 92 A0 96 B1 AE B1 AB A8 83 A9 A0 84 A7 81 92 83 AF 94 8F 90 81 9A AF 90 90 A0 AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD 88 A0 A0 A0 A0 A0 A0 A0 A0 A0 94 88 89 93 A0 93 83 92 85 85 8E A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 83 92 93 92 A0 8B 85 99 93 A0 8D 8F 96 85 A0 8F 8E A0 94 88 85 A0 B2 B0 98 B2 B0 A0 8D 81 90 A0 A0 A0 A0 A0 A0 A0 A0 A0 93 90 81 83 85 A0 A0 A0 A0 A0 89 8E 93 85 92 94 A0 82 8C 8F 83 8B A0 8F 8E A0 8D 81 90 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 92 85 94 95 92 8E A0 A0 A0 A0 93 88 8F 97 A0 86 95 8C 8C A0 8D 81 90 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 83 8C 92 A0 A0 A0 A0 A0 A0 A0 86 89 8C 8C A0 8D 81 90 A0 97 89 94 88 A0 83 95 92 92 85 8E 94 A0 82 8C 8F 83 8B A0 A0 A0 93 AB 8C AF 93 AB 93 A0 A0 A0 8C 8F 81 84 AF 93 81 96 85 A0 8D 81 90 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 9F A0 A0 A0 A0 A0 A0 A0 A0 A0 85 98 89 94 A0 94 8F A0 82 8C 8F 83 8B 85 84 89 94 8F 92 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 AC AF AE AF 93 AB AC AF AE A0 93 85 8C 85 83 94 A0 82 8C 8F 83 8B A0 A8 AB B1 AF AB B1 B0 A9 A0 A0 A0 A0 A0 A0 A0 A0 A0 8E AF 8D AF 93 AB 8E AF 8D A0 93 85 8C 85 83 94 A0 8C 85 96 85 8C A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 93 AB 8F A0 A0 A0 A0 A0 A0 A0 82 81 94 83 88 A0 8C 8F 81 84 A0 81 8C 8C A0 8C 85 96 85 8C A3 A3 A0 86 89 8C 85 93 A0 A0 93 AB 91 A0 A0 A0 A0 A0 A0 A0 90 81 83 8B A0 81 8E 84 A0 93 81 96 85 A0 8E 8F 92 8D 81 8C AF 82 8F 8E 95 93 A0 8C 96 8C A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD 86 8F 8E 94 83 8F 8C 8F 92 93 A0 A8 84 B0 B2 B1 AC B2 AC B3 A9 BA A4 B2 86 86 84 AC 86 85 AC 86 86 A0 A0 A0 A0 A0 A0 A0 86 8F 8E 94 A0 A0 BA A4 B3 B0 B0 B0 AD A4 B3 B7 86 86 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 83 8F 8C 8F 92 A0 BA A4 B3 B8 B0 B0 AD A4 B3 82 86 86 F0 B1 B2 EE A0 F0 A4 B3 B8 B0 B0 AD A4 B3 B9 B0 B0 EE A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 ED B3 B4 FD A0 ED A4 B3 81 B0 B0 AD A4 B3 82 B0 B0 FD A0 A0 A0 A0 82 8C 8F 83 8B 93 BA A4 B3 83 B0 B0 AD A4 B3 86 86 86 F0 B1 B2 EE A0 F0 A4 B3 83 B0 B0 AD A4 B3 84 B0 B0 EE A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 ED B3 B4 FD A0 ED A4 B3 85 B0 B0 AD A4 B3 86 B0 B0 FD A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 8D 81 90 A0 A0 A0 BA A4 B4 B1 B0 B0 AD A4 B4 B1 86 B0 A0 A8 B2 B0 AA B1 B2 A0 B2 98 B2 AD 82 8C 8F 83 8B 93 A9 A0 A0 A0 8D 81 90 83 8F 8C 8F 92 93 A0 A8 84 B0 B2 B1 AC B2 AC B3 A9 BA A4 B4 B1 86 B0 AC 86 B1 AC 86 B2 A0 A0 A0 A0 A0 A0 A0 A0 AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD AD 92 85 94 95 92 8E AD  !media  "help_mapedit.charscreen",char,0,0,40,25      ;2800 2be7 - screen: map editor help
0107  $2BE8              ;2be8 2dff - empty
0108  $2E00              *= BLEDSPRITES
0109  $2E00  FF FF 00 80 01 00 80 01 00 80 01 00 80 01 00 80 01 00 80 01 00 80 01 00 80 01 00 80 01 00 80 01 00 80 01 00 80 01 00 80 01 00 80 01 00 FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 0F F0 00 00 00 00 01 80 00 03 C0 00 07 E0 00 0F F0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 FF 00 00 81 00 00 81 00 00 81 00 00 81 00 00 81 00 00 81 00 00 FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 FF FF 00 80 01 00 80 01 00 80 01 00 80 01 00 80 01 00 80 01 00 FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  !media  "bledsprites.spriteproject",sprite,0,4        ;2e00 2eff - sprites
0110  $2F00              *= BTEMP
0111  $2F00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  !fill $100                                    ;2f00 2fff - temp of 256 bytes
0112  $3000              !ifdef LOADGFX { ;load the graphics automatically
0113  $3000              *= FDAT
0114  $3000  FF FF FF FF FF FF FF FF FF EB EF FF EF FF FF FF F7 F7 F7 55 7F 7F 7F 55 FB FB FB AA BF BF BF AA AA BF BE BB BE BA BE BA BF AB AB BB AB BB AB BB AA EB AA EB EA EF EA FF FB BB FB BB FB FB AB FF F7 D5 D5 D5 55 D5 55 55 5F 57 57 55 77 D5 75 F5 55 D7 55 D7 D5 DF D5 FF 77 F5 F7 F7 F7 F7 57 FF DD 99 99 FF 77 66 66 FF 01 38 7D 4F 1C 33 6F 6F 80 1C BE F2 38 CC 76 76 DF DF DF 6F 6F 33 7C C7 7B 7B BB F6 F6 CC 3E E3 00 70 1C 1B 0D 0C 0C 18 00 00 00 00 80 C0 60 30 38 7C F6 FA D6 6C 38 00 FF EA EF EC AC EC A8 AC FE AB FB 3A 2B 3A 2A 2A A8 E8 AC E8 EC EF EA FF 3A 2A 3B 3A 3B FB AB FF 00 38 6C 6D 0D 0D 39 61 00 00 00 CE 6B 6B 6B 6B 6B 6B 6B 6B 6B 6B CE 00 03 0E 3B 2F EE BB BB BF C0 B0 EC F8 FB FE FE FE 03 0D 37 1F DD 77 77 7F C0 70 DC F4 F7 FD FD FD 61 61 6D 6D 6D 6D 7D 00 02 FA 0A 7A 42 7A 0E 61 40 5F 50 5E 42 5E 70 86 61 0E 7A 42 7A 0A FA 02 86 70 5E 42 5E 50 5F 40 C4 E3 78 2E 37 99 5A 4D 23 C7 1E 74 EC 99 5A B2 4D 5A 99 37 2E 78 E3 C4 B2 5A 99 EC 74 1E C7 23 31 63 C6 8C 19 33 66 CC 8C C6 63 31 98 CC 66 33 CC 66 33 19 8C C6 63 31 33 66 CC 98 31 63 C6 8C 07 07 07 1F 1F 7F FF FF D0 D0 D0 F4 F4 FD FF FF 02 0B 0F 2F 3F 3F BF FF 80 E0 F0 B8 FC EC FE FB FF EF C7 83 C7 EF FF FF 80 10 3B 3F 1F 3F 3F 7F 00 00 C0 F0 78 DC EC EE 00 00 00 01 03 07 0F 1F 30 78 FC FE F8 E0 80 C0 40 80 20 77 3F 3F 7F 7F 00 00 00 E0 78 CC FE F6 FF FF EF C7 EF FF FF FF 01 7F 60 53 49 44 52 D9 80 FE 06 CA 92 22 4A 9B D9 52 44 49 53 60 7F 01 9B 4A 22 92 CA 06 FE 80 01 03 07 0F 1F 3F 7F FF 80 C0 E0 F0 F8 FC FE FF FF 7F 3F 1F 0F 07 03 01 AA AB A8 AC A0 B0 80 C0 FF FE FC F8 F0 E0 C0 80 7F 7F BF 5F 2F 17 08 07 FE FE FD FA F4 E8 10 E0 BB BF BF EF 2F 3B 0E 03 FE FE FE FB F8 EC B0 C0 77 7F 7F DF 1F 37 0D 03 FD FD FD F7 F4 DC 70 C0 6D 6D 6D 6D 6D 6D 39 00 FF EA EF EE EE EE EE EE AA AB AA AB AB AB AB AB EA EE EE EA EE EA EA AA AB AB AB AB AB AB AB EF 0F 3F 7C 78 78 30 01 03 F0 FC 3E 1E 1E 3C F8 E0 03 03 01 00 03 07 03 00 C0 C0 80 00 C0 E0 C0 00 07 1F 3F 7D F5 F5 FD FD D0 F4 FC 7D 7F 7F 7F 7F FD FD FD F5 75 3F 1F 07 7F 7F 7F 5F 5D FC F4 D0 FF FF 7F 1F 1F 07 07 07 FF FF FD F4 F4 D0 D0 D0 FF EF FF EF BB 3A 2E 0B EB FB EB EB AE AC B8 E0 EF C7 83 01 83 C7 EF FF 7F 6F 3F 36 18 0E 03 00 D6 A6 CC 8C 18 70 C0 00 07 03 07 0F 1E 38 60 80 E0 F0 E0 80 00 00 00 00 FF DF FF 6F 6F 3A 1C 07 FB F3 FB E6 E6 8C 38 E0 FF FF FF EF FF FF FF FF C7 83 01 00 01 83 C7 EF 83 01 00 00 00 01 83 C7 01 00 00 00 00 00 01 83 00 00 00 00 00 00 00 01 D9 B3 67 CF 9F 3E 7D FB 9B CD E6 F3 F9 7C BE DF FB 7D 3E 9F CF 67 B3 D9 DF BE 7C F9 F3 E6 CD 9B FB EA EA EA AA EA AA AA AF AB AB AA BB EA BA FA EB AA EF EB EF EF EA FF BB FA FB FB FB FB AB FF 0D 0D 0D 0D 0D 0D 0D 00 00 0C 1C 3D 2D 0D 0D 0D 00 38 6C 6D 61 61 79 6D 00 38 6C 6D 6D 6D 39 6D 00 1C 3E 77 6F EF DF FF 00 38 7C FE FE FF FF FF 6F 3F 37 1F 0F 07 01 00 FE FC FC F8 F0 E0 80 00 00 00 1C 3E 77 6F 6F 6F 00 00 38 7C FE FE FE FE 3F 37 1F 0D 07 01 00 00 FC FC F8 F0 E0 80 00 00 00 7F 40 40 4F 4C 4C 4F 00 FE 02 02 C2 62 62 C2 4C 4C 4C 4F 40 40 7F 00 62 62 62 C2 02 02 FE 00 00 60 6C 6D 6D 6D 3D 0D 03 0F 0D 19 1B 1D 0F 0F C0 F0 F0 F8 F8 F8 F0 F0 00 07 1C 30 63 66 C0 C3 00 E0 38 0C C6 66 63 C3 00 00 08 2E 3F 3F BF FF 00 20 30 38 BC EC FE FB 00 00 00 00 08 2C BE FF 00 00 00 00 08 2C 3E BB 00 00 00 00 00 00 00 22 00 00 00 00 00 00 02 83 33 3B BF EF BB 3A 2E 0B E3 FB EB EB AE AC B8 E0 00 02 2B BF BB 3A 2E 0B 00 82 E3 EB AE AC B8 E0 00 00 00 08 0C 2E 2F 0B 00 00 00 20 B0 FC F8 E0 00 00 00 00 00 00 00 00 FB EA EF EE AE EA AE AA F7 D5 DF DD 5D D5 5D 55 00 00 01 03 07 0F 1F 3F 00 00 80 C0 E0 F0 F8 FC 3F 1F 0F 07 03 01 00 00 FC F8 F0 E0 C0 80 00 00 00 00 00 07 18 27 5C 5D 00 00 00 E0 18 E4 3A BA 5C 5D 67 58 57 24 18 07 3A FA E6 1A EA 24 18 E0 00 00 01 1F 3F 77 DF FF 00 00 40 F4 FC DD F7 FF DF FF 77 7D 5F 15 15 05 F7 FF DD 7D F5 54 54 50 00 7C 78 7B 7C 4E 17 13 00 3E 1E DE 3E 72 E8 C8 13 17 4E 7C 7B 78 7C 00 C8 E8 72 3E DE 1E 3E 00 00 07 1C 30 61 63 C7 C1 00 E0 38 0C 86 86 83 83 C1 C1 61 67 30 1C 07 00 83 83 86 E6 0C 38 E0 00 00 18 3C 7E 7E 3C 18 00 07 03 01 01 01 00 01 00 E0 80 00 00 00 80 00 00 C0 C6 66 63 30 1C 07 00 63 63 66 C6 0C 38 E0 00 00 1B 00 1B 00 06 00 06 00 90 00 90 00 E4 00 E4 20 B9 20 10 20 B9 20 10 00 10 20 31 22 13 02 01 01 02 13 22 31 20 10 00 00 FF 00 7F 60 6F 6D 6D 00 FE 06 F6 36 B6 B6 B6 02 2E 32 AA 3B BE BB FF 2B FE BF EF BE FF EE BE 0C 19 33 66 CC 99 33 66 80 C0 62 66 CC 99 33 66 A7 A2 A2 50 7A 2A 2A 14 FF BF 2F 3F 2E 0F 0A 8C FC FC FC EC F8 EC C8 C0 30 7F C0 D9 4C 46 53 51 0C FE 03 9B 32 62 CA 8A FF EA EF EC EC EF EC EE F8 A8 E8 C8 C8 C8 08 F8 00 2F 3F 3F 3E 3F 2E 3F 00 B8 FC BC E8 9C A8 9C 00 1F 15 0E 10 23 66 46 00 F8 08 50 08 C4 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6D 6D 6D 6D 6C 6F 60 7F B6 B6 B6 B6 36 F6 06 FE BE FB FE BA F8 B2 AE 20 EC AA 8C 28 88 08 A8 00 CC 99 33 66 CC D9 F3 61 CC 99 33 66 CC 98 30 E0 00 00 00 00 00 00 00 00 C8 80 E2 F3 E2 FB FF FB 80 E2 B3 22 3B BF FB BF 51 53 46 4C D9 C0 7F 30 8A CA 62 32 9B 03 FE 18 EB EB EB EB EB EA AA 00 30 30 F0 00 28 28 A0 00 2E 3B 2E 39 2E 25 0A 00 AC 1C AC 18 9C 68 A8 00 66 66 53 60 34 3B 1F 00 66 22 E6 0A 84 54 F8 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7C 00 00 00 00 FC C6 FC C0 C0 C0 C0 00 C0 C0 C0 C0 C6 C6 7C 00 FC C6 FC C6 C6 C6 C6 00 7C C6 C6 C6 C6 C6 C6 00 C6 C6 C6 C6 C6 C6 7C 00 7E 18 18 18 18 18 18 00 78 C0 7C 06 C6 C6 7C 00 00 18 18 00 18 18 00 00 7C C6 CE D6 E6 C6 7C 00 18 38 38 18 18 18 7E 00 3C 06 7C C0 C6 C6 FE 00 3C 06 1C 06 C6 C6 7C 00 C6 C6 C6 C6 7E 06 06 00 F8 C0 7C 06 C6 C6 7C 00 78 C0 FC C6 C6 C6 7C 00 F8 0C 3E 0C 0C 0C 0C 00 7C C6 7C C6 C6 C6 7C 00 7C C6 C6 C6 7E 06 7C 00 11 4C 50 A0 7F 90 3C 3C 3C 3C 70 74 78 1D 1D 1B 1B 1B 0D 35 33 2C 2E 2E 2E 31 63 63 62 61 60 58 30 37 5F 00 00 62 61 60 58 30 37 5F 00 00 00 00 01 01 01 01 01 01 01 01 04 04 04 48 08 08 03 03 03 03 02 02 02 02 02 02 14 14 20 20 20 24 24 28 28 38 38 64 64 64 64 64 3C 3C 3C 0C 0C 0C 6F 6E 7C 18 6D 68 8E 68 68 14 14 08 08 0C 81 83 85 8D 8D 8E 8E 8E 8E 8E 8F 8F 8F 8F 8F 8F 90 94 94 98 7D 9C 9C 9C 9C 9C 8F 8F 8E 8E 8E 13 13 13 13 A4 13 A4 A9 AB 08 AC AC AC AB AE AE AE AE 28 28 38 38 24 4C B0 B0 B0 A4 B2 B2 B2 B2 B4 A9 8E B5 B7 A4 B9 01 BB BD 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 12 4D 51 A1 80 91 3D 3D 3D 3D 71 75 79 1E 1E 1C 1C 1C 0E 36 34 2D 2F 2F 2F 32 63 63 63 62 61 60 58 30 37 5F 00 63 63 63 62 61 60 58 30 37 5F 00 01 01 01 01 01 01 01 01 05 05 05 49 09 09 03 03 03 03 02 02 02 02 02 02 15 15 21 21 21 25 25 29 29 39 39 65 65 65 65 65 3D 3D 3D 0C 0C 0C 19 19 19 19 19 69 69 69 69 15 15 09 09 0C 82 84 86 8D 8D 69 69 69 69 69 09 09 09 09 09 09 91 95 95 99 7E 9D 9D 9D 9D 9D 09 09 69 69 69 13 13 13 13 13 A4 13 AA AB 09 AD AD AB AB AF AF AF AF 29 29 39 39 25 4D B1 B1 B1 A4 B3 B3 B3 B3 B4 AA 69 B6 B8 13 BA 01 BC BE 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 13 4E 52 A2 A7 92 3E 3E 3E 3E 72 76 7A 45 45 43 43 43 0F 5D 5B 54 56 56 56 59 63 63 63 62 61 60 58 30 37 5F 00 63 62 61 60 58 30 37 5F 00 00 00 01 01 01 01 01 01 01 01 06 06 06 4A 0A 0A 03 03 03 03 02 02 02 02 02 02 16 16 22 22 22 26 26 2A 2A 3A 3A 66 66 66 66 66 41 41 41 0C 0C 0C 47 47 6C 1F 6C 6A 6A 6A 6A 16 16 0A 0A 0C 56 56 87 89 8B 6A 6A 6A 6A 6A 0A 0A 0A 0A 0A 0A 92 96 96 9A A5 9E 9E 9E 9E 9E 0A 0A 6A 6A 6A 13 13 13 13 13 A4 13 A9 AB 0A AD AC AB AB D6 D6 D6 D6 2A 2A 3A 3A 26 4E D8 D8 D8 A4 DA DA DA DA B4 A9 6A DD DF 13 E1 01 E3 E5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 13 4F 53 A3 A8 93 40 40 40 3F 73 77 7B 46 46 44 44 44 10 5E 5C 55 57 57 57 5A 63 63 62 61 60 58 30 37 5F 00 00 63 63 62 61 60 58 30 37 5F 00 00 01 01 01 01 01 01 01 01 07 07 07 4B 0B 0B 03 03 03 03 02 02 02 02 02 02 17 17 23 23 23 27 27 2B 2B 3B 3B 67 67 67 67 67 42 42 42 0C 0C 0C 1A 1A 1A 1A 1A 6B 6B 6B 6B 17 17 0B 0B 0C 57 57 88 8A 8C 6B 6B 6B 6B 6B 0B 0B 0B 0B 0B 0B 93 97 97 9B A6 9F 9F 9F 9F 9F 0B 0B 6B 6B 6B 13 13 13 13 A4 13 A4 AA AB 0B AC AD AC AB D7 D7 D7 D7 2B 2B 3B 3B 27 4F D9 D9 D9 A4 DB DB DB DB B4 AA 6B DE E0 A4 E2 01 E4 E6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08 55 51 5F 51 51 51 51 51 51 51 51 57 57 5E 5A 5C 5A 5E 57 57 51 9F 0B 0F 09 01 16 16 16 16 12 14 15 13 17 11 91 16 16 12 14 15 13 17 11 11 11 91 1D 1F 1E 1A 1C 1A 1E 1E 09 0B 0B 0B 0F 0B 29 2E 2C 2B 29 28 2B 2F 2E 2D 2B 2B 11 13 1F 11 13 11 13 11 13 17 12 15 13 16 14 15 17 15 12 1B 51 51 51 51 51 0B 0E 0B 0B 2C 2E 0F 09 12 09 09 09 00 00 0B 0B 0B 0E 0E 0F 09 09 09 09 09 51 51 53 5F 51 11 13 17 14 10 29 2F 2B 2B 2B 13 12 13 17 11 1F 10 19 19 2F 1F 1F 1F 1E 11 12 17 12 19 1F 19 1F 19 57 0B 0F 09 12 13 11 17 1F 09 1F 0A 1B 11 10 0F 1E 29 51 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 01 0F 01 01 03 03 07 03 03 01 07 07 0E 0A 0C 0A 0E 07 07 07 0F 0B 0F 09 01 06 06 06 06 06 02 04 05 03 07 01 06 06 06 06 06 02 04 05 03 07 01 0B 0B 0B 0B 0B 0C 0C 0A 0E 0E 0C 0C 0A 0E 09 0E 0C 0B 09 08 0B 0F 0E 0D 0B 0B 03 04 0F 03 04 03 04 03 04 07 02 05 03 06 06 03 02 03 07 0D 01 01 01 01 01 0C 0B 0A 0E 0C 0E 08 0D 06 09 09 09 00 00 0C 0A 0E 0F 09 0A 0A 0C 0D 0E 08 07 01 03 0F 01 03 04 04 02 06 0D 0A 0C 0A 0E 05 04 04 03 03 04 03 09 09 08 0F 0F 09 0E 03 04 05 04 09 0F 09 0F 09 07 0B 0F 09 03 04 03 03 0F 09 0F 0F 0B 03 00 0F 0E 09 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 01 0F 01 01 03 03 07 03 03 01 07 07 0E 0A 0C 0A 0E 07 07 07 0F 0B 0F 09 01 06 06 06 06 06 02 04 05 03 07 01 06 06 06 02 04 05 03 07 01 01 01 0B 0B 0B 0B 0B 0C 0C 0A 0E 0E 0C 0B 0A 0E 09 0E 0C 0B 09 08 0B 0F 0E 0D 0C 0E 03 04 0F 03 04 03 04 03 04 07 02 05 03 06 06 03 02 03 07 0D 01 01 01 01 01 0C 0B 0A 0E 0B 0B 08 0D 06 09 09 09 09 09 0C 0A 0E 0F 09 0A 0A 0C 0D 0E 08 07 01 03 0F 01 03 04 04 02 06 0D 0A 0C 0A 0E 05 04 04 03 03 04 03 09 09 08 0F 0F 09 0E 03 04 05 04 09 0F 09 0F 09 07 0B 0F 09 05 04 03 03 0F 09 0F 0F 0B 03 00 0F 0E 09 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 01 0F 01 01 06 05 03 06 0E 01 07 07 0E 0A 0C 0A 0E 07 07 01 0F 0B 0F 09 01 06 06 06 06 02 04 05 03 07 01 01 06 06 06 06 02 04 05 03 07 01 01 0D 0F 0E 0A 0C 0A 0E 0E 0E 0E 0C 0C 0A 0E 09 0E 0C 0B 09 08 0B 0F 0E 0D 0C 0E 05 06 0F 05 06 05 06 05 06 07 02 05 03 06 04 05 07 05 02 0B 01 01 01 01 01 0C 0B 0A 0E 0B 0B 08 0D 02 09 09 09 09 09 0C 0A 0E 0F 09 0A 0A 0C 0D 0E 08 05 01 03 0F 01 05 06 02 06 00 0D 0A 0C 0A 0E 03 02 06 05 05 09 00 09 09 08 0F 0F 0F 0E 05 06 02 02 09 0F 01 0F 09 07 0B 0F 09 04 06 04 05 0F 09 0F 0F 0B 05 00 0F 0E 09 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  !bin    "gamegfx61.prg",,10                           ;2ff8 3fff - block graphics
0115  $4000              ;!bin    "blocanim71.prg",,10                         ;2ff8 3fff - block graphics
0116  $4000              }
0117  $4000              *= BLEDSCREEN
0118  $4000  F0 C3 C3 C3 C3 C3 C3 C3 C3 EE A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 EA E3 E3 E3 E3 E3 E3 E3 F4 C2 CF CF CF CF CF CF CF CF C2 83 88 81 92 BA A0 AD A0 A0 A0 A0 82 8C 8F 83 8B BA A0 A0 A0 A0 EA B2 98 B2 82 8C 85 84 F4 C2 CF CF CF CF CF CF CF CF C2 84 B0 B2 B1 BA A0 A0 A0 A0 A0 A0 82 8D 81 92 8B BA A0 A0 A0 A0 EA A0 A0 A0 A6 A0 A0 A0 F4 C2 CF CF CF CF CF CF CF CF C2 84 B0 B2 B2 BA A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 EA A0 8D 81 90 85 84 A0 F4 C2 CF CF CF CF CF CF CF CF C2 84 B0 B2 B3 BA A0 A0 A0 A0 A0 A0 A0 82 89 94 93 A0 B4 AD B7 A0 EA A0 96 B1 AE B1 AB A0 F4 C2 CF CF CF CF CF CF CF CF C2 84 B8 B0 B0 BA A0 A0 A0 A0 A0 A0 B4 94 88 92 8F 95 87 88 BA A0 EA A0 A0 A0 A0 A0 A0 A0 F4 C2 CF CF CF CF CF CF CF CF C2 86 89 8E 84 92 BA A0 A0 A0 A0 A0 B5 85 98 90 8C 8F 84 85 BA A0 EA A8 83 A9 B1 B9 B9 B3 F4 C2 CF CF CF CF CF CF CF CF C2 9A 8C 89 84 85 BA A0 A0 A0 A0 A0 B6 82 8F 8E 95 93 A0 A0 BA A0 EA A0 84 A7 81 92 83 A0 F4 C2 CF CF CF CF CF CF CF CF C2 94 92 81 8E 93 BA A0 A0 A0 A0 A0 B7 84 85 81 84 8C 99 A0 BA A0 EA A0 94 8F 90 81 9A A0 F4 A0 F7 F7 F7 F7 F7 F7 F7 F7 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 E3 E3 E3 E3 E3 E3 E3 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63 64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB DC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  !media  "bledscreen.charscreen",char,0,0,40,25        ;4000 43e7 - screen: block editor
0119  $43E8              ;4400 47ff - CODE
0120  $43E8              ;4800 48ff - level map during editing
0121  $43E8              ;4900 acff - 100 levels
0122  $43E8              ;ad00 ffff - area available for packed levels
0123  $43E8              !ifdef LOADGFX { ;load a test map automatically
0124  $4900              *= MAP_LEVELS
0125  $4900  3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 52 52 52 52 52 3C 52 52 52 52 52 52 48 52 52 52 52 52 3C 3C 52 3C 15 3C 14 3C 52 19 19 19 19 52 48 52 52 52 52 52 3C 3C 52 3C 15 3C 14 3C 52 19 08 08 19 52 48 52 52 52 52 52 3C 3C 52 3C 15 3C 14 3C 52 19 08 08 19 52 48 52 52 52 52 52 3C 3C 52 3C 15 3C 14 3C 52 19 08 08 19 52 3C 3C 3C 3C 3C 52 3C 3C 52 3C 3C 3C 3C 3C 52 19 08 08 19 52 3C 14 3C 15 3C 52 3C 3C 52 52 52 52 52 48 52 19 08 08 19 52 3C 14 3C 15 3C 52 3C 3C 52 52 52 52 52 48 52 19 08 08 19 52 3C 14 3C 15 3C 52 3C 3C 52 52 52 52 52 48 52 19 19 19 19 52 3C 14 3C 15 3C 52 3C 3C 52 52 52 52 52 48 52 52 52 52 52 52 3C 52 52 52 52 52 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 3C 06 08 0E 00 00 00 00 00 00 00 00 00 00 00 00  !bin    "level01.bin",,2
0126  $49FF              }
0127  $49FF              
0128  $49FF              !ifndef LOADGFX {
0129  $49FF              *= FDAT
0130  $49FF              !fill $0800   ;clear font data
0131  $49FF              !fill $0800   ;clear block data
0132  $49FF              *= MAP
0133  $49FF              !fill $0100   ;clear map data
0134  $49FF              }
0135  $49FF              
0136  $49FF              ;---------------------------------------------------
0137  $49FF              ;start jump vectors
0138  $49FF              
0139  $49FF              !ifdef STARTWITHRUN {
0140  $0801              *= $0801
0141  $0801  0B 08 0A 00 9E 32 30 36 31 00 00 00  !basic
0142  $080D              ;         jsr createBDAT
0143  $080D              ;         jmp start_x
0144  $080D              ;!source "scracthpad.asm"
0145  $080D              ;start_x
0146  $080D              }
0147  $080D              
0148  $080D              !ifndef STARTWITHRUN {
0149  $080D              *= $0810
0150  $080D              }
0151  $080D              
0152  $080D              ;         lda #$00
0153  $080D              ;         sta $c6
0154  $080D              ;         jsr $ffe4
0155  $080D              ;         lda #$00
0156  $080D              ;         sta $c6
0157  $080D              ;         jsr $ffe4
0158  $080D              ;         beq *-3
0159  $080D              ;         jmp packlevels
0160  $080D              
0161  $080D  A9 36       lda #$36
0162  $080F  85 01       sta $01
0163  $0811  20 0F 44    jsr Inithelp
0164  $0814  A9 02       lda #S_IRQ_HELP_EDITOR
0165  $0816  8D 49 08    sta s_irq
0166  $0819  4C 1C 08    jmp START
0167  $081C              
0168  $081C              ;---------------------------------------------
0169  $081C              
0170  $081C              
0171  $081C  78          START    sei
0172  $081D  A9 4A       lda #<IRQ
0173  $081F  A0 08       ldy #>IRQ
0174  $0821  8D 14 03    sta $0314
0175  $0824  8C 15 03    sty $0315
0176  $0827              
0177  $0827  A2 7F       ldx #$7F
0178  $0829  8E 0D DC    stx $DC0D
0179  $082C  A2 01       ldx #$01
0180  $082E  8E 1A D0    stx $d01A
0181  $0831  A2 1B       ldx #$1B
0182  $0833  8E 11 D0    stx $d011
0183  $0836              
0184  $0836  A9 36       lda #$36           ;Make RAM at $A000 visible.
0185  $0838  85 01       sta $01
0186  $083A              
0187  $083A  A2 00       ldx #$00
0188  $083C  8E 91 44    stx keypress
0189  $083F              
0190  $083F  58          cli
0191  $0840  4C 40 08    jmp *
0192  $0843              
0193  $0843              ;_4ever   lda s_irq
0194  $0843              ;         cmp #S_IRQ_MAPEDIT
0195  $0843              ;         bne _4ever
0196  $0843              ;         jsr mapedit4everloop
0197  $0843              ;         jmp _4ever
0198  $0843              
0199  $0843              error     ;this is a piece of code that should never be executed.
0200  $0843  EE 20 D0    inc $d020
0201  $0846  4C 43 08    jmp error
0202  $0849              
0203  $0849              ;-----------------------------
0204  $0849              ;IRQ states
0205  $0849              
0206  $0849  02          s_irq    !byte S_IRQ_HELP_EDITOR
0207  $084A              
0208  $084A              S_IRQ_BLED          = 1
0209  $084A              S_IRQ_HELP_EDITOR   = 2
0210  $084A              S_IRQ_MAPEDIT       = 3
0211  $084A              S_IRQ_HELP_MAPEDIT  = 4
0212  $084A              
0213  $084A              ;-----------------------------
0214  $084A  AD 49 08    IRQ      lda s_irq
0215  $084D              
0216  $084D  C9 02       cmp #S_IRQ_HELP_EDITOR
0217  $084F  D0 08       bne _i0
0218  $0851  20 95 08    jsr IRQ_HELP_EDITOR
0219  $0854  A2 80       ldx #$80
0220  $0856  4C 80 08    jmp end_irq
0221  $0859              
0222  $0859  C9 01       _i0      cmp #S_IRQ_BLED
0223  $085B  D0 08       bne _i1
0224  $085D  20 D9 08    jsr IRQ_BLED
0225  $0860  A2 80       ldx #$80
0226  $0862  4C 80 08    jmp end_irq
0227  $0865              
0228  $0865  C9 04       _i1      cmp #S_IRQ_HELP_MAPEDIT
0229  $0867  D0 08       bne _i2
0230  $0869  20 B7 08    jsr IRQ_HELP_MAPEDIT
0231  $086C  A2 80       ldx #$80
0232  $086E  4C 80 08    jmp end_irq
0233  $0871              
0234  $0871  C9 03       _i2      cmp #S_IRQ_MAPEDIT
0235  $0873  D0 08       bne _i3
0236  $0875  20 91 08    jsr IRQ_MAPEDIT
0237  $0878  A2 C0       ldx #$c0
0238  $087A  4C 80 08    jmp end_irq
0239  $087D              
0240  $087D  4C 43 08    _i3      jmp error
0241  $0880              
0242  $0880              ;end irq - does the final things needed and reads keypress
0243  $0880  8E 12 D0    end_irq  stx $d012
0244  $0883  A2 01       ldx #$01
0245  $0885  8E 19 D0    stx $d019
0246  $0888              ;         asl $d019
0247  $0888  20 E4 FF    jsr $ffe4
0248  $088B  8D 91 44    sta keypress
0249  $088E              
0250  $088E              ;         ldx #$80
0251  $088E              ;         stx $d012
0252  $088E  4C 31 EA    jmp $ea31
0253  $0891              
0254  $0891              ;------------------------------------------------------
0255  $0891              ;IRQ for the mapeditor
0256  $0891              
0257  $0891              IRQ_MAPEDIT
0258  $0891  20 2A 12    jsr MAPIRQ
0259  $0894  60          rts
0260  $0895              
0261  $0895              ;------------------------------------------------------
0262  $0895              ;IRQ for editor help screen
0263  $0895              
0264  $0895              IRQ_HELP_EDITOR
0265  $0895  A2 95       ldx #HELP_EDITOR_D018
0266  $0897  8E 18 D0    stx $d018
0267  $089A  A2 0F       ldx #$0F
0268  $089C  8E 21 D0    stx $d021
0269  $089F  A2 00       ldx #$00
0270  $08A1  8E 20 D0    stx $d020
0271  $08A4  8E 15 D0    stx $d015        ;hide sprites
0272  $08A7              
0273  $08A7  AD 91 44    lda keypress
0274  $08AA  C9 0D       cmp #$0D           ;RETURN
0275  $08AC  D0 08       bne _he00
0276  $08AE  20 13 44    jsr Initbled
0277  $08B1  A9 01       lda #S_IRQ_BLED
0278  $08B3  8D 49 08    sta s_irq
0279  $08B6  60          _he00    rts
0280  $08B7              
0281  $08B7              ;------------------------------------------------------
0282  $08B7              ;IRQ for editor help screen
0283  $08B7              
0284  $08B7              IRQ_HELP_MAPEDIT
0285  $08B7  A2 A5       ldx #HELP_MAPEDIT_D018
0286  $08B9  8E 18 D0    stx $d018
0287  $08BC  A2 0F       ldx #$0F
0288  $08BE  8E 21 D0    stx $d021
0289  $08C1  A2 00       ldx #$00
0290  $08C3  8E 20 D0    stx $d020
0291  $08C6  8E 15 D0    stx $d015        ;hide sprites
0292  $08C9              
0293  $08C9  AD 91 44    lda keypress
0294  $08CC  C9 0D       cmp #$0D           ;RETURN
0295  $08CE  D0 08       bne _hm00
0296  $08D0  20 00 44    jsr Initmapedit
0297  $08D3  A9 03       lda #S_IRQ_MAPEDIT
0298  $08D5  8D 49 08    sta s_irq
0299  $08D8  60          _hm00    rts
0300  $08D9              
0301  $08D9              ;------------------------------------------------------
0302  $08D9              ;IRQ for the editor
0303  $08D9              
0304  $08D9              IRQ_BLED
0305  $08D9  A2 00       ldx #$00
0306  $08DB  8E 20 D0    stx $d020
0307  $08DE  AE FD 2F    ldx DD021
0308  $08E1  8E 21 D0    stx $d021
0309  $08E4  AE FE 2F    ldx DD022
0310  $08E7  8E 22 D0    stx $d022
0311  $08EA  AE FF 2F    ldx DD023
0312  $08ED  8E 23 D0    stx $d023
0313  $08F0              
0314  $08F0              ;Some timing to handle upper part and block row so that we don't have ugly glitches
0315  $08F0  A2 11       ldx #$11
0316  $08F2  AC A2 09    ldy SPR1Y+1
0317  $08F5  C0 07       cpy #7
0318  $08F7  30 02       bmi _ib_del
0319  $08F9  A2 0D       ldx #$0d
0320  $08FB  CA          _ib_del  dex
0321  $08FC  D0 FD       bne *-1
0322  $08FE              
0323  $08FE  A2 D8       ldx #$D8
0324  $0900  8E 16 D0    stx $d016
0325  $0903  A2 1C       DD018    ldx #$1C
0326  $0905  8E 18 D0    stx $d018
0327  $0908              
0328  $0908              
0329  $0908              !ifdef DEBUG {
0330  $0908  48          pha
0331  $0909  A9 07       lda #7
0332  $090B  8D 20 D0    sta $d020
0333  $090E  68          pla
0334  $090F              }
0335  $090F              
0336  $090F              
0337  $090F              !ifdef DEBUG {
0338  $090F  48          pha
0339  $0910  A9 02       lda #2
0340  $0912  8D 20 D0    sta $d020
0341  $0915  68          pla
0342  $0916              }
0343  $0916  20 A0 10    jsr JOYCHECK
0344  $0919              
0345  $0919              !ifdef DEBUG {
0346  $0919  48          pha
0347  $091A  A9 00       lda #0
0348  $091C  8D 20 D0    sta $d020
0349  $091F  68          pla
0350  $0920              }
0351  $0920              
0352  $0920              
0353  $0920              !ifdef DEBUG {
0354  $0920  48          pha
0355  $0921  A9 06       lda #6
0356  $0923  8D 20 D0    sta $d020
0357  $0926  68          pla
0358  $0927              }
0359  $0927  20 DD 17    jsr BITEIT
0360  $092A              
0361  $092A              !ifdef DEBUG {
0362  $092A  48          pha
0363  $092B  A9 00       lda #0
0364  $092D  8D 20 D0    sta $d020
0365  $0930  68          pla
0366  $0931              }
0367  $0931              
0368  $0931              ;Wasting a lot of CPU power here waiting from line $80 to $ff
0369  $0931              
0370  $0931  A2 FF       ldx #$ff
0371  $0933  EC 12 D0    cpx $d012
0372  $0936  D0 FB       bne *-3
0373  $0938              ;set the upper part of the screen
0374  $0938  A2 08       ldx #$08
0375  $093A  8E 16 D0    stx $d016
0376  $093D  A2 15       ldx #$15
0377  $093F  8E 18 D0    stx $d018
0378  $0942  A2 0B       ldx #$0B
0379  $0944  8E 21 D0    stx $d021
0380  $0947              
0381  $0947              
0382  $0947              !ifdef DEBUG {
0383  $0947  EE 20 D0    inc $d020
0384  $094A              }
0385  $094A  20 91 09    jsr FIXSCREEN
0386  $094D  A9 00       lda #BLOCKLINE_BLED
0387  $094F  20 0D 19    jsr drawBlockLine
0388  $0952              ;         jsr FIXSCREEN
0389  $0952              
0390  $0952              !ifdef DEBUG {
0391  $0952  CE 20 D0    dec $d020
0392  $0955              }
0393  $0955              
0394  $0955              
0395  $0955              !ifdef DEBUG {
0396  $0955  48          pha
0397  $0956  A9 05       lda #5
0398  $0958  8D 20 D0    sta $d020
0399  $095B  68          pla
0400  $095C              }
0401  $095C  20 C7 0B    jsr KEYCHECK
0402  $095F              ;         jmp KEYCHECK2 ;Returns to IRQ2BACK
0403  $095F              
0404  $095F              !ifdef DEBUG {
0405  $095F  48          pha
0406  $0960  A9 00       lda #0
0407  $0962  8D 20 D0    sta $d020
0408  $0965  68          pla
0409  $0966              }
0410  $0966              
0411  $0966  60          rts
0412  $0967              
0413  $0967              ;------------------------------------------
0414  $0967              ;Reset IRQ to default $ea31
0415  $0967              ;
0416  $0967              ; This clears keybuffer
0417  $0967              
0418  $0967              NOIRQ
0419  $0967  78          sei
0420  $0968  A9 31       lda #$31
0421  $096A  A0 EA       ldy #$EA
0422  $096C  8D 14 03    sta $0314
0423  $096F  8C 15 03    sty $0315
0424  $0972  A2 81       ldx #$81
0425  $0974  8E 0D DC    stx $DC0D
0426  $0977  A2 00       ldx #$00     ;was 79
0427  $0979  8E 19 D0    stx $d019
0428  $097C  A2 00       ldx #$00     ;was 01
0429  $097E  8E 1A D0    stx $d01A
0430  $0981  A2 00       ldx #$00
0431  $0983  8E 15 D0    stx $d015
0432  $0986  A2 36       ldx #$36
0433  $0988  86 01       stx $01
0434  $098A              
0435  $098A  A2 00       ldx #$00
0436  $098C  8E 91 44    stx keypress
0437  $098F  58          cli
0438  $0990  60          rts
0439  $0991              ;---------------------------------------------
0440  $0991              
0441  $0991              
0442  $0991              ;---------------------------------------------
0443  $0991              
0444  $0991  AE 19 12    FIXSCREEN ldx FINDER      ;;;;;;;
0445  $0994  F0 09       beq SPR1X
0446  $0996              
0447  $0996  AE F7 15    ldx BLONO+1
0448  $0999  BD 90 05    lda BPLC,x
0449  $099C  8D 51 0B    sta CNO+1
0450  $099F              
0451  $099F              ;character bitmap sprite
0452  $099F  A2 00       SPR1X    ldx #$00
0453  $09A1  A0 00       SPR1Y    ldy #$00
0454  $09A3  BD 0D 45    lda SPRX,x
0455  $09A6  18          clc
0456  $09A7  69 01       adc #$01
0457  $09A9  8D 00 D0    sta $d000
0458  $09AC  B9 F3 44    lda SPRY,y
0459  $09AF              ;         sec
0460  $09AF              ;         sbc #13
0461  $09AF  18          clc
0462  $09B0  69 03       adc #$03
0463  $09B2  8D 01 D0    sta $d001
0464  $09B5              
0465  $09B5  A9 00       lda #$00
0466  $09B7  8D 10 D0    sta $d010
0467  $09BA              
0468  $09BA              ;other sprites
0469  $09BA  A0 00       ldy #$00
0470  $09BC  AD F7 15    lda BLONO+1
0471  $09BF  C9 28       cmp #$28
0472  $09C1  90 05       bcc FS1
0473  $09C3  38          sec
0474  $09C4  E9 28       sbc #$28
0475  $09C6  A0 01       ldy #$01
0476  $09C8  AA          FS1      tax
0477  $09C9  BD 0D 45    lda SPRX,x
0478  $09CC  38          sec
0479  $09CD  E9 08       sbc #$08
0480  $09CF  8D 04 D0    sta $d004
0481  $09D2  E0 1D       cpx #$1D
0482  $09D4  90 08       bcc *+10
0483  $09D6  AD 10 D0    lda $d010
0484  $09D9  09 04       ora #%00000100
0485  $09DB  8D 10 D0    sta $d010
0486  $09DE  B9 F3 44    lda SPRY,y
0487  $09E1  18          clc
0488  $09E2  69 4A       adc #$4A
0489  $09E4  8D 05 D0    sta $d005
0490  $09E7              
0491  $09E7  AD 51 0B    lda CNO+1
0492  $09EA  C9 F0       cmp #$F0
0493  $09EC  90 08       bcc FS3-2
0494  $09EE  38          sec
0495  $09EF  E9 F0       sbc #$F0
0496  $09F1  A2 07       ldx #$07
0497  $09F3  4C 02 0A    jmp FS4
0498  $09F6  A2 FF       ldx #$FF
0499  $09F8  E8          FS3      inx
0500  $09F9  DD 35 45    cmp SCRYLOPLC,x
0501  $09FC  B0 FA       bcs FS3
0502  $09FE  38          sec
0503  $09FF  FD 34 45    sbc SCRYLOPLC-1,x
0504  $0A02  A8          FS4      tay
0505  $0A03  B9 0D 45    lda SPRX,y
0506  $0A06  38          sec
0507  $0A07  E9 08       sbc #$08
0508  $0A09  8D 06 D0    sta $d006
0509  $0A0C  C0 1D       cpy #$1D
0510  $0A0E  90 08       bcc *+10
0511  $0A10  AD 10 D0    lda $d010
0512  $0A13  09 08       ora #%00001000
0513  $0A15  8D 10 D0    sta $d010
0514  $0A18  BD F3 44    lda SPRY,x
0515  $0A1B  18          clc
0516  $0A1C  69 82       adc #$82
0517  $0A1E  8D 07 D0    sta $d007
0518  $0A21              
0519  $0A21              ;draw the individual block
0520  $0A21  20 F4 15    jsr getBlockNumber
0521  $0A24  A0 01       ldy #$01
0522  $0A26  20 16 1A    jsr printSingleBlock
0523  $0A29              
0524  $0A29  A0 04       ldy #$04
0525  $0A2B  20 16 1A    jsr printSingleBlock
0526  $0A2E  A0 06       ldy #$06
0527  $0A30  20 16 1A    jsr printSingleBlock
0528  $0A33  A0 08       ldy #$08
0529  $0A35  20 16 1A    jsr printSingleBlock
0530  $0A38              
0531  $0A38  AE 51 0B    ldx CNO+1       ;MARK NO
0532  $0A3B  8A          txa
0533  $0A3C  18          clc
0534  $0A3D  69 80       adc #$80
0535  $0A3F  8D 37 04    sta $0437
0536  $0A42  A0 39       ldy #$39
0537  $0A44  A9 04       lda #$04
0538  $0A46  20 69 16    jsr putNo
0539  $0A49              
0540  $0A49  20 F4 15    jsr getBlockNumber     ;BLOCK NO
0541  $0A4C  A0 43       ldy #$43
0542  $0A4E  A9 04       lda #$04
0543  $0A50  20 69 16    jsr putNo
0544  $0A53              
0545  $0A53  AE F7 15    ldx BLONO+1     ;BMARK NO
0546  $0A56  BD 90 05    lda BPLC,x
0547  $0A59  AA          tax
0548  $0A5A  A0 6B       ldy #$6B
0549  $0A5C  A9 04       lda #$04
0550  $0A5E  20 69 16    jsr putNo
0551  $0A61              
0552  $0A61  AD FD 2F    lda DD021
0553  $0A64  AA          tax
0554  $0A65  29 0F       and #%00001111
0555  $0A67  8D 61 D8    sta $D861
0556  $0A6A  8D 62 D8    sta $D862
0557  $0A6D  A0 5F       ldy #$5F
0558  $0A6F  A9 04       lda #$04
0559  $0A71  20 69 16    jsr putNo
0560  $0A74              
0561  $0A74  AD FE 2F    lda DD022
0562  $0A77  AA          tax
0563  $0A78  29 0F       and #%00001111
0564  $0A7A  8D 89 D8    sta $D889
0565  $0A7D  8D 8A D8    sta $D88A
0566  $0A80  A0 87       ldy #$87
0567  $0A82  A9 04       lda #$04
0568  $0A84  20 69 16    jsr putNo
0569  $0A87              
0570  $0A87  AD FF 2F    lda DD023
0571  $0A8A  AA          tax
0572  $0A8B  29 0F       and #%00001111
0573  $0A8D  8D B1 D8    sta $D8B1
0574  $0A90  8D B2 D8    sta $D8B2
0575  $0A93  A0 AF       ldy #$AF
0576  $0A95  A9 04       lda #$04
0577  $0A97  20 69 16    jsr putNo
0578  $0A9A              
0579  $0A9A  20 F4 15    jsr getBlockNumber
0580  $0A9D  BD 00 3C    lda BCOL0,x
0581  $0AA0  29 F0       and #%11110000
0582  $0AA2  8D B9 0A    sta BCORA+1
0583  $0AA5  AE F7 15    ldx BLONO+1
0584  $0AA8  BD 90 D9    lda BD8PLC,x
0585  $0AAB  AC 19 12    ldy FINDER
0586  $0AAE  D0 06       bne *+8
0587  $0AB0  AE 51 0B    ldx CNO+1         ;BMARK COL
0588  $0AB3  BD D0 DA    lda FD8PLC,x
0589  $0AB6  29 0F       and #%00001111
0590  $0AB8  09 00       BCORA    ora #$00
0591  $0ABA  AA          tax
0592  $0ABB  29 07       and #%00000111
0593  $0ABD  8D D9 D8    sta $D8D9
0594  $0AC0  8D DA D8    sta $D8DA
0595  $0AC3  A0 D7       ldy #$D7
0596  $0AC5  A9 04       lda #$04
0597  $0AC7  20 69 16    jsr putNo
0598  $0ACA              
0599  $0ACA  A2 00       COLOR    ldx #$00
0600  $0ACC  F0 0F       beq A0
0601  $0ACE  E0 01       cpx #$01
0602  $0AD0  F0 12       beq A1
0603  $0AD2  E0 02       cpx #$02
0604  $0AD4  F0 15       beq A2
0605  $0AD6  A0 DB       A3       ldy #$DB
0606  $0AD8  A9 04       lda #$04
0607  $0ADA  4C EF 0A    jmp A4
0608  $0ADD  A0 63       A0       ldy #$63
0609  $0ADF  A9 04       lda #$04
0610  $0AE1  4C EF 0A    jmp A4
0611  $0AE4  A0 8B       A1       ldy #$8B
0612  $0AE6  A9 04       lda #$04
0613  $0AE8  4C EF 0A    jmp A4
0614  $0AEB  A0 B3       A2       ldy #$B3
0615  $0AED  A9 04       lda #$04
0616  $0AEF  20 9F 16    A4       jsr PUTARROW
0617  $0AF2              
0618  $0AF2  AE 19 12    ldx FINDER
0619  $0AF5  A0 00       ldy #$00
0620  $0AF7  A9 05       lda #$05
0621  $0AF9  20 8D 16    jsr PUTYORN
0622  $0AFC              
0623  $0AFC  AE 17 12    ldx ZLIDE
0624  $0AFF  A0 28       ldy #$28
0625  $0B01  A9 05       lda #$05
0626  $0B03  20 8D 16    jsr PUTYORN
0627  $0B06              
0628  $0B06  AE 18 12    ldx TRANS
0629  $0B09  A0 50       ldy #$50
0630  $0B0B  A9 05       lda #$05
0631  $0B0D  20 8D 16    jsr PUTYORN
0632  $0B10              
0633  $0B10  20 F4 15    jsr getBlockNumber            ;BIT5
0634  $0B13  BD 00 3C    lda BCOL0,x
0635  $0B16  29 10       and #BIT_THROUGH
0636  $0B18  AA          tax
0637  $0B19  A0 E6       ldy #$E6
0638  $0B1B  A9 04       lda #$04
0639  $0B1D  20 8D 16    jsr PUTYORN
0640  $0B20              
0641  $0B20  20 F4 15    jsr getBlockNumber            ;BIT5
0642  $0B23  BD 00 3C    lda BCOL0,x
0643  $0B26  29 20       and #BIT_EXPLODE
0644  $0B28  AA          tax
0645  $0B29  A0 0E       ldy #$0E
0646  $0B2B  A9 05       lda #$05
0647  $0B2D  20 8D 16    jsr PUTYORN
0648  $0B30              
0649  $0B30  20 F4 15    jsr getBlockNumber            ;BIT6
0650  $0B33  BD 00 3C    lda BCOL0,x
0651  $0B36  29 40       and #BIT_SPECIAL
0652  $0B38  AA          tax
0653  $0B39  A0 36       ldy #$36
0654  $0B3B  A9 05       lda #$05
0655  $0B3D  20 8D 16    jsr PUTYORN
0656  $0B40              
0657  $0B40  20 F4 15    jsr getBlockNumber            ;BIT7
0658  $0B43  BD 00 3C    lda BCOL0,x
0659  $0B46  29 80       and #BIT_KILL
0660  $0B48  AA          tax
0661  $0B49  A0 5E       ldy #$5E
0662  $0B4B  A9 05       lda #$05
0663  $0B4D  20 8D 16    jsr PUTYORN
0664  $0B50              
0665  $0B50  A9 00       CNO      lda #$00       ;CHARNO
0666  $0B52  38          sec
0667  $0B53  E9 14       sbc #$14
0668  $0B55  AA          tax
0669  $0B56  A0 00       ldy #$00
0670  $0B58  8A          CLOOP1   txa
0671  $0B59  99 80 06    sta $0680,y
0672  $0B5C  BD D0 DA    lda FD8PLC,x
0673  $0B5F  99 80 DA    sta $DA80,y
0674  $0B62  E8          inx
0675  $0B63  C8          iny
0676  $0B64  C0 28       cpy #$28
0677  $0B66  D0 F0       bne CLOOP1
0678  $0B68              
0679  $0B68  20 F4 15    jsr getBlockNumber    ;FIXBLOCKS
0680  $0B6B  BD 00 3C    lda BCOL0,x
0681  $0B6E  8D A2 44    sta TEMP
0682  $0B71  BD 00 3D    lda BCOL1,x
0683  $0B74  8D A5 44    sta TEMP1
0684  $0B77  BD 00 3E    lda BCOL2,x
0685  $0B7A  8D A6 44    sta TEMP2
0686  $0B7D  BD 00 3F    lda BCOL3,x
0687  $0B80  8D A7 44    sta TEMP3
0688  $0B83              
0689  $0B83  BC 00 38    ldy BDAT0,x
0690  $0B86  AD A2 44    lda TEMP
0691  $0B89  99 D0 DA    sta FD8PLC,y
0692  $0B8C  BC 00 39    ldy BDAT1,x
0693  $0B8F  AD A5 44    lda TEMP1
0694  $0B92  99 D0 DA    sta FD8PLC,y
0695  $0B95  BC 00 3A    ldy BDAT2,x
0696  $0B98  AD A6 44    lda TEMP2
0697  $0B9B  99 D0 DA    sta FD8PLC,y
0698  $0B9E  BC 00 3B    ldy BDAT3,x
0699  $0BA1  AD A7 44    lda TEMP3
0700  $0BA4  99 D0 DA    sta FD8PLC,y
0701  $0BA7              
0702  $0BA7  AE F7 15    ldx BLONO+1
0703  $0BAA  BC 90 05    ldy BPLC,x
0704  $0BAD  BD 90 D9    lda BD8PLC,x
0705  $0BB0  99 D0 DA    sta FD8PLC,y
0706  $0BB3              
0707  $0BB3  A9 01       lda #$01
0708  $0BB5  A0 02       ldy #$02
0709  $0BB7  AE 92 44    ldx RETURN
0710  $0BBA  F0 04       beq *+6
0711  $0BBC  A9 02       lda #$02
0712  $0BBE  A0 01       ldy #$01
0713  $0BC0  8C 29 D0    sty $d029
0714  $0BC3  8D 2A D0    sta $d02A
0715  $0BC6  60          rts
0716  $0BC7              
0717  $0BC7              ;-------------------------------------------------
0718  $0BC7              ;Keypress handler
0719  $0BC7              ;
0720  $0BC7              ;see: https://sta.c64.org/cbm64petkey.html
0721  $0BC7              
0722  $0BC7              KEYCHECK
0723  $0BC7  AD 91 44    lda keypress
0724  $0BCA  D0 01       bne *+3
0725  $0BCC  60          rts
0726  $0BCD              
0727  $0BCD  AE 92 44    ldx RETURN          ; if cursor in blockline, ignore CRSR keys
0728  $0BD0  D0 2C       bne K4
0729  $0BD2              
0730  $0BD2  C9 9D       cmp #$9D            ; CRSR L
0731  $0BD4  D0 04       bne K1
0732  $0BD6  CE 51 0B    dec CNO+1
0733  $0BD9  60          rts
0734  $0BDA  C9 1D       K1       cmp #$1D            ; CRSR R
0735  $0BDC  D0 04       bne K2
0736  $0BDE  EE 51 0B    inc CNO+1
0737  $0BE1  60          rts
0738  $0BE2  C9 11       K2       cmp #$11            ; CRSR D
0739  $0BE4  D0 0A       bne K3
0740  $0BE6  AD 51 0B    lda CNO+1
0741  $0BE9  18          clc
0742  $0BEA  69 28       adc #$28
0743  $0BEC  8D 51 0B    sta CNO+1
0744  $0BEF  60          rts
0745  $0BF0  C9 91       K3       cmp #$91            ; CRSR U
0746  $0BF2  D0 0A       bne K4
0747  $0BF4  AD 51 0B    lda CNO+1
0748  $0BF7  38          sec
0749  $0BF8  E9 28       sbc #$28
0750  $0BFA  8D 51 0B    sta CNO+1
0751  $0BFD  60          rts
0752  $0BFE              
0753  $0BFE  C9 21       K4       cmp #$21            ; S+1
0754  $0C00  D0 0C       bne K5
0755  $0C02  AD FD 2F    lda DD021
0756  $0C05  18          clc
0757  $0C06  69 01       adc #$01
0758  $0C08  29 0F       and #%00001111
0759  $0C0A  8D FD 2F    sta DD021
0760  $0C0D  60          rts
0761  $0C0E              
0762  $0C0E  C9 22       K5       cmp #$22            ; S+2
0763  $0C10  D0 0C       bne K6
0764  $0C12  AD FE 2F    lda DD022
0765  $0C15  18          clc
0766  $0C16  69 01       adc #$01
0767  $0C18  29 0F       and #%00001111
0768  $0C1A  8D FE 2F    sta DD022
0769  $0C1D  60          rts
0770  $0C1E              
0771  $0C1E  C9 23       K6       cmp #$23            ; S+3
0772  $0C20  D0 0C       bne K7
0773  $0C22  AD FF 2F    lda DD023
0774  $0C25  18          clc
0775  $0C26  69 01       adc #$01
0776  $0C28  29 0F       and #%00001111
0777  $0C2A  8D FF 2F    sta DD023
0778  $0C2D  60          rts
0779  $0C2E              
0780  $0C2E  C9 24       K7       cmp #$24            ; S+4
0781  $0C30  D0 26       bne K8
0782  $0C32  20 F4 15    jsr getBlockNumber
0783  $0C35  98          tya
0784  $0C36  18          clc
0785  $0C37  69 3C       adc #BCOL0/$0100
0786  $0C39  8D 44 0C    sta K7A+2
0787  $0C3C  8D 4F 0C    sta K7B+2
0788  $0C3F  8D 56 0C    sta K7D+2
0789  $0C42  BD 00 10    K7A      lda $1000,x
0790  $0C45  18          clc
0791  $0C46  69 01       adc #$01
0792  $0C48  29 0F       and #%00001111
0793  $0C4A  8D 53 0C    sta K7C+1
0794  $0C4D  BD 00 10    K7B      lda $1000,x
0795  $0C50  29 F0       and #%11110000
0796  $0C52  09 00       K7C      ora #$00
0797  $0C54  9D 00 10    K7D      sta $1000,x
0798  $0C57  60          rts
0799  $0C58              
0800  $0C58  C9 5A       K8       cmp #$5A            ; Z
0801  $0C5A  D0 09       bne K8B
0802  $0C5C  AD 17 12    lda ZLIDE
0803  $0C5F  49 01       eor #$01
0804  $0C61  8D 17 12    sta ZLIDE
0805  $0C64  60          rts
0806  $0C65              
0807  $0C65  C9 54       K8B      cmp #$54            ; T
0808  $0C67  D0 09       bne K9
0809  $0C69  AD 18 12    lda TRANS
0810  $0C6C  49 01       eor #$01
0811  $0C6E  8D 18 12    sta TRANS
0812  $0C71  60          rts
0813  $0C72              
0814  $0C72  C9 03       K9       cmp #$03            ; R/S
0815  $0C74  D0 14       bne K10
0816  $0C76  A0 1C       ldy #$1C
0817  $0C78  A2 00       CD018    ldx #$00
0818  $0C7A  D0 02       bne *+4
0819  $0C7C  A0 15       ldy #$15
0820  $0C7E  AD 79 0C    lda CD018+1
0821  $0C81  49 01       eor #$01
0822  $0C83  8D 79 0C    sta CD018+1
0823  $0C86  8C 04 09    sty DD018+1
0824  $0C89  60          rts
0825  $0C8A              
0826  $0C8A  C9 31       K10      cmp #$31            ; 1
0827  $0C8C  D0 06       bne K11
0828  $0C8E  A2 00       ldx #$00
0829  $0C90  8E CB 0A    stx COLOR+1
0830  $0C93  60          rts
0831  $0C94              
0832  $0C94  C9 32       K11      cmp #$32            ; 2
0833  $0C96  D0 06       bne K12
0834  $0C98  A2 01       ldx #$01
0835  $0C9A  8E CB 0A    stx COLOR+1
0836  $0C9D  60          rts
0837  $0C9E              
0838  $0C9E  C9 33       K12      cmp #$33            ; 3
0839  $0CA0  D0 06       bne K13
0840  $0CA2  A2 02       ldx #$02
0841  $0CA4  8E CB 0A    stx COLOR+1
0842  $0CA7  60          rts
0843  $0CA8              
0844  $0CA8  C9 34       K13      cmp #$34            ; 4
0845  $0CAA  D0 06       bne K14
0846  $0CAC  A2 03       ldx #$03
0847  $0CAE  8E CB 0A    stx COLOR+1
0848  $0CB1  60          rts
0849  $0CB2              
0850  $0CB2  C9 93       K14      cmp #$93            ; CLR
0851  $0CB4  D0 0F       bne K15
0852  $0CB6  20 D7 15    jsr getCharAddress_CNO
0853  $0CB9  A0 00       ldy #$00
0854  $0CBB  A9 00       K14B     lda #$00
0855  $0CBD  91 FD       sta ($FD),y
0856  $0CBF  C8          iny
0857  $0CC0  C0 08       cpy #$08
0858  $0CC2  D0 F7       bne K14B
0859  $0CC4  60          rts
0860  $0CC5              
0861  $0CC5  C9 43       K15      cmp #$43            ; C
0862  $0CC7  D0 10       bne K16
0863  $0CC9  20 D7 15    jsr getCharAddress_CNO
0864  $0CCC  A0 00       ldy #$00
0865  $0CCE  B1 FD       K15B     lda ($FD),y
0866  $0CD0  99 4E 45    sta COPYTEMP,y
0867  $0CD3  C8          iny
0868  $0CD4  C0 08       cpy #$08
0869  $0CD6  D0 F6       bne K15B
0870  $0CD8  60          rts
0871  $0CD9              
0872  $0CD9  C9 56       K16      cmp #$56            ; V
0873  $0CDB  D0 10       bne K17
0874  $0CDD  20 D7 15    jsr getCharAddress_CNO
0875  $0CE0  A0 00       ldy #$00
0876  $0CE2  B9 4E 45    K16B     lda COPYTEMP,y
0877  $0CE5  91 FD       sta ($FD),y
0878  $0CE7  C8          iny
0879  $0CE8  C0 08       cpy #$08
0880  $0CEA  D0 F6       bne K16B
0881  $0CEC  60          rts
0882  $0CED              
0883  $0CED  C9 2C       K17      cmp #$2C            ; ,
0884  $0CEF  D0 04       bne K18
0885  $0CF1  CE CA 44    dec BlockNum
0886  $0CF4  60          rts
0887  $0CF5              
0888  $0CF5  C9 2E       K18      cmp #$2E            ; .
0889  $0CF7  D0 04       bne K17a
0890  $0CF9  EE CA 44    inc BlockNum
0891  $0CFC  60          rts
0892  $0CFD              
0893  $0CFD  C9 5D       K17a     cmp #$5D            ; ] aka S+,
0894  $0CFF  D0 0A       bne K18a
0895  $0D01  AD CA 44    lda BlockNum
0896  $0D04  38          sec
0897  $0D05  E9 0A       sbc #10
0898  $0D07  8D CA 44    sta BlockNum
0899  $0D0A  60          rts
0900  $0D0B              
0901  $0D0B  C9 3A       K18a     cmp #$3A            ; : aka S+.
0902  $0D0D  D0 0A       bne K19
0903  $0D0F  AD CA 44    lda BlockNum
0904  $0D12  18          clc
0905  $0D13  69 0A       adc #10
0906  $0D15  8D CA 44    sta BlockNum
0907  $0D18  60          rts
0908  $0D19              
0909  $0D19  AE 92 44    K19      ldx RETURN
0910  $0D1C  F0 44       beq K23
0911  $0D1E  C9 9D       cmp #$9D            ; CRSR L
0912  $0D20  D0 0C       bne K20
0913  $0D22  AE F7 15    ldx BLONO+1
0914  $0D25  CA          dex
0915  $0D26  E0 FF       cpx #$FF
0916  $0D28  F0 03       beq K20-1
0917  $0D2A  8E F7 15    stx BLONO+1
0918  $0D2D  60          rts
0919  $0D2E  C9 1D       K20      cmp #$1D            ; CRSR R
0920  $0D30  D0 0C       bne K21
0921  $0D32  AE F7 15    ldx BLONO+1
0922  $0D35  E8          inx
0923  $0D36  E0 50       cpx #$50
0924  $0D38  F0 03       beq K21-1
0925  $0D3A  8E F7 15    stx BLONO+1
0926  $0D3D  60          rts
0927  $0D3E  C9 11       K21      cmp #$11            ; CRSR D
0928  $0D40  D0 0E       bne K22
0929  $0D42  AD F7 15    lda BLONO+1
0930  $0D45  18          clc
0931  $0D46  69 28       adc #$28
0932  $0D48  C9 50       cmp #$50
0933  $0D4A  B0 03       bcs K22-1
0934  $0D4C  8D F7 15    sta BLONO+1
0935  $0D4F  60          rts
0936  $0D50  C9 91       K22      cmp #$91            ; CRSR U
0937  $0D52  D0 0E       bne K23
0938  $0D54  AD F7 15    lda BLONO+1
0939  $0D57  38          sec
0940  $0D58  E9 28       sbc #$28
0941  $0D5A  C9 D8       cmp #$D8
0942  $0D5C  B0 03       bcs K23-1
0943  $0D5E  8D F7 15    sta BLONO+1
0944  $0D61  60          rts
0945  $0D62              
0946  $0D62  C9 20       K23      cmp #$20            ; SPACE
0947  $0D64  D0 2D       bne K24
0948  $0D66  20 F4 15    jsr getBlockNumber
0949  $0D69  98          tya
0950  $0D6A  18          clc
0951  $0D6B  69 38       adc #BDAT0/$0100
0952  $0D6D  8D 7F 0D    sta K23A+2
0953  $0D70  18          clc
0954  $0D71  69 04       adc #$04
0955  $0D73  8D 91 0D    sta K23B+2
0956  $0D76  8D 82 0D    sta K23C+2
0957  $0D79              
0958  $0D79  AC 51 0B    ldy CNO+1
0959  $0D7C  98          tya
0960  $0D7D  9D 00 10    K23A     sta $1000,x
0961  $0D80  BD 00 10    K23C     lda $1000,x
0962  $0D83  29 F0       and #%11110000
0963  $0D85  8D 8E 0D    sta K23B-1
0964  $0D88  B9 D0 DA    lda FD8PLC,y
0965  $0D8B  29 0F       and #%00001111
0966  $0D8D  09 00       ora #$00
0967  $0D8F  9D 00 10    K23B     sta $1000,x
0968  $0D92  60          rts
0969  $0D93              
0970  $0D93  C9 0D       K24      cmp #$0D            ; RETURN
0971  $0D95  D0 09       bne K25
0972  $0D97  AD 92 44    lda RETURN
0973  $0D9A  49 01       eor #$01
0974  $0D9C  8D 92 44    sta RETURN
0975  $0D9F  60          rts
0976  $0DA0              
0977  $0DA0  C9 C3       K25      cmp #$C3            ; S+C
0978  $0DA2  D0 04       bne K26
0979  $0DA4  20 B9 16    jsr block_copy
0980  $0DA7  60          rts
0981  $0DA8              
0982  $0DA8  C9 D6       K26      cmp #$D6            ; S+V
0983  $0DAA  D0 04       bne K27
0984  $0DAC  20 ED 16    jsr block_paste
0985  $0DAF  60          rts
0986  $0DB0              
0987  $0DB0  C9 46       K27      cmp #$46            ; F
0988  $0DB2  D0 09       bne K28
0989  $0DB4  AD 19 12    lda FINDER
0990  $0DB7  49 01       eor #$01
0991  $0DB9  8D 19 12    sta FINDER
0992  $0DBC  60          rts
0993  $0DBD              
0994  $0DBD  C9 94       K28      cmp #$94            ; INST
0995  $0DBF  D0 25       bne K29
0996  $0DC1  20 F4 15    jsr getBlockNumber
0997  $0DC4  AD 51 0B    lda CNO+1
0998  $0DC7  9D 00 38    sta BDAT0,x
0999  $0DCA  9D 00 39    sta BDAT1,x
1000  $0DCD  9D 00 3A    sta BDAT2,x
1001  $0DD0  9D 00 3B    sta BDAT3,x
1002  $0DD3  A8          tay
1003  $0DD4  B9 D0 DA    lda FD8PLC,y
1004  $0DD7  29 0F       and #%00001111
1005  $0DD9  9D 00 3C    sta BCOL0,x
1006  $0DDC  9D 00 3D    sta BCOL1,x
1007  $0DDF  9D 00 3E    sta BCOL2,x
1008  $0DE2  9D 00 3F    sta BCOL3,x
1009  $0DE5  60          rts
1010  $0DE6              
1011  $0DE6  C9 A7       K29      cmp #$A7            ; CBM+M - clear all font data
1012  $0DE8  D0 31       bne K30
1013  $0DEA  A2 00       ldx #$00
1014  $0DEC  A9 00       K29B     lda #$00
1015  $0DEE  9D 00 30    sta FDAT,x
1016  $0DF1  9D 00 31    sta FDAT+$0100,x
1017  $0DF4  9D 00 32    sta FDAT+$0200,x
1018  $0DF7  9D 00 33    sta FDAT+$0300,x
1019  $0DFA  9D 00 34    sta FDAT+$0400,x
1020  $0DFD  9D 00 35    sta FDAT+$0500,x
1021  $0E00  9D 00 36    sta FDAT+$0600,x
1022  $0E03  9D 00 37    sta FDAT+$0700,x
1023  $0E06  AD FD 2F    lda DD021
1024  $0E09  9D D0 DA    sta FD8PLC,x
1025  $0E0C  E8          inx
1026  $0E0D  D0 DD       bne K29B
1027  $0E0F  A2 00       ldx #$00
1028  $0E11  8E FD 2F    stx DD021
1029  $0E14  8E FE 2F    stx DD022
1030  $0E17  8E FF 2F    stx DD023
1031  $0E1A  60          rts
1032  $0E1B              
1033  $0E1B  C9 BF       K30      cmp #$BF            ; CBM+B - clear all blocks
1034  $0E1D  D0 20       bne K31
1035  $0E1F  A2 00       ldx #$00
1036  $0E21  A9 00       lda #$00
1037  $0E23  9D 00 38    K30B     sta BDAT0,x
1038  $0E26  9D 00 39    sta BDAT1,x
1039  $0E29  9D 00 3A    sta BDAT2,x
1040  $0E2C  9D 00 3B    sta BDAT3,x
1041  $0E2F  9D 00 3C    sta BCOL0,x
1042  $0E32  9D 00 3D    sta BCOL1,x
1043  $0E35  9D 00 3E    sta BCOL2,x
1044  $0E38  9D 00 3F    sta BCOL3,x
1045  $0E3B  E8          inx
1046  $0E3C  D0 E5       bne K30B
1047  $0E3E  60          rts
1048  $0E3F              
1049  $0E3F  C9 13       K31      cmp #$13            ; HOME
1050  $0E41  D0 06       bne K32
1051  $0E43  A2 00       ldx #$00
1052  $0E45  8E 51 0B    stx CNO+1
1053  $0E48  60          rts
1054  $0E49              
1055  $0E49  C9 14       K32      cmp #$14            ; DEL
1056  $0E4B  D0 09       bne K33
1057  $0E4D  A2 00       ldx #$00
1058  $0E4F  8E CA 44    stx BlockNum
1059  $0E52  8E F7 15    stx BLONO+1
1060  $0E55  60          rts
1061  $0E56              
1062  $0E56  C9 85       K33      cmp #$85            ; F1
1063  $0E58  D0 0C       bne K36
1064  $0E5A  20 F4 15    jsr getBlockNumber
1065  $0E5D  BD 00 3C    lda BCOL0,x
1066  $0E60  49 10       eor #%00010000
1067  $0E62  9D 00 3C    sta BCOL0,x
1068  $0E65  60          rts
1069  $0E66              
1070  $0E66  C9 86       K36      cmp #$86            ; F3
1071  $0E68  D0 0C       bne K37
1072  $0E6A  20 F4 15    jsr getBlockNumber
1073  $0E6D  BD 00 3C    lda BCOL0,x
1074  $0E70  49 20       eor #%00100000
1075  $0E72  9D 00 3C    sta BCOL0,x
1076  $0E75  60          rts
1077  $0E76  C9 87       K37      cmp #$87            ; F5
1078  $0E78  D0 0C       bne K38
1079  $0E7A  20 F4 15    jsr getBlockNumber
1080  $0E7D  BD 00 3C    lda BCOL0,x
1081  $0E80  49 40       eor #%01000000
1082  $0E82  9D 00 3C    sta BCOL0,x
1083  $0E85  60          rts
1084  $0E86              
1085  $0E86  C9 88       K38      cmp #$88            ; F7
1086  $0E88  D0 0C       bne K39
1087  $0E8A  20 F4 15    jsr getBlockNumber
1088  $0E8D  BD 00 3C    lda BCOL0,x
1089  $0E90  49 80       eor #%10000000
1090  $0E92  9D 00 3C    sta BCOL0,x
1091  $0E95  60          rts
1092  $0E96  C9 58       K39      cmp #$58            ; X
1093  $0E98  F0 03       beq *+5
1094  $0E9A  4C 26 0F    jmp K40              ;Need to jmp as bne cannot reach
1095  $0E9D  20 D7 15    jsr getCharAddress_CNO
1096  $0EA0  A2 00       ldx #$00
1097  $0EA2  8E A2 44    stx TEMP
1098  $0EA5  AE 51 0B    ldx CNO+1
1099  $0EA8  BD D0 DA    lda FD8PLC,x        ;ONKO HIRES
1100  $0EAB  29 08       and #%00001000
1101  $0EAD  F0 4E       beq K39HIRES
1102  $0EAF              
1103  $0EAF  A0 00       ldy #$00             ;K39MULTI
1104  $0EB1  A2 00       K39M5    ldx #$00
1105  $0EB3  8E B7 0E    stx K39M4+1
1106  $0EB6  A2 00       K39M4    ldx #$00
1107  $0EB8  BD D0 11    lda MAND+4,x
1108  $0EBB  49 FF       eor #$FF
1109  $0EBD  8D C3 0E    sta K39M6+1
1110  $0EC0  B1 FD       lda ($FD),y
1111  $0EC2  29 00       K39M6    and #$00
1112  $0EC4  E0 00       K39M1    cpx #$00
1113  $0EC6  F0 06       beq K39M2
1114  $0EC8  4A          lsr
1115  $0EC9  4A          lsr
1116  $0ECA  CA          dex
1117  $0ECB  4C C4 0E    jmp K39M1
1118  $0ECE              
1119  $0ECE  0A          K39M2    asl
1120  $0ECF  0A          asl
1121  $0ED0  8D D8 0E    sta K39M3+1
1122  $0ED3  AD B7 0E    lda K39M4+1
1123  $0ED6  18          clc
1124  $0ED7  69 00       K39M3    adc #$00
1125  $0ED9  AA          tax
1126  $0EDA  AD A2 44    lda TEMP
1127  $0EDD  1D D4 11    ora MPLOTME,x
1128  $0EE0  8D A2 44    sta TEMP
1129  $0EE3  EE B7 0E    inc K39M4+1
1130  $0EE6  AE B7 0E    ldx K39M4+1
1131  $0EE9  E0 04       cpx #$04
1132  $0EEB  D0 C9       bne K39M4
1133  $0EED  AD A2 44    lda TEMP
1134  $0EF0  91 FD       sta ($FD),y
1135  $0EF2  A9 00       lda #$00
1136  $0EF4  8D A2 44    sta TEMP
1137  $0EF7  C8          iny
1138  $0EF8  C0 08       cpy #$08
1139  $0EFA  D0 B5       bne K39M5
1140  $0EFC  60          rts
1141  $0EFD              
1142  $0EFD  A0 00       K39HIRES ldy #$00
1143  $0EFF  A2 00       ldx #$00
1144  $0F01  B1 FD       K39H2    lda ($FD),y
1145  $0F03  3D 1A 12    and HPLOTME,x
1146  $0F06  F0 09       beq K39H1
1147  $0F08  AD A2 44    lda TEMP
1148  $0F0B  1D 22 12    ora HPLOTME+8,x
1149  $0F0E  8D A2 44    sta TEMP
1150  $0F11  E8          K39H1    inx
1151  $0F12  E0 08       cpx #$08
1152  $0F14  D0 EB       bne K39H2
1153  $0F16  AD A2 44    lda TEMP
1154  $0F19  91 FD       sta ($FD),y
1155  $0F1B  A9 00       lda #$00
1156  $0F1D  8D A2 44    sta TEMP
1157  $0F20  C8          iny
1158  $0F21  C0 08       cpy #$08
1159  $0F23  D0 DA       bne K39H2-2
1160  $0F25  60          rts
1161  $0F26              
1162  $0F26  C9 59       K40      cmp #$59            ; Y
1163  $0F28  D0 1E       bne K41
1164  $0F2A  20 D7 15    jsr getCharAddress_CNO
1165  $0F2D  A0 00       ldy #$00
1166  $0F2F  B1 FD       K40B     lda ($FD),y
1167  $0F31  99 4E 45    sta COPYTEMP,y
1168  $0F34  C8          iny
1169  $0F35  C0 08       cpy #$08
1170  $0F37  D0 F6       bne K40B
1171  $0F39  88          dey
1172  $0F3A  A2 00       ldx #$00
1173  $0F3C  BD 4E 45    K40C     lda COPYTEMP,x
1174  $0F3F  91 FD       sta ($FD),y
1175  $0F41  88          dey
1176  $0F42  E8          inx
1177  $0F43  E0 08       cpx #$08
1178  $0F45  D0 F5       bne K40C
1179  $0F47  60          rts
1180  $0F48              
1181  $0F48  C9 5E       K41      cmp #$5E            ; ^
1182  $0F4A  D0 1B       bne K42
1183  $0F4C  20 D7 15    jsr getCharAddress_CNO
1184  $0F4F  A0 00       ldy #$00
1185  $0F51  B1 FD       lda ($FD),y
1186  $0F53  8D A2 44    sta TEMP
1187  $0F56  C8          K41B     iny
1188  $0F57  B1 FD       lda ($FD),y
1189  $0F59  88          dey
1190  $0F5A  91 FD       sta ($FD),y
1191  $0F5C  C8          iny
1192  $0F5D  C0 07       cpy #$07
1193  $0F5F  D0 F5       bne K41B
1194  $0F61  AD A2 44    lda TEMP
1195  $0F64  91 FD       sta ($FD),y
1196  $0F66  60          rts
1197  $0F67  C9 49       K42      cmp #$49            ; I
1198  $0F69  D0 11       bne K43
1199  $0F6B  20 D7 15    jsr getCharAddress_CNO
1200  $0F6E  A0 00       ldy #$00
1201  $0F70  B1 FD       K42B     lda ($FD),y
1202  $0F72  49 FF       eor #$FF
1203  $0F74  91 FD       sta ($FD),y
1204  $0F76  C8          iny
1205  $0F77  C0 08       cpy #$08
1206  $0F79  D0 F5       bne K42B
1207  $0F7B  60          rts
1208  $0F7C  C9 4D       K43      cmp #$4D            ; M
1209  $0F7E  D0 13       bne K44
1210  $0F80              ;ldx MAP+$01CC
1211  $0F80  AE F0 48    ldx MAPCOLOR_D021
1212  $0F83  8E FD 2F    stx DD021
1213  $0F86              ;ldx MAP+$01CD
1214  $0F86  AE F1 48    ldx MAPCOLOR_D022
1215  $0F89  8E FE 2F    stx DD022
1216  $0F8C              ;ldx MAP+$01CE
1217  $0F8C  AE F2 48    ldx MAPCOLOR_D023
1218  $0F8F  8E FF 2F    stx DD023
1219  $0F92  60          rts
1220  $0F93  C9 A2       K44      cmp #$A2            ; C+I
1221  $0F95  D0 5F       bne K45
1222  $0F97  20 F4 15    jsr getBlockNumber
1223  $0F9A  E0 FF       cpx #$FF
1224  $0F9C  F0 57       beq K45-1
1225  $0F9E  8E D5 0F    stx K44C+1
1226  $0FA1  A2 FF       ldx #$FF
1227  $0FA3  CA          K44B     dex
1228  $0FA4  BD 00 38    lda BDAT0,x
1229  $0FA7  9D 01 38    sta BDAT0+1,x
1230  $0FAA  BD 00 39    lda BDAT1,x
1231  $0FAD  9D 01 39    sta BDAT1+1,x
1232  $0FB0  BD 00 3A    lda BDAT2,x
1233  $0FB3  9D 01 3A    sta BDAT2+1,x
1234  $0FB6  BD 00 3B    lda BDAT3,x
1235  $0FB9  9D 01 3B    sta BDAT3+1,x
1236  $0FBC  BD 00 3C    lda BCOL0,x
1237  $0FBF  9D 01 3C    sta BCOL0+1,x
1238  $0FC2  BD 00 3D    lda BCOL1,x
1239  $0FC5  9D 01 3D    sta BCOL1+1,x
1240  $0FC8  BD 00 3E    lda BCOL2,x
1241  $0FCB  9D 01 3E    sta BCOL2+1,x
1242  $0FCE  BD 00 3F    lda BCOL3,x
1243  $0FD1  9D 01 3F    sta BCOL3+1,x
1244  $0FD4  E0 00       K44C     cpx #$00
1245  $0FD6  D0 CB       bne K44B
1246  $0FD8              
1247  $0FD8  A2 00       ldx #$00
1248  $0FDA  BD 00 48    K44D     lda MAP,x
1249  $0FDD  CD D5 0F    cmp K44C+1
1250  $0FE0  90 03       bcc *+5
1251  $0FE2  FE 00 48    inc MAP,x
1252  $0FE5  BD C8 48    lda MAP+$C8,x
1253  $0FE8  CD D5 0F    cmp K44C+1
1254  $0FEB  90 03       bcc *+5
1255  $0FED  FE C8 48    inc MAP+$C8,x
1256  $0FF0  E8          inx
1257  $0FF1  E0 C8       cpx #$C8
1258  $0FF3  D0 E5       bne K44D
1259  $0FF5  60          rts
1260  $0FF6  C9 AC       K45      cmp #$AC            ; C+D
1261  $0FF8  D0 5C       bne K46
1262  $0FFA  20 F4 15    jsr getBlockNumber
1263  $0FFD  E0 FF       cpx #$FF
1264  $0FFF  F0 54       beq K46-1
1265  $1001  8E 3F 10    stx K45C+1
1266  $1004  BD 01 38    K45B     lda BDAT0+1,x
1267  $1007  9D 00 38    sta BDAT0,x
1268  $100A  BD 01 39    lda BDAT1+1,x
1269  $100D  9D 00 39    sta BDAT1,x
1270  $1010  BD 01 3A    lda BDAT2+1,x
1271  $1013  9D 00 3A    sta BDAT2,x
1272  $1016  BD 01 3B    lda BDAT3+1,x
1273  $1019  9D 00 3B    sta BDAT3,x
1274  $101C  BD 01 3C    lda BCOL0+1,x
1275  $101F  9D 00 3C    sta BCOL0,x
1276  $1022  BD 01 3D    lda BCOL1+1,x
1277  $1025  9D 00 3D    sta BCOL1,x
1278  $1028  BD 01 3E    lda BCOL2+1,x
1279  $102B  9D 00 3E    sta BCOL2,x
1280  $102E  BD 01 3F    lda BCOL3+1,x
1281  $1031  9D 00 3F    sta BCOL3,x
1282  $1034  E8          inx
1283  $1035  E0 FF       cpx #$FF
1284  $1037  D0 CB       bne K45B
1285  $1039              
1286  $1039  A2 00       ldx #$00
1287  $103B  BD 00 48    K45D     lda MAP,x
1288  $103E  C9 00       K45C     cmp #$00
1289  $1040  90 03       bcc *+5
1290  $1042  DE 00 48    dec MAP,x
1291  $1045  BD C8 48    lda MAP+$C8,x
1292  $1048  CD 3F 10    cmp K45C+1
1293  $104B  90 03       bcc *+5
1294  $104D  DE C8 48    dec MAP+$C8,x
1295  $1050  E8          inx
1296  $1051  E0 C8       cpx #$C8
1297  $1053  D0 E6       bne K45D
1298  $1055  60          rts
1299  $1056              
1300  $1056  C9 48       K46      cmp #"H"            ; H
1301  $1058  D0 09       bne K47
1302  $105A  20 0F 44    jsr Inithelp
1303  $105D  A9 02       lda #S_IRQ_HELP_EDITOR
1304  $105F  8D 49 08    sta s_irq
1305  $1062  60          rts
1306  $1063              
1307  $1063  C9 26       K47      cmp #$26            ; & -> Show DIR
1308  $1065  D0 03       bne K48
1309  $1067  4C CA 22    jmp FileDirectory_Show ;NOTE: This never returns and jumps to editor init
1310  $106A              
1311  $106A  C9 5F       K48      cmp #$5F            ; _
1312  $106C  D0 09       bne K49
1313  $106E  20 00 44    jsr Initmapedit
1314  $1071  A9 03       lda #S_IRQ_MAPEDIT
1315  $1073  8D 49 08    sta s_irq
1316  $1076  60          rts
1317  $1077              
1318  $1077  C9 CC       K49      cmp #$CC            ; S+L
1319  $1079  D0 08       bne K50
1320  $107B  20 67 09    jsr NOIRQ
1321  $107E  A2 00       ldx #LOADSAVE_BLED_LOAD
1322  $1080  4C 02 1F    jmp GETNAME
1323  $1083              
1324  $1083  C9 D3       K50      cmp #$D3            ; S+S
1325  $1085  D0 08       bne K51
1326  $1087  20 67 09    jsr NOIRQ
1327  $108A  A2 01       ldx #LOADSAVE_BLED_SAVE
1328  $108C  4C 02 1F    jmp GETNAME
1329  $108F              
1330  $108F  C9 BC       K51      cmp #$BC            ; C+C
1331  $1091  D0 04       bne K52
1332  $1093  20 21 17    jsr fullBlock_copy
1333  $1096  60          rts
1334  $1097              
1335  $1097  C9 BE       K52      cmp #$BE            ; C+V
1336  $1099  D0 04       bne K53
1337  $109B  20 78 17    jsr fullBlock_paste
1338  $109E  60          rts
1339  $109F              K53
1340  $109F  60          rts
1341  $10A0              
1342  $10A0              ;---CHECK JOYSTICK---
1343  $10A0              
1344  $10A0  A2 00       JOYCHECK ldx #$00
1345  $10A2  F0 05       beq J1
1346  $10A4  CA          dex
1347  $10A5  8E A1 10    stx JOYCHECK+1
1348  $10A8  60          rts
1349  $10A9  A2 03       J1       ldx #$03
1350  $10AB  8E A1 10    stx JOYCHECK+1
1351  $10AE  AE 51 0B    ldx CNO+1
1352  $10B1  BD D0 DA    lda FD8PLC,x      ;TARKISTETAAN
1353  $10B4  29 08       and #%00001000    ;MULTI/HIRES
1354  $10B6  8D A2 44    sta TEMP
1355  $10B9  AD 00 DC    lda $DC00
1356  $10BC  29 1F       and #%00011111
1357  $10BE  49 1F       eor #%00011111
1358  $10C0  D0 01       bne *+3
1359  $10C2  60          rts
1360  $10C3  AE 51 0B    ldx CNO+1
1361  $10C6  BD D0 DA    lda FD8PLC,x
1362  $10C9  9D D0 DA    sta $DAD0,x
1363  $10CC  AD 00 DC    lda $DC00
1364  $10CF  4A          lsr
1365  $10D0  B0 26       bcs DOWN
1366  $10D2  AE A2 09    UP       ldx SPR1Y+1
1367  $10D5  CA          dex
1368  $10D6  E0 FF       cpx #$FF
1369  $10D8  F0 06       beq UP1
1370  $10DA  8E A2 09    stx SPR1Y+1
1371  $10DD  4C 7B 11    jmp FIRE
1372  $10E0  A2 00       UP1      ldx #$00
1373  $10E2  AC 17 12    ldy ZLIDE
1374  $10E5  F0 0B       beq UP2
1375  $10E7  AD 51 0B    lda CNO+1
1376  $10EA  38          sec
1377  $10EB  E9 28       sbc #$28
1378  $10ED  8D 51 0B    sta CNO+1
1379  $10F0  A2 07       ldx #$07
1380  $10F2  8E A2 09    UP2      stx SPR1Y+1
1381  $10F5  4C 7B 11    jmp FIRE
1382  $10F8  4A          DOWN     lsr
1383  $10F9  B0 26       bcs LEFT
1384  $10FB  AE A2 09    ldx SPR1Y+1
1385  $10FE  E8          inx
1386  $10FF  E0 08       cpx #$08
1387  $1101  F0 06       beq DOWN1
1388  $1103  8E A2 09    stx SPR1Y+1
1389  $1106  4C 7B 11    jmp FIRE
1390  $1109  A2 07       DOWN1    ldx #$07
1391  $110B  AC 17 12    ldy ZLIDE
1392  $110E  F0 0B       beq DOWN2
1393  $1110  AD 51 0B    lda CNO+1
1394  $1113  18          clc
1395  $1114  69 28       adc #$28
1396  $1116  8D 51 0B    sta CNO+1
1397  $1119  A2 00       ldx #$00
1398  $111B  8E A2 09    DOWN2    stx SPR1Y+1
1399  $111E  4C 7B 11    jmp FIRE
1400  $1121  4A          LEFT     lsr
1401  $1122  B0 2A       bcs RIGHT
1402  $1124  AE A0 09    ldx SPR1X+1
1403  $1127  CA          dex
1404  $1128  AC A2 44    ldy TEMP
1405  $112B  F0 01       beq *+3
1406  $112D  CA          dex
1407  $112E  E0 FF       cpx #$FF
1408  $1130  F0 0A       beq LEFT1
1409  $1132  E0 FE       cpx #$FE
1410  $1134  F0 06       beq LEFT1
1411  $1136  8E A0 09    stx SPR1X+1
1412  $1139  4C 7B 11    jmp FIRE
1413  $113C  A2 00       LEFT1    ldx #$00
1414  $113E  AC 17 12    ldy ZLIDE
1415  $1141  F0 05       beq LEFT2
1416  $1143  CE 51 0B    dec CNO+1
1417  $1146  A2 07       ldx #$07
1418  $1148  8E A0 09    LEFT2    stx SPR1X+1
1419  $114B  4C 7B 11    jmp FIRE
1420  $114E  4A          RIGHT    lsr
1421  $114F  B0 2A       bcs FIRE
1422  $1151  AE A0 09    ldx SPR1X+1
1423  $1154  E8          inx
1424  $1155  AC A2 44    ldy TEMP
1425  $1158  F0 01       beq *+3
1426  $115A  E8          inx
1427  $115B  E0 08       cpx #$08
1428  $115D  F0 0A       beq RIGHT1
1429  $115F  E0 09       cpx #$09
1430  $1161  F0 06       beq RIGHT1
1431  $1163  8E A0 09    stx SPR1X+1
1432  $1166  4C 7B 11    jmp FIRE
1433  $1169  A2 07       RIGHT1   ldx #$07
1434  $116B  AC 17 12    ldy ZLIDE
1435  $116E  F0 05       beq RIGHT2
1436  $1170  EE 51 0B    inc CNO+1
1437  $1173  A2 00       ldx #$00
1438  $1175  8E A0 09    RIGHT2   stx SPR1X+1
1439  $1178  4C 7B 11    jmp FIRE
1440  $117B              
1441  $117B  AD 00 DC    FIRE     lda $DC00
1442  $117E  4A          lsr
1443  $117F  4A          lsr
1444  $1180  4A          lsr
1445  $1181  4A          lsr
1446  $1182  4A          lsr
1447  $1183  90 01       bcc PLOT
1448  $1185  60          rts
1449  $1186  20 D7 15    PLOT     jsr getCharAddress_CNO
1450  $1189  AE A2 44    ldx TEMP
1451  $118C  F0 56       beq HIRESPLO
1452  $118E              
1453  $118E              ;Plot multicolor
1454  $118E  AD CB 0A    lda COLOR+1  ;MULTIPLO
1455  $1191  AE 18 12    ldx TRANS
1456  $1194  F0 07       beq M1
1457  $1196  AE CB 11    ldx MTEMP
1458  $1199  F0 02       beq M1
1459  $119B  A9 00       lda #$00
1460  $119D  8D BA 11    M1       sta MUCOL+1
1461  $11A0  AD CB 11    lda MTEMP
1462  $11A3  49 01       eor #$01
1463  $11A5  8D CB 11    sta MTEMP
1464  $11A8  AD A0 09    lda SPR1X+1
1465  $11AB  4A          lsr
1466  $11AC  8D BF 11    sta MLISA+1
1467  $11AF  AA          tax
1468  $11B0  AC A2 09    ldy SPR1Y+1
1469  $11B3  B1 FD       lda ($FD),y
1470  $11B5  3D CC 11    and MAND,x
1471  $11B8  A8          tay
1472  $11B9  A9 00       MUCOL    lda #$00
1473  $11BB  0A          asl
1474  $11BC  0A          asl
1475  $11BD  18          clc
1476  $11BE  69 00       MLISA    adc #$00
1477  $11C0  AA          tax
1478  $11C1  98          tya
1479  $11C2  1D D4 11    ora MPLOTME,x
1480  $11C5  AC A2 09    ldy SPR1Y+1
1481  $11C8  91 FD       sta ($FD),y
1482  $11CA  60          rts
1483  $11CB              
1484  $11CB  00          MTEMP    !byte 0
1485  $11CC  3F CF F3 FC  MAND     !byte $3F,$CF,$F3,$FC
1486  $11D0  FC F3 CF 3F  !byte $FC,$F3,$CF,$3F
1487  $11D4  00 00 00 00  MPLOTME  !byte $00,$00,$00,$00
1488  $11D8  40 10 04 01  !byte $40,$10,$04,$01
1489  $11DC  80 20 08 02  !byte $80,$20,$08,$02
1490  $11E0  C0 30 0C 03  !byte $C0,$30,$0C,$03
1491  $11E4              
1492  $11E4              ;Plot hires
1493  $11E4  AC A2 09    HIRESPLO ldy SPR1Y+1
1494  $11E7  B1 FD       lda ($FD),y
1495  $11E9  AE 18 12    ldx TRANS
1496  $11EC  F0 09       beq H1
1497  $11EE  AE A0 09    ldx SPR1X+1
1498  $11F1  5D 1A 12    eor HPLOTME,x
1499  $11F4  4C 14 12    jmp HPLO
1500  $11F7  AE CB 0A    H1       ldx COLOR+1
1501  $11FA  F0 09       beq H2
1502  $11FC  AE A0 09    ldx SPR1X+1
1503  $11FF  1D 1A 12    ora HPLOTME,x
1504  $1202  4C 14 12    jmp HPLO
1505  $1205  AE A0 09    H2       ldx SPR1X+1
1506  $1208  BD 1A 12    lda HPLOTME,x
1507  $120B  49 FF       eor #$FF
1508  $120D  8D 13 12    sta HAND+1
1509  $1210  B1 FD       lda ($FD),y
1510  $1212  29 00       HAND     and #$00
1511  $1214  91 FD       HPLO     sta ($FD),y
1512  $1216  60          rts
1513  $1217              
1514  $1217  00          ZLIDE    !byte 0
1515  $1218  00          TRANS    !byte 0
1516  $1219  00          FINDER   !byte 0
1517  $121A  80 40 20 10  HPLOTME  !byte $80,$40,$20,$10
1518  $121E  08 04 02 01  !byte $08,$04,$02,$01
1519  $1222  01 02 04 08  !byte $01,$02,$04,$08
1520  $1226  10 20 40 80  !byte $10,$20,$40,$80
1521  $122A              
1522  $122A              ;-----------------------------------
1523  $122A              ;CODE_1 - $0800 - $23ff
1524  $122A              ;CODE_2 - $4400 - $47ff
1525  $122A              
1526  $122A              
1527  $122A              ;---------------------------------------
1528  $122A              ;MAPEDITOR
1529  $122A              
1530  $122A              ;---------------------------------------
1531  $122A              ;MAPEDITOR IRQ
1532  $122A              
1533  $122A              MAPIRQ   ;set the details screen
1534  $122A  AD 93 44    lda MRETURN
1535  $122D  D0 3C       bne _mi01
1536  $122F              
1537  $122F              
1538  $122F              !ifdef DEBUG {
1539  $122F  48          pha
1540  $1230  A9 02       lda #2
1541  $1232  8D 20 D0    sta $d020
1542  $1235  68          pla
1543  $1236              }
1544  $1236  20 EE 12    jsr drawMapeditInfo
1545  $1239              
1546  $1239              !ifdef DEBUG {
1547  $1239  48          pha
1548  $123A  A9 00       lda #0
1549  $123C  8D 20 D0    sta $d020
1550  $123F  68          pla
1551  $1240              }
1552  $1240              
1553  $1240  A9 E2       lda #$e2
1554  $1242  CD 12 D0    cmp $d012
1555  $1245  D0 FB       bne *-3
1556  $1247              
1557  $1247              ;fixing timings
1558  $1247  A2 07       ldx #$07
1559  $1249  CA          dex
1560  $124A  D0 FD       bne *-1
1561  $124C  EA          nop
1562  $124D  EA          nop
1563  $124E              
1564  $124E  A2 08       ldx #$08
1565  $1250  8E 16 D0    stx $d016
1566  $1253  A2 15       ldx #INFO_MAPEDIT_D018
1567  $1255  8E 18 D0    stx $d018
1568  $1258  A2 00       ldx #$00
1569  $125A  8E 21 D0    stx $d021
1570  $125D              
1571  $125D  A9 EA       lda #$ea
1572  $125F  CD 12 D0    cmp $d012
1573  $1262  D0 FB       bne *-3
1574  $1264              
1575  $1264              ;fixing timings
1576  $1264  A2 07       ldx #$07
1577  $1266  CA          dex
1578  $1267  D0 FD       bne *-1
1579  $1269  EA          nop
1580  $126A  EA          nop
1581  $126B              
1582  $126B              _mi01
1583  $126B  A2 D8       ldx #$D8
1584  $126D  8E 16 D0    stx $d016
1585  $1270  A2 1C       ldx #$1C
1586  $1272  8E 18 D0    stx $d018
1587  $1275  AE F0 48    ldx MAPCOLOR_D021
1588  $1278  8E 21 D0    stx $d021
1589  $127B  AE F1 48    ldx MAPCOLOR_D022
1590  $127E  8E 22 D0    stx $d022
1591  $1281  AE F2 48    ldx MAPCOLOR_D023
1592  $1284  8E 23 D0    stx $d023
1593  $1287              
1594  $1287  A2 03       ldx #%00000011
1595  $1289  8E 15 D0    stx $d015
1596  $128C  A2 01       ldx #$01
1597  $128E  8E 27 D0    stx $d027 ;SPR
1598  $1291  8E 28 D0    stx $d028 ;SPR
1599  $1294  A2 B8       ldx #(SPRITE-$80)/$40
1600  $1296  8E F8 07    stx $07F8
1601  $1299  8E F9 07    stx $07F9
1602  $129C  A2 A8       ldx #$A8
1603  $129E  8E 02 D0    stx $d002
1604  $12A1  A2 EA       ldx #$EA
1605  $12A3  8E 03 D0    stx $d003
1606  $12A6              
1607  $12A6  AE A3 44    ldx MAPX
1608  $12A9  AC A4 44    ldy MAPY
1609  $12AC  8A          txa
1610  $12AD  0A          asl
1611  $12AE  AA          tax
1612  $12AF  BD 0D 45    lda SPRX,x
1613  $12B2  38          sec
1614  $12B3  E9 08       sbc #$08
1615  $12B5  8D 00 D0    sta $d000
1616  $12B8  A9 00       lda #$00
1617  $12BA  E0 1D       cpx #$1D
1618  $12BC  90 02       bcc *+4
1619  $12BE  A9 01       lda #%00000001
1620  $12C0  8D 10 D0    sta $d010
1621  $12C3              
1622  $12C3  98          tya
1623  $12C4  0A          asl
1624  $12C5  A8          tay
1625  $12C6  B9 F3 44    lda SPRY,y
1626  $12C9  38          sec
1627  $12CA  E9 06       sbc #$06
1628  $12CC  8D 01 D0    sta $d001
1629  $12CF              
1630  $12CF              ;         lda #BLOCKLINE_MAPEDIT
1631  $12CF              ;         jsr drawBlockLine
1632  $12CF              
1633  $12CF              
1634  $12CF              !ifdef DEBUG {
1635  $12CF  48          pha
1636  $12D0  A9 07       lda #7
1637  $12D2  8D 20 D0    sta $d020
1638  $12D5  68          pla
1639  $12D6              }
1640  $12D6  20 A4 13    jsr MAPKEYS
1641  $12D9              
1642  $12D9              !ifdef DEBUG {
1643  $12D9  48          pha
1644  $12DA  A9 00       lda #0
1645  $12DC  8D 20 D0    sta $d020
1646  $12DF  68          pla
1647  $12E0              }
1648  $12E0              
1649  $12E0  AD 94 44    lda UpdateMapscreen
1650  $12E3  F0 08       beq _mi00
1651  $12E5  20 79 13    jsr mapscreenUpdate
1652  $12E8  A9 00       lda #$00
1653  $12EA  8D 94 44    sta UpdateMapscreen
1654  $12ED              _mi00
1655  $12ED  60          rts
1656  $12EE              
1657  $12EE              
1658  $12EE              ;---------------------------------------
1659  $12EE              ;drawMapeditInfo
1660  $12EE              
1661  $12EE              drawMapeditInfo
1662  $12EE  A2 00       ldx #$00
1663  $12F0  BD 51 13    _dmi00   lda TextMapeditInfo,x
1664  $12F3  9D 70 07    sta IPLC,x
1665  $12F6  A9 0B       lda #$0b
1666  $12F8  9D 70 DB    sta ID8PLC,x
1667  $12FB  E8          inx
1668  $12FC  E0 28       cpx #40
1669  $12FE  D0 F0       bne _dmi00
1670  $1300              
1671  $1300  AD C9 44    lda LevelNum
1672  $1303  A2 04       ldx #04
1673  $1305  A0 00       ldy #PRINTDECIMAL
1674  $1307  20 45 16    jsr printNumber
1675  $130A              
1676  $130A  AD F0 48    lda MAPCOLOR_D021
1677  $130D  A2 0D       ldx #13
1678  $130F  A0 01       ldy #PRINTHEX
1679  $1311  20 45 16    jsr printNumber
1680  $1314  AD F1 48    lda MAPCOLOR_D022
1681  $1317  A2 16       ldx #13+9
1682  $1319  A0 01       ldy #PRINTHEX
1683  $131B  20 45 16    jsr printNumber
1684  $131E  AD F2 48    lda MAPCOLOR_D023
1685  $1321  A2 1F       ldx #13+18
1686  $1323  A0 01       ldy #PRINTHEX
1687  $1325  20 45 16    jsr printNumber
1688  $1328              
1689  $1328  AD CA 44    lda BlockNum
1690  $132B  18          clc
1691  $132C  69 09       adc #9
1692  $132E  AA          tax
1693  $132F  BD 00 3C    lda BCOL0,x
1694  $1332  29 10       and #BIT_THROUGH
1695  $1334  AA          tax
1696  $1335  A0 94       ldy #<($0400+22*40+36)
1697  $1337  A9 07       lda #>($0400+22*40+36)
1698  $1339  20 8D 16    jsr PUTYORN
1699  $133C              
1700  $133C  AD CA 44    lda BlockNum
1701  $133F  18          clc
1702  $1340  69 09       adc #9
1703  $1342  AA          tax
1704  $1343  BD 00 3C    lda BCOL0,x
1705  $1346  29 20       and #BIT_EXPLODE
1706  $1348  AA          tax
1707  $1349  A0 97       ldy #<($0400+22*40+39)
1708  $134B  A9 07       lda #>($0400+22*40+39)
1709  $134D  20 8D 16    jsr PUTYORN
1710  $1350              
1711  $1350  60          rts
1712  $1351              ;0123456789012345678901234567890123456789
1713  $1351  0C 16 0C 3A 23 23 2D 04 30 32 31 3A 24 23 23 20 04 30 32 32 3A 24 23 23 20 04 30 32 33 3A 24 23 23 20 20 14 59 20 18 59  TextMapeditInfo !scr "lvl:##-d021:$## d022:$## d023:$##  tY xY"
1714  $1379              
1715  $1379              ;---------------------------------------
1716  $1379              ;mapscreenUpdate
1717  $1379              
1718  $1379              mapscreenUpdate
1719  $1379  AD 93 44    lda MRETURN
1720  $137C  D0 14       bne _fs01
1721  $137E  A9 01       lda #BLOCKLINE_MAPEDIT
1722  $1380  20 0D 19    jsr drawBlockLine
1723  $1383  A2 00       ldx #$00
1724  $1385  A9 00       lda #$00
1725  $1387  9D 70 07    _fs02     sta $0400+(22*40),x
1726  $138A  9D 70 DB    sta $d800+(22*40),x
1727  $138D  E8          inx
1728  $138E  E0 28       cpx #$28
1729  $1390  D0 F5       bne _fs02
1730  $1392              
1731  $1392  A2 0B       _fs01    ldx #$0B
1732  $1394  AD 93 44    lda MRETURN
1733  $1397  F0 01       beq _fs00
1734  $1399  E8          inx
1735  $139A  8E A8 44    _fs00    stx RowCount
1736  $139D  20 AE 18    jsr PLOTBLOCK
1737  $13A0  20 DD 18    jsr PLOTCOLOR
1738  $13A3  60          rts
1739  $13A4              
1740  $13A4              ;The map editor IRQ
1741  $13A4              ;---GET MAP KEYS---
1742  $13A4              ;see: https://sta.c64.org/cbm64petkey.html
1743  $13A4              
1744  $13A4  AD 91 44    MAPKEYS  lda keypress
1745  $13A7  D0 01       bne _mk0
1746  $13A9  60          rts
1747  $13AA              
1748  $13AA  C9 9D       _mk0     cmp #$9D            ; CRSR L
1749  $13AC  D0 0C       bne M01
1750  $13AE  AE A3 44    ldx MAPX
1751  $13B1  CA          dex
1752  $13B2  E0 FF       cpx #$FF
1753  $13B4  F0 03       beq M0_end
1754  $13B6  8E A3 44    stx MAPX
1755  $13B9  60          M0_end   rts
1756  $13BA  C9 1D       M01      cmp #$1D            ; CRSR R
1757  $13BC  D0 0C       bne M2
1758  $13BE  AE A3 44    ldx MAPX
1759  $13C1  E8          inx
1760  $13C2  E0 14       cpx #$14
1761  $13C4  F0 03       beq M1_end
1762  $13C6  8E A3 44    stx MAPX
1763  $13C9  60          M1_end   rts
1764  $13CA  C9 11       M2       cmp #$11            ; CRSR D
1765  $13CC  D0 22       bne M3
1766  $13CE  AE A4 44    ldx MAPY
1767  $13D1  E8          inx
1768  $13D2  8E A4 44    stx MAPY
1769  $13D5              ;depending on MRETURN, we may go a line further
1770  $13D5  AD 93 44    lda MRETURN
1771  $13D8  F0 0C       beq _m201
1772  $13DA  E0 0C       cpx #$0c
1773  $13DC  90 11       bcc M2_end
1774  $13DE  A2 0B       ldx #$0b
1775  $13E0  8E A4 44    stx MAPY
1776  $13E3  4C EF 13    jmp M2_end
1777  $13E6  E0 0B       _m201    cpx #$0B
1778  $13E8  90 05       bcc M2_end
1779  $13EA  A2 0A       ldx #$0a
1780  $13EC  8E A4 44    stx MAPY
1781  $13EF              
1782  $13EF  60          M2_end   rts
1783  $13F0  C9 91       M3       cmp #$91            ; CRSR U
1784  $13F2  D0 0F       bne M4
1785  $13F4  AE A4 44    ldx MAPY
1786  $13F7  CA          dex
1787  $13F8  8E A4 44    stx MAPY
1788  $13FB  E0 FF       cpx #$FF
1789  $13FD  D0 03       bne M3_end
1790  $13FF  EE A4 44    inc MAPY
1791  $1402  60          M3_end   rts
1792  $1403  C9 20       M4       cmp #$20            ;SPACE
1793  $1405  D0 1F       bne M5
1794  $1407  AE A4 44    ldx MAPY
1795  $140A  BD CB 44    lda KER20LO,x
1796  $140D  8D 20 14    sta M4B+1
1797  $1410  BD DF 44    lda KER20HI,x
1798  $1413  8D 21 14    sta M4B+2
1799  $1416  AD CA 44    lda BlockNum          ;this is the first block on the blockline
1800  $1419  18          clc
1801  $141A  69 09       adc #$09           ;pick the middle block
1802  $141C  AC A3 44    ldy MAPX
1803  $141F  99 00 10    M4B      sta $1000,y
1804  $1422  EE 94 44    inc UpdateMapscreen
1805  $1425  60          rts
1806  $1426              
1807  $1426  C9 14       M5       cmp #$14            ; DEL
1808  $1428  D0 06       bne M6
1809  $142A  A2 F7       ldx #$F7
1810  $142C  8E CA 44    stx BlockNum
1811  $142F  60          rts
1812  $1430              
1813  $1430  EA          M6       nop
1814  $1431              
1815  $1431  C9 46       M7       cmp #"F"            ; F
1816  $1433  D0 18       bne M8
1817  $1435  AE A4 44    ldx MAPY
1818  $1438  BD CB 44    lda KER20LO,x
1819  $143B  18          clc
1820  $143C  6D A3 44    adc MAPX
1821  $143F  AA          tax
1822  $1440  BD 00 48    lda MAP,x
1823  $1443  38          sec
1824  $1444  E9 09       sbc #$09           ;pick the middle block
1825  $1446  8D CA 44    sta BlockNum
1826  $1449  EE 94 44    inc UpdateMapscreen
1827  $144C  60          rts
1828  $144D              
1829  $144D  C9 93       M8       cmp #$93            ; CLR
1830  $144F  D0 14       bne M9
1831  $1451  A2 00       ldx #$00
1832  $1453  AD CA 44    M8B      lda BlockNum
1833  $1456  18          clc
1834  $1457  69 09       adc #$09
1835  $1459  9D 00 48    sta MAP,x
1836  $145C  E8          inx
1837  $145D  E0 F0       cpx #20*12
1838  $145F  D0 F2       bne M8B
1839  $1461  EE 94 44    inc UpdateMapscreen
1840  $1464  60          rts
1841  $1465              
1842  $1465  C9 2C       M9       cmp #$2C            ; ,
1843  $1467  D0 07       bne M10
1844  $1469  CE CA 44    dec BlockNum
1845  $146C  EE 94 44    inc UpdateMapscreen
1846  $146F  60          rts
1847  $1470  C9 2E       M10      cmp #$2E            ; .
1848  $1472  D0 07       bne M9a
1849  $1474  EE CA 44    inc BlockNum
1850  $1477  EE 94 44    inc UpdateMapscreen
1851  $147A  60          rts
1852  $147B              
1853  $147B  C9 5D       M9a      cmp #$5D            ; ] aka S+,
1854  $147D  D0 0D       bne M10a
1855  $147F  AD CA 44    lda BlockNum
1856  $1482  38          sec
1857  $1483  E9 0A       sbc #10
1858  $1485  8D CA 44    sta BlockNum
1859  $1488  EE 94 44    inc UpdateMapscreen
1860  $148B  60          rts
1861  $148C  C9 3A       M10a     cmp #$3A            ; : aka S+.
1862  $148E  D0 0D       bne M11
1863  $1490  AD CA 44    lda BlockNum
1864  $1493  18          clc
1865  $1494  69 0A       adc #10
1866  $1496  8D CA 44    sta BlockNum
1867  $1499  EE 94 44    inc UpdateMapscreen
1868  $149C  60          rts
1869  $149D              
1870  $149D  C9 0D       M11      cmp #$0D            ; RETURN
1871  $149F  D0 1D       bne M12
1872  $14A1  AD 93 44    lda MRETURN
1873  $14A4  49 01       eor #$01
1874  $14A6  8D 93 44    sta MRETURN
1875  $14A9              
1876  $14A9  AD 93 44    lda MRETURN
1877  $14AC  D0 0C       bne _m1101
1878  $14AE  AE A4 44    ldx MAPY
1879  $14B1  E0 0B       cpx #$0b
1880  $14B3  D0 05       bne _m1101
1881  $14B5  A2 0A       ldx #$0a
1882  $14B7  8E A4 44    stx MAPY
1883  $14BA  EE 94 44    _m1101   inc UpdateMapscreen
1884  $14BD  60          rts
1885  $14BE              
1886  $14BE  C9 48       M12      cmp #"H"            ; H
1887  $14C0  D0 09       bne M13
1888  $14C2  20 0F 44    jsr Inithelp
1889  $14C5  A9 04       lda #S_IRQ_HELP_MAPEDIT
1890  $14C7  8D 49 08    sta s_irq
1891  $14CA  60          rts
1892  $14CB              
1893  $14CB              M13
1894  $14CB              ;cmp #$26            ; &
1895  $14CB              ;bne M14
1896  $14CB              ;jsr NOIRQ               ;TBD: Something bugs with the colors
1897  $14CB              ;jmp FileDirectory_Show  ; NOTE: this will return via IRQ
1898  $14CB              
1899  $14CB  C9 5F       M14      cmp #$5F            ; _
1900  $14CD  D0 09       bne M15
1901  $14CF  20 13 44    jsr Initbled
1902  $14D2  A9 01       lda #S_IRQ_BLED
1903  $14D4  8D 49 08    sta s_irq
1904  $14D7  60          rts
1905  $14D8              
1906  $14D8  C9 21       M15      cmp #$21            ; S+1
1907  $14DA  D0 0C       bne M16
1908  $14DC  AD F0 48    lda MAPCOLOR_D021
1909  $14DF  18          clc
1910  $14E0  69 01       adc #$01
1911  $14E2  29 0F       and #%00001111
1912  $14E4  8D F0 48    sta MAPCOLOR_D021
1913  $14E7  60          rts
1914  $14E8              
1915  $14E8  C9 22       M16      cmp #$22            ; S+2
1916  $14EA  D0 0C       bne M17
1917  $14EC  AD F1 48    lda MAPCOLOR_D022
1918  $14EF  18          clc
1919  $14F0  69 01       adc #$01
1920  $14F2  29 0F       and #%00001111
1921  $14F4  8D F1 48    sta MAPCOLOR_D022
1922  $14F7  60          rts
1923  $14F8              
1924  $14F8  C9 23       M17      cmp #$23            ; S+3
1925  $14FA  D0 0C       bne M18
1926  $14FC  AD F2 48    lda MAPCOLOR_D023
1927  $14FF  18          clc
1928  $1500  69 01       adc #$01
1929  $1502  29 0F       and #%00001111
1930  $1504  8D F2 48    sta MAPCOLOR_D023
1931  $1507  60          rts
1932  $1508  C9 CC       M18      cmp #$CC            ; S+L
1933  $150A  D0 08       bne M19
1934  $150C  20 67 09    jsr NOIRQ
1935  $150F  A2 02       ldx #LOADSAVE_MAPEDIT_LOAD
1936  $1511  4C 02 1F    jmp GETNAME
1937  $1514              
1938  $1514  C9 D3       M19      cmp #$D3            ; S+S
1939  $1516  D0 08       bne M20
1940  $1518  20 67 09    jsr NOIRQ
1941  $151B  A2 03       ldx #LOADSAVE_MAPEDIT_SAVE
1942  $151D  4C 02 1F    jmp GETNAME
1943  $1520              
1944  $1520  C9 4D       M20      cmp #"M"            ; M
1945  $1522  D0 0F       bne M21
1946  $1524  20 92 15    jsr mapStore
1947  $1527  A9 01       lda #01
1948  $1529  20 7B 15    jsr levelNumModify
1949  $152C  20 B3 15    jsr levelRelocate
1950  $152F  EE 94 44    inc UpdateMapscreen
1951  $1532  60          rts
1952  $1533              
1953  $1533  C9 4E       M21      cmp #"N"            ; N
1954  $1535  D0 0F       bne M22
1955  $1537  20 92 15    jsr mapStore
1956  $153A  A9 FF       lda #-01
1957  $153C  20 7B 15    jsr levelNumModify
1958  $153F  20 B3 15    jsr levelRelocate
1959  $1542  EE 94 44    inc UpdateMapscreen
1960  $1545  60          rts
1961  $1546              
1962  $1546  C9 CD       M22      cmp #$CD            ; S+M
1963  $1548  D0 0F       bne M23
1964  $154A  20 92 15    jsr mapStore
1965  $154D  A9 0A       lda #10
1966  $154F  20 7B 15    jsr levelNumModify
1967  $1552  20 B3 15    jsr levelRelocate
1968  $1555  EE 94 44    inc UpdateMapscreen
1969  $1558  60          rts
1970  $1559              
1971  $1559  C9 CE       M23      cmp #$CE            ; S+N
1972  $155B  D0 0F       bne M24
1973  $155D  20 92 15    jsr mapStore
1974  $1560  A9 F6       lda #-10
1975  $1562  20 7B 15    jsr levelNumModify
1976  $1565  20 B3 15    jsr levelRelocate
1977  $1568  EE 94 44    inc UpdateMapscreen
1978  $156B  60          rts
1979  $156C              
1980  $156C  C9 CF       M24      cmp #$CF            ; S+O  - batch load all maps.
1981  $156E  D0 03       bne M25
1982  $1570  4C 28 22    jmp level_LoadAll
1983  $1573              
1984  $1573  C9 D1       M25      cmp #$D1            ; S+Q  - pack levels
1985  $1575  D0 03       bne M26
1986  $1577  4C D3 1A    jmp packlevels
1987  $157A              M26
1988  $157A  60          rts
1989  $157B              
1990  $157B              ;---------------------------------------
1991  $157B              ;levelNumModify
1992  $157B              ;
1993  $157B              ; IN: A=amount to modify
1994  $157B              
1995  $157B              levelNumModify
1996  $157B  18          clc
1997  $157C  6D C9 44    adc LevelNum
1998  $157F  C9 64       cmp #100
1999  $1581  90 0B       bcc _lnm0        ;value between 0-99
2000  $1583  30 06       bmi _lnm1        ;value is negative
2001  $1585              ;value rolled over 100, reduce to an allowed value
2002  $1585  38          sec
2003  $1586  E9 64       sbc #100
2004  $1588  4C 8E 15    jmp _lnm0
2005  $158B              _lnm1    ;fix the negative value like -1 ($ff) to go to 99
2006  $158B  18          clc
2007  $158C  69 64       adc #100
2008  $158E  8D C9 44    _lnm0    sta LevelNum
2009  $1591  60          rts
2010  $1592              
2011  $1592              ;---------------------------------------
2012  $1592              ;mapStore
2013  $1592              ;
2014  $1592              ; Store current map to proper place in memory
2015  $1592              
2016  $1592              mapStore
2017  $1592  A5 01       lda $01
2018  $1594  48          pha
2019  $1595              
2020  $1595  A9 36       lda #$36
2021  $1597  85 01       sta $01
2022  $1599  AD C9 44    lda LevelNum
2023  $159C  18          clc
2024  $159D  69 49       adc #>MAP_LEVELS
2025  $159F  85 FC       sta $fc
2026  $15A1  A9 00       lda #$00
2027  $15A3  85 FB       sta $fb
2028  $15A5              
2029  $15A5  A0 00       ldy #$00
2030  $15A7  B9 00 48    _ms00    lda MAP,y
2031  $15AA  91 FB       sta ($fb),y
2032  $15AC  C8          iny
2033  $15AD              ;cpy #MAP_SIZE     ;unnecessary
2034  $15AD  D0 F8       bne _ms00
2035  $15AF              
2036  $15AF  68          pla
2037  $15B0  85 01       sta $01
2038  $15B2  60          rts
2039  $15B3              
2040  $15B3              ;---------------------------------------
2041  $15B3              ;mapLoad
2042  $15B3              ;
2043  $15B3              ; Move chosen level to map editor from memory
2044  $15B3              
2045  $15B3              levelRelocate
2046  $15B3  A5 01       lda $01
2047  $15B5  48          pha
2048  $15B6              
2049  $15B6  A9 36       lda #$36
2050  $15B8  85 01       sta $01
2051  $15BA  AD C9 44    lda LevelNum
2052  $15BD  18          clc
2053  $15BE  69 49       adc #>MAP_LEVELS
2054  $15C0  85 FC       sta $fc
2055  $15C2  A9 00       lda #$00
2056  $15C4  85 FB       sta $fb
2057  $15C6              
2058  $15C6  A0 00       ldy #$00
2059  $15C8  B1 FB       _ml00    lda ($fb),y
2060  $15CA  99 00 48    sta MAP,y
2061  $15CD  C8          iny
2062  $15CE              ;cpy #MAP_SIZE     ;unnecessary
2063  $15CE  D0 F8       bne _ml00
2064  $15D0              
2065  $15D0  EE 94 44    inc UpdateMapscreen
2066  $15D3              
2067  $15D3  68          pla
2068  $15D4  85 01       sta $01
2069  $15D6  60          rts
2070  $15D7              
2071  $15D7              
2072  $15D7              ;----------------------------------------------------
2073  $15D7              ;Count char datastart address
2074  $15D7              ;
2075  $15D7              ;getCharAddress_CNO: Returns the address on CNO+1 (the active character)
2076  $15D7              ; IN: nothing
2077  $15D7              ; OUT: ($fd) with char address
2078  $15D7              ;
2079  $15D7              ;getCharAddress: Returns the address of char in A
2080  $15D7              ; IN:  A=char number
2081  $15D7              ; OUT: ($fd) with char address
2082  $15D7              
2083  $15D7              getCharAddress_CNO
2084  $15D7  AD 51 0B    lda CNO+1
2085  $15DA              getCharAddress
2086  $15DA  A0 00       ldy #$00     ;FONTstaRT
2087  $15DC  85 FD       sta $FD
2088  $15DE  84 FE       sty $FE
2089  $15E0  06 FD       asl $FD      ;KERROTAAN 8:LLA
2090  $15E2  26 FE       rol $FE
2091  $15E4  06 FD       asl $FD
2092  $15E6  26 FE       rol $FE
2093  $15E8  06 FD       asl $FD
2094  $15EA  26 FE       rol $FE
2095  $15EC  A5 FE       lda $FE
2096  $15EE  18          clc
2097  $15EF  69 30       adc #FDAT/$0100  ;CHARDATAN HI
2098  $15F1  85 FE       sta $FE
2099  $15F3  60          rts
2100  $15F4              
2101  $15F4              ;----------------------------------------------------
2102  $15F4              ;Count block number under cursor
2103  $15F4              ;
2104  $15F4              ; IN: nothing
2105  $15F4              ; OUT: X=Block number
2106  $15F4              ;      Y=..possible something
2107  $15F4              
2108  $15F4              getBlockNumber
2109  $15F4  A0 00       ldy #$00
2110  $15F6  A9 00       BLONO    lda #$00     ;SMC!
2111  $15F8  C9 28       cmp #$28
2112  $15FA  90 05       bcc C401     ;BLOCK NO = X
2113  $15FC  38          sec          ;BDAT(Y)
2114  $15FD  E9 28       sbc #$28
2115  $15FF  C8          iny
2116  $1600  C8          iny
2117  $1601  4A          C401     lsr
2118  $1602  18          clc
2119  $1603  6D CA 44    adc BlockNum
2120  $1606  AA          tax
2121  $1607  AD F7 15    lda BLONO+1
2122  $160A  29 01       and #%00000001
2123  $160C  F0 01       beq *+3
2124  $160E  C8          iny
2125  $160F  60          rts
2126  $1610              
2127  $1610              ;---------------------------
2128  $1610              ;clearScreen
2129  $1610              
2130  $1610              clearScreen
2131  $1610  A2 00       ldx #$00
2132  $1612  A9 00       _cs0     lda #$00
2133  $1614  9D 00 D8    sta $D800,x
2134  $1617  9D 00 D9    sta $D900,x
2135  $161A  9D 00 DA    sta $DA00,x
2136  $161D  9D 00 DB    sta $DB00,x
2137  $1620  A9 20       lda #$20
2138  $1622  9D 00 04    sta $0400,x
2139  $1625  9D 00 05    sta $0500,x
2140  $1628  9D 00 06    sta $0600,x
2141  $162B  9D 00 07    sta $0700,x
2142  $162E  E8          inx
2143  $162F  D0 E1       bne _cs0
2144  $1631  60          rts
2145  $1632              ;---------------------------
2146  $1632              ;setDefaultScreen
2147  $1632              ;
2148  $1632              ; Reset screen to default c64 font
2149  $1632              
2150  $1632              setDefaultScreen
2151  $1632  A9 00       lda #$00
2152  $1634  8D 21 D0    sta $d021
2153  $1637  8D 20 D0    sta $d020
2154  $163A  A9 14       lda #$14       ;$16
2155  $163C  8D 18 D0    sta $d018
2156  $163F  A9 08       lda #$08
2157  $1641  8D 16 D0    sta $d016
2158  $1644              ;         ldx #$1B
2159  $1644              ;         stx $d011
2160  $1644  60          rts
2161  $1645              
2162  $1645              ;---------------------------------------
2163  $1645              ;printNumber
2164  $1645              ; IN: A=number
2165  $1645              ;     X=position on infoline
2166  $1645              
2167  $1645              PRINTDECIMAL = 0
2168  $1645              PRINTHEX = 1
2169  $1645              
2170  $1645              printNumber
2171  $1645  8E 56 16    stx _pn_smc+1
2172  $1648  C0 01       cpy #PRINTHEX
2173  $164A  F0 03       beq _pn00
2174  $164C              ;convert the hex number to BCD
2175  $164C  20 04 47    jsr hexToBcd
2176  $164F              
2177  $164F  48          _pn00    pha
2178  $1650  4A          lsr
2179  $1651  4A          lsr
2180  $1652  4A          lsr
2181  $1653  4A          lsr
2182  $1654  A8          tay
2183  $1655  A2 00       _pn_smc  ldx #$00       ;SMC
2184  $1657  B9 A9 44    lda Numchars,y
2185  $165A  9D 70 07    sta IPLC,x
2186  $165D  E8          inx
2187  $165E  68          pla
2188  $165F  29 0F       and #%1111
2189  $1661  A8          tay
2190  $1662  B9 A9 44    lda Numchars,y
2191  $1665  9D 70 07    sta IPLC,x
2192  $1668  60          rts
2193  $1669              
2194  $1669              ;---------------------------------------
2195  $1669              ;putNo
2196  $1669              ;
2197  $1669              ;print hex number to screen position
2198  $1669              ;
2199  $1669              ; IN: A,Y=screen address to print to ($AAYY)
2200  $1669              ;     X=number to print
2201  $1669              
2202  $1669  8D 7F 16    putNo    sta F1+2
2203  $166C  8D 8B 16    sta F2+2
2204  $166F  8C 8A 16    sty F2+1
2205  $1672  C8          iny
2206  $1673  8C 7E 16    sty F1+1
2207  $1676  8A          txa
2208  $1677  29 0F       and #%00001111
2209  $1679  A8          tay
2210  $167A  B9 B9 44    lda NumcharsReverse,y
2211  $167D  8D 00 10    F1       sta $1000        ;SMC
2212  $1680  8A          txa
2213  $1681  4A          lsr
2214  $1682  4A          lsr
2215  $1683  4A          lsr
2216  $1684  4A          lsr
2217  $1685  A8          tay
2218  $1686  B9 B9 44    lda NumcharsReverse,y
2219  $1689  8D 00 10    F2       sta $1000        ;SMC
2220  $168C  60          rts
2221  $168D              
2222  $168D              ;----------------------------------------------------
2223  $168D              ;PUT Y OR N TO SCREEN
2224  $168D              
2225  $168D  8D 9D 16    PUTYORN  sta F3+2
2226  $1690  8C 9C 16    sty F3+1
2227  $1693  A9 99       lda #$99
2228  $1695  E0 00       cpx #$00
2229  $1697  D0 02       bne *+4
2230  $1699  A9 8E       lda #$8E
2231  $169B  8D 00 10    F3       sta $1000
2232  $169E  60          rts
2233  $169F              
2234  $169F              ;----------------------------------------------------
2235  $169F  8D B7 16    PUTARROW sta F4+2
2236  $16A2  8C B6 16    sty F4+1
2237  $16A5  A2 9F       ldx #$9F
2238  $16A7  A9 A0       lda #$A0
2239  $16A9  8D 63 04    sta $0463
2240  $16AC  8D 8B 04    sta $048B
2241  $16AF  8D B3 04    sta $04B3
2242  $16B2  8D DB 04    sta $04DB
2243  $16B5  8E 00 10    F4       stx $1000
2244  $16B8  60          rts
2245  $16B9              
2246  $16B9              ;----------------------------------------------------
2247  $16B9              ;Copy/paste block details
2248  $16B9              ; Blocks, colors (but NOT chardata)
2249  $16B9              
2250  $16B9              block_copy
2251  $16B9  20 F4 15    jsr getBlockNumber
2252  $16BC  BD 00 3C    lda BCOL0,x
2253  $16BF  8D 95 44    sta BCOPYTEMP+0
2254  $16C2  BD 00 3D    lda BCOL1,x
2255  $16C5  8D 96 44    sta BCOPYTEMP+1
2256  $16C8  BD 00 3E    lda BCOL2,x
2257  $16CB  8D 97 44    sta BCOPYTEMP+2
2258  $16CE  BD 00 3F    lda BCOL3,x
2259  $16D1  8D 98 44    sta BCOPYTEMP+3
2260  $16D4  BD 00 38    lda BDAT0,x
2261  $16D7  8D 99 44    sta BCOPYTEMP+4
2262  $16DA  BD 00 39    lda BDAT1,x
2263  $16DD  8D 9A 44    sta BCOPYTEMP+5
2264  $16E0  BD 00 3A    lda BDAT2,x
2265  $16E3  8D 9B 44    sta BCOPYTEMP+6
2266  $16E6  BD 00 3B    lda BDAT3,x
2267  $16E9  8D 9C 44    sta BCOPYTEMP+7
2268  $16EC  60          rts
2269  $16ED              
2270  $16ED              block_paste
2271  $16ED  20 F4 15    jsr getBlockNumber
2272  $16F0  AD 95 44    lda BCOPYTEMP+0
2273  $16F3  9D 00 3C    sta BCOL0,x
2274  $16F6  AD 96 44    lda BCOPYTEMP+1
2275  $16F9  9D 00 3D    sta BCOL1,x
2276  $16FC  AD 97 44    lda BCOPYTEMP+2
2277  $16FF  9D 00 3E    sta BCOL2,x
2278  $1702  AD 98 44    lda BCOPYTEMP+3
2279  $1705  9D 00 3F    sta BCOL3,x
2280  $1708  AD 99 44    lda BCOPYTEMP+4
2281  $170B  9D 00 38    sta BDAT0,x
2282  $170E  AD 9A 44    lda BCOPYTEMP+5
2283  $1711  9D 00 39    sta BDAT1,x
2284  $1714  AD 9B 44    lda BCOPYTEMP+6
2285  $1717  9D 00 3A    sta BDAT2,x
2286  $171A  AD 9C 44    lda BCOPYTEMP+7
2287  $171D  9D 00 3B    sta BDAT3,x
2288  $1720  60          rts
2289  $1721              
2290  $1721              ;----------------------------------------------------
2291  $1721              ;Copy/paste full block details (Blocks, colors, chardata)
2292  $1721              ;
2293  $1721              ; The block copied is the one under cursor.
2294  $1721              
2295  $1721              fullBlock_copy
2296  $1721  20 F4 15    jsr getBlockNumber
2297  $1724  BD 00 38    lda BDAT0,x
2298  $1727  8D 56 45    sta COPYTEMP_BLOCK_CHARS+0
2299  $172A  BD 00 39    lda BDAT1,x
2300  $172D  8D 57 45    sta COPYTEMP_BLOCK_CHARS+1
2301  $1730  BD 00 3A    lda BDAT2,x
2302  $1733  8D 58 45    sta COPYTEMP_BLOCK_CHARS+2
2303  $1736  BD 00 3B    lda BDAT3,x
2304  $1739  8D 59 45    sta COPYTEMP_BLOCK_CHARS+3
2305  $173C  BD 00 3C    lda BCOL0,x
2306  $173F  8D 5A 45    sta COPYTEMP_BLOCK_COLORS+0
2307  $1742  BD 00 3D    lda BCOL1,x
2308  $1745  8D 5B 45    sta COPYTEMP_BLOCK_COLORS+1
2309  $1748  BD 00 3E    lda BCOL2,x
2310  $174B  8D 5C 45    sta COPYTEMP_BLOCK_COLORS+2
2311  $174E  BD 00 3F    lda BCOL3,x
2312  $1751  8D 5D 45    sta COPYTEMP_BLOCK_COLORS+3
2313  $1754              
2314  $1754  A9 5E       lda #<COPYTEMP_BLOCK_CHARDATA
2315  $1756  85 02       sta $02
2316  $1758  A9 45       lda #>COPYTEMP_BLOCK_CHARDATA
2317  $175A  85 03       sta $03
2318  $175C              
2319  $175C  A2 00       ldx #$00
2320  $175E  BD 56 45    _fbc1    lda COPYTEMP_BLOCK_CHARS,x
2321  $1761  20 DA 15    jsr getCharAddress
2322  $1764  A0 00       ldy #$00
2323  $1766  B1 FD       _fbc0    lda ($fd),y
2324  $1768  91 02       sta ($02),y
2325  $176A  C8          iny
2326  $176B  C0 08       cpy #$08
2327  $176D  D0 F7       bne _fbc0
2328  $176F  20 CF 17    jsr fb_inc02with8
2329  $1772  E8          inx
2330  $1773  E0 04       cpx #$04
2331  $1775  D0 E7       bne _fbc1
2332  $1777              
2333  $1777  60          rts
2334  $1778              
2335  $1778              fullBlock_paste
2336  $1778  20 F4 15    jsr getBlockNumber
2337  $177B  AD 5A 45    lda COPYTEMP_BLOCK_COLORS+0
2338  $177E  9D 00 3C    sta BCOL0,x
2339  $1781  AD 5B 45    lda COPYTEMP_BLOCK_COLORS+1
2340  $1784  9D 00 3D    sta BCOL1,x
2341  $1787  AD 5C 45    lda COPYTEMP_BLOCK_COLORS+2
2342  $178A  9D 00 3E    sta BCOL2,x
2343  $178D  AD 5D 45    lda COPYTEMP_BLOCK_COLORS+3
2344  $1790  9D 00 3F    sta BCOL3,x
2345  $1793              
2346  $1793  AC 51 0B    ldy CNO+1
2347  $1796  98          tya
2348  $1797  9D 00 38    sta BDAT0,x
2349  $179A  C8          iny
2350  $179B  98          tya
2351  $179C  9D 00 39    sta BDAT1,x
2352  $179F  C8          iny
2353  $17A0  98          tya
2354  $17A1  9D 00 3A    sta BDAT2,x
2355  $17A4  C8          iny
2356  $17A5  98          tya
2357  $17A6  9D 00 3B    sta BDAT3,x
2358  $17A9              
2359  $17A9  A9 5E       lda #<COPYTEMP_BLOCK_CHARDATA
2360  $17AB  85 02       sta $02
2361  $17AD  A9 45       lda #>COPYTEMP_BLOCK_CHARDATA
2362  $17AF  85 03       sta $03
2363  $17B1              
2364  $17B1  A2 00       ldx #$00
2365  $17B3              _fbp1    ;lda COPYTEMP_BLOCK_CHARS,x
2366  $17B3  8A          txa
2367  $17B4  18          clc
2368  $17B5  6D 51 0B    adc CNO+1
2369  $17B8  20 DA 15    jsr getCharAddress
2370  $17BB  A0 00       ldy #$00
2371  $17BD  B1 02       _fbp0    lda ($02),y
2372  $17BF  91 FD       sta ($fd),y
2373  $17C1  C8          iny
2374  $17C2  C0 08       cpy #$08
2375  $17C4  D0 F7       bne _fbp0
2376  $17C6  20 CF 17    jsr fb_inc02with8
2377  $17C9  E8          inx
2378  $17CA  E0 04       cpx #$04
2379  $17CC  D0 E5       bne _fbp1
2380  $17CE              
2381  $17CE  60          rts
2382  $17CF              
2383  $17CF              ;paste_temp  !byte 0,0,0,0
2384  $17CF              
2385  $17CF              fb_inc02with8
2386  $17CF  A5 02       lda $02
2387  $17D1  18          clc
2388  $17D2  69 08       adc #$08
2389  $17D4  85 02       sta $02
2390  $17D6  A5 03       lda $03
2391  $17D8  69 00       adc #$00
2392  $17DA  85 03       sta $03
2393  $17DC  60          rts
2394  $17DD              
2395  $17DD              
2396  $17DD              ;----------------------------------------------------
2397  $17DD              ;Plot char pixels
2398  $17DD              
2399  $17DD              EDITSCREENPTR = $d829
2400  $17DD              
2401  $17DD  A9 29       BITEIT   lda #<EDITSCREENPTR
2402  $17DF  A0 D8       ldy #>EDITSCREENPTR
2403  $17E1  85 FB       sta $FB
2404  $17E3  84 FC       sty $FC
2405  $17E5  20 D7 15    jsr getCharAddress_CNO
2406  $17E8  A5 FD       lda $FD
2407  $17EA  18          clc
2408  $17EB  69 08       adc #$08
2409  $17ED  8D A2 44    sta TEMP         ;TEMP used as the loop counter in ____DRAW
2410  $17F0  AE 51 0B    ldx CNO+1
2411  $17F3  BD D0 DA    lda FD8PLC,x     ;TARKISTETAAN
2412  $17F6  8D A1 44    sta MARKCOLOR    ;ONKO HIRES VAI
2413  $17F9  29 08       and #%00001000   ;MULTI
2414  $17FB  F0 6A       beq HIRESDRAW
2415  $17FD  4C 00 18    jmp MULTIDRAW
2416  $1800              
2417  $1800              ;----------------------------------------------------
2418  $1800              ;PLOTATAAN MULTICOLOR MERKKI
2419  $1800              
2420  $1800  AD FD 2F    MULTIDRAW lda DD021
2421  $1803  8D 9D 44    sta COLORS+0
2422  $1806  AD FE 2F    lda DD022
2423  $1809  8D 9E 44    sta COLORS+1
2424  $180C  AD FF 2F    lda DD023
2425  $180F  8D 9F 44    sta COLORS+2
2426  $1812              
2427  $1812  AD A1 44    lda MARKCOLOR
2428  $1815  38          sec
2429  $1816  E9 08       sbc #$08
2430  $1818  8D A0 44    sta COLORS+3
2431  $181B  A0 00       MLOOP2   ldy #$00
2432  $181D  B1 FD       lda ($FD),y
2433  $181F  8D 28 18    sta MSAVE1+1
2434  $1822  A9 00       MLOOP1   lda #$00
2435  $1824  8D 35 18    sta MCOL+1
2436  $1827  A9 00       MSAVE1   lda #$00
2437  $1829  0A          asl
2438  $182A  2E 35 18    rol MCOL+1
2439  $182D  0A          asl
2440  $182E  2E 35 18    rol MCOL+1
2441  $1831  8D 28 18    sta MSAVE1+1
2442  $1834  A2 00       MCOL     ldx #$00
2443  $1836  BD 9D 44    lda COLORS,x
2444  $1839  91 FB       sta ($FB),y
2445  $183B  C8          iny
2446  $183C  91 FB       sta ($FB),y
2447  $183E  C8          iny
2448  $183F  C0 08       cpy #$08
2449  $1841  D0 DF       bne MLOOP1
2450  $1843  A5 FB       lda $FB
2451  $1845  18          clc
2452  $1846  69 28       adc #$28
2453  $1848  85 FB       sta $FB
2454  $184A  A5 FC       lda $FC
2455  $184C  69 00       adc #$00
2456  $184E  85 FC       sta $FC
2457  $1850  E6 FD       inc $FD
2458  $1852  A5 FD       lda $FD
2459  $1854  CD A2 44    cmp TEMP
2460  $1857  D0 C2       bne MLOOP2
2461  $1859  A2 BB       ldx #(SPRITE+$40)/$40
2462  $185B  8E F8 07    stx $07F8
2463  $185E  AD A0 09    lda SPR1X+1
2464  $1861  29 FE       and #%11111110
2465  $1863  8D A0 09    sta SPR1X+1
2466  $1866  60          rts
2467  $1867              
2468  $1867              ;----------------------------------------------------
2469  $1867              ;PLOTATAAN HIRES MERKKI
2470  $1867              
2471  $1867  EA          HIRESDRAW nop
2472  $1868  A0 00       HLOOP2   ldy #$00
2473  $186A  B1 FD       lda ($FD),y
2474  $186C  AA          tax
2475  $186D  AD FD 2F    HLOOP1   lda DD021
2476  $1870  8D 80 18    sta HCOL+1
2477  $1873  8A          txa
2478  $1874  18          clc
2479  $1875  0A          asl
2480  $1876  AA          tax
2481  $1877  90 06       bcc HCOL
2482  $1879  AD A1 44    lda MARKCOLOR
2483  $187C  8D 80 18    sta HCOL+1
2484  $187F  A9 00       HCOL     lda #$00
2485  $1881  91 FB       sta ($FB),y
2486  $1883  C8          iny
2487  $1884  C0 08       cpy #$08
2488  $1886  D0 E5       bne HLOOP1
2489  $1888  A5 FB       lda $FB
2490  $188A  18          clc
2491  $188B  69 28       adc #$28
2492  $188D  85 FB       sta $FB
2493  $188F  A5 FC       lda $FC
2494  $1891  69 00       adc #$00
2495  $1893  85 FC       sta $FC
2496  $1895  E6 FD       inc $FD
2497  $1897  A5 FD       lda $FD
2498  $1899  CD A2 44    cmp TEMP
2499  $189C  D0 CA       bne HLOOP2
2500  $189E  A2 BA       ldx #(SPRITE)/$40
2501  $18A0  8E F8 07    stx $07F8
2502  $18A3  AE CB 0A    ldx COLOR+1
2503  $18A6  F0 02       beq *+4
2504  $18A8  A2 03       ldx #$03
2505  $18AA  8E CB 0A    stx COLOR+1
2506  $18AD  60          rts
2507  $18AE              
2508  $18AE              ;----------------------------------------------------
2509  $18AE              ;PLOT MAP BLOCK
2510  $18AE              
2511  $18AE              PLOTBLOCK
2512  $18AE  A9 00       lda #<MAP    ;BIG TEMP
2513  $18B0  85 C3       sta $C3
2514  $18B2  A9 48       lda #>MAP
2515  $18B4  85 C4       sta $C4
2516  $18B6              
2517  $18B6  A9 00       lda #<SCR04         ;RUUDUNALKU
2518  $18B8  85 FB       sta $FB             ;PLOT 2X2
2519  $18BA  A9 04       lda #>SCR04         ;ALL
2520  $18BC  85 FC       sta $FC
2521  $18BE  A9 28       lda #<(SCR04+$28)
2522  $18C0  85 FD       sta $FD
2523  $18C2  A9 04       lda #>(SCR04+$28)
2524  $18C4  85 FE       sta $FE
2525  $18C6  A9 38       lda #BDAT0/$0100
2526  $18C8  8D C8 19    sta P2X22+2
2527  $18CB  A9 39       lda #BDAT1/$0100
2528  $18CD  8D D3 19    sta P2X24+2
2529  $18D0  A9 3A       lda #BDAT2/$0100
2530  $18D2  8D CD 19    sta P2X23+2
2531  $18D5  A9 3B       lda #BDAT3/$0100
2532  $18D7  8D D8 19    sta P2X25+2
2533  $18DA  4C B6 19    jmp P2X2UD
2534  $18DD              
2535  $18DD              ;----------------------------------------------------
2536  $18DD              ;PLOTMAPCOLOR
2537  $18DD              
2538  $18DD              PLOTCOLOR
2539  $18DD  A9 00       lda #<MAP    ;BIG TEMP
2540  $18DF  85 C3       sta $C3
2541  $18E1  A9 48       lda #>MAP
2542  $18E3  85 C4       sta $C4
2543  $18E5              
2544  $18E5  A9 00       lda #<SCRD8         ;RUUDUNALKU
2545  $18E7  85 FB       sta $FB
2546  $18E9  A9 D8       lda #>SCRD8
2547  $18EB  85 FC       sta $FC
2548  $18ED  A9 28       lda #<(SCRD8+$28)
2549  $18EF  85 FD       sta $FD
2550  $18F1  A9 D8       lda #>(SCRD8+$28)
2551  $18F3  85 FE       sta $FE
2552  $18F5  A9 3C       lda #BCOL0/$0100
2553  $18F7  8D C8 19    sta P2X22+2
2554  $18FA  A9 3D       lda #BCOL1/$0100
2555  $18FC  8D D3 19    sta P2X24+2
2556  $18FF  A9 3E       lda #BCOL2/$0100
2557  $1901  8D CD 19    sta P2X23+2
2558  $1904  A9 3F       lda #BCOL3/$0100
2559  $1906  8D D8 19    sta P2X25+2
2560  $1909  4C B6 19    jmp P2X2UD
2561  $190C              
2562  $190C              ;----------------------------------------------------
2563  $190C              ;DRAW BLOCK LINE
2564  $190C              ;
2565  $190C              ; IN: A = BLOCKLINE_BLED - 2x2bled
2566  $190C              ;     A = BLOCKLINE_MAPEDIT - Map editor block line
2567  $190C              
2568  $190C  00          BlocklinePos !byte BLOCKLINE_BLED
2569  $190D              
2570  $190D              drawBlockLine
2571  $190D              ;store
2572  $190D  8D 0C 19    sta BlocklinePos
2573  $1910              
2574  $1910  A9 00       lda #<BTEMP    ;BIG TEMP
2575  $1912  85 C3       sta $C3
2576  $1914  A9 2F       lda #>BTEMP
2577  $1916  85 C4       sta $C4
2578  $1918              
2579  $1918  A0 00       ldy #$00
2580  $191A  AE CA 44    ldx BlockNum
2581  $191D  8A          _db02    txa
2582  $191E  91 C3       sta ($C3),y
2583  $1920  E8          inx
2584  $1921  C8          iny
2585  $1922  C0 14       cpy #$14
2586  $1924  D0 F7       bne _db02
2587  $1926              
2588  $1926  A2 01       ldx #$01            ;How many lines on blocks to draw
2589  $1928  8E A8 44    stx RowCount
2590  $192B              
2591  $192B              ;draw block data
2592  $192B  AD 0C 19    lda BlocklinePos
2593  $192E  C9 01       cmp #BLOCKLINE_MAPEDIT
2594  $1930  F0 13       beq _db00
2595  $1932              
2596  $1932              ;set bled position
2597  $1932  A9 90       lda #<BPLC          ;RUUDUNALKU
2598  $1934  85 FB       sta $FB             ;PLOT 2X2
2599  $1936  A9 05       lda #>BPLC
2600  $1938  85 FC       sta $FC
2601  $193A  A9 B8       lda #<(BPLC+$28)
2602  $193C  85 FD       sta $FD
2603  $193E  A9 05       lda #>(BPLC+$28)
2604  $1940  85 FE       sta $FE
2605  $1942  4C 55 19    jmp _db01
2606  $1945              
2607  $1945              ;set mapedit position
2608  $1945  A9 98       _db00    lda #<BMPLC         ;RUUDUNALKU
2609  $1947  85 FB       sta $FB             ;PLOT 2X2
2610  $1949  A9 07       lda #>BMPLC
2611  $194B  85 FC       sta $FC
2612  $194D  A9 C0       lda #<(BMPLC+$28)
2613  $194F  85 FD       sta $FD
2614  $1951  A9 07       lda #>(BMPLC+$28)
2615  $1953  85 FE       sta $FE
2616  $1955              
2617  $1955  A9 38       _db01    lda #BDAT0/$0100
2618  $1957  8D C8 19    sta P2X22+2
2619  $195A  A9 39       lda #BDAT1/$0100
2620  $195C  8D D3 19    sta P2X24+2
2621  $195F  A9 3A       lda #BDAT2/$0100
2622  $1961  8D CD 19    sta P2X23+2
2623  $1964  A9 3B       lda #BDAT3/$0100
2624  $1966  8D D8 19    sta P2X25+2
2625  $1969  20 B6 19    jsr P2X2UD
2626  $196C              
2627  $196C              ;draw block colors
2628  $196C              ;reset ($C3)
2629  $196C  A9 00       lda #<BTEMP         ;BIG TEMP
2630  $196E  85 C3       sta $C3
2631  $1970  A9 2F       lda #>BTEMP
2632  $1972  85 C4       sta $C4
2633  $1974              
2634  $1974  AD 0C 19    lda BlocklinePos
2635  $1977  C9 01       cmp #BLOCKLINE_MAPEDIT
2636  $1979  F0 13       beq _db03
2637  $197B              
2638  $197B  A9 90       lda #<BD8PLC        ;RUUDUNALKU
2639  $197D  85 FB       sta $FB
2640  $197F  A9 D9       lda #>BD8PLC
2641  $1981  85 FC       sta $FC
2642  $1983  A9 B8       lda #<(BD8PLC+$28)
2643  $1985  85 FD       sta $FD
2644  $1987  A9 D9       lda #>(BD8PLC+$28)
2645  $1989  85 FE       sta $FE
2646  $198B  4C 9E 19    jmp _db04
2647  $198E              
2648  $198E  A9 98       _db03    lda #<BMD8PLC       ;RUUDUNALKU
2649  $1990  85 FB       sta $FB
2650  $1992  A9 DB       lda #>BMD8PLC
2651  $1994  85 FC       sta $FC
2652  $1996  A9 C0       lda #<(BMD8PLC+$28)
2653  $1998  85 FD       sta $FD
2654  $199A  A9 DB       lda #>(BMD8PLC+$28)
2655  $199C  85 FE       sta $FE
2656  $199E              
2657  $199E  A9 3C       _db04    lda #BCOL0/$0100
2658  $19A0  8D C8 19    sta P2X22+2
2659  $19A3  A9 3D       lda #BCOL1/$0100
2660  $19A5  8D D3 19    sta P2X24+2
2661  $19A8  A9 3E       lda #BCOL2/$0100
2662  $19AA  8D CD 19    sta P2X23+2
2663  $19AD  A9 3F       lda #BCOL3/$0100
2664  $19AF  8D D8 19    sta P2X25+2
2665  $19B2  20 B6 19    jsr P2X2UD
2666  $19B5  60          rts
2667  $19B6              
2668  $19B6              ;----------------------------------------------------
2669  $19B6              ;The main routine to draw blocks
2670  $19B6              ;
2671  $19B6              ; ($C3)   : point to the temp/buffer which has the block numbers to print. This could be the whole map
2672  $19B6              ; RIVIM+1 : the amount of block lines to draw. TBD: This is ugly SMC code, but too lazy to fix.
2673  $19B6              ; ($FB)   : the position on screen for [12]
2674  $19B6              ; ($FD)   : the position on screen for [34]
2675  $19B6              ;
2676  $19B6              ; Block looks like this [12]
2677  $19B6              ;                       [34]
2678  $19B6              
2679  $19B6  A2 00       P2X2UD   ldx #$00           ;RIVILASKURI
2680  $19B8  8E A6 44    stx TEMP2
2681  $19BB  A0 00       P2X21    ldy #$00
2682  $19BD  8C A5 44    sty TEMP1
2683  $19C0  B1 C3       lda ($C3),y        ;read the block number to print
2684  $19C2  AA          tax                ;move to x
2685  $19C3  98          tya
2686  $19C4  0A          asl
2687  $19C5  A8          tay
2688  $19C6  BD 00 10    P2X22    lda $1000,x        ;read block data - char or color
2689  $19C9  91 FB       sta ($FB),y        ;print 1
2690  $19CB  BD 00 10    P2X23    lda $1000,x
2691  $19CE  91 FD       sta ($FD),y        ;print 3
2692  $19D0  C8          iny
2693  $19D1  BD 00 10    P2X24    lda $1000,x        ;print 2
2694  $19D4  91 FB       sta ($FB),y
2695  $19D6  BD 00 10    P2X25    lda $1000,x        ;print 4
2696  $19D9  91 FD       sta ($FD),y
2697  $19DB  AC A5 44    ldy TEMP1
2698  $19DE  C8          iny
2699  $19DF  C0 14       cpy #$14           ;We can draw 20 ($14) 2x2 blocks on one line
2700  $19E1  D0 DA       bne P2X21+2
2701  $19E3              
2702  $19E3              ;move pointers to next block line.
2703  $19E3  A5 FB       lda $FB
2704  $19E5  18          clc
2705  $19E6  69 50       adc #$50           ;next block line is 80 characters
2706  $19E8  85 FB       sta $FB
2707  $19EA  A5 FC       lda $FC
2708  $19EC  69 00       adc #$00
2709  $19EE  85 FC       sta $FC
2710  $19F0  A5 FD       lda $FD
2711  $19F2  18          clc
2712  $19F3  69 50       adc #$50
2713  $19F5  85 FD       sta $FD
2714  $19F7  A5 FE       lda $FE
2715  $19F9  69 00       adc #$00
2716  $19FB  85 FE       sta $FE
2717  $19FD  A5 C3       lda $C3
2718  $19FF  18          clc
2719  $1A00  69 14       adc #$14
2720  $1A02  85 C3       sta $C3
2721  $1A04  A5 C4       lda $C4
2722  $1A06  69 00       adc #$00
2723  $1A08  85 C4       sta $C4
2724  $1A0A              
2725  $1A0A              ;if we need to print more lines, repeat
2726  $1A0A  EE A6 44    inc TEMP2
2727  $1A0D  AE A6 44    ldx TEMP2
2728  $1A10  EC A8 44    cpx RowCount
2729  $1A13  D0 A6       bne P2X21
2730  $1A15  60          rts
2731  $1A16              
2732  $1A16              ;----------------------------------------------------
2733  $1A16              ;printSingleBlock
2734  $1A16              ;
2735  $1A16              ;IN:  X = blocknumber
2736  $1A16              ;     Y = offset from left side
2737  $1A16              
2738  $1A16              printSingleBlock
2739  $1A16  BD 00 38    lda BDAT0,x
2740  $1A19  99 08 06    sta BPLC+$78,y
2741  $1A1C  BD 00 39    lda BDAT1,x
2742  $1A1F  99 09 06    sta BPLC+$79,y
2743  $1A22  BD 00 3A    lda BDAT2,x
2744  $1A25  99 30 06    sta BPLC+$A0,y
2745  $1A28  BD 00 3B    lda BDAT3,x
2746  $1A2B  99 31 06    sta BPLC+$A1,y
2747  $1A2E  BD 00 3C    lda BCOL0,x
2748  $1A31  99 08 DA    sta BD8PLC+$78,y
2749  $1A34  BD 00 3D    lda BCOL1,x
2750  $1A37  99 09 DA    sta BD8PLC+$79,y
2751  $1A3A  BD 00 3E    lda BCOL2,x
2752  $1A3D  99 30 DA    sta BD8PLC+$A0,y
2753  $1A40  BD 00 3F    lda BCOL3,x
2754  $1A43  99 31 DA    sta BD8PLC+$A1,y
2755  $1A46  60          rts
2756  $1A47              
2757  $1A47              LEVEL_NORMAL_COUNT_TO_PACK = 100
2758  $1A47              LEVEL_BONUS_COUNT_TO_PACK = 16
2759  $1A47              
2760  $1A47  00          level_count_p !byte 0
2761  $1A48              
2762  $1A48  50 41 43 4B 49 4E 47 20 4C 45 56 45 4C 53 2E 2E 2E 0D 50 41 43 4B 45 44 20 54 4F 3A 20 24 41 44 30 30 2D 24 00  text_pack1 !pet "packing levels...",$d,"packed to: $ad00-$", 0  ;The $ad00 is same as PACKTO
2763  $1A6D  0D 53 41 56 49 4E 47  text_pack2 !pet $d,"saving"
2764  $1A74  0D 2D 4C 45 56 45 4C 53 3A 00  !pet $d,"-levels:", 0
2765  $1A7E  0D 2D 50 4F 49 4E 54 45 52 53 00  text_pack3 !pet $d,"-pointers", 0
2766  $1A89  0D 52 45 41 44 59 2E 00  text_pack4 !pet $d,"ready.", 0
2767  $1A91              
2768  $1A91  50 52 45 53 53 0D  text_ask1  !pet "press",$d
2769  $1A97  31 20 2D 20 4E 4F 52 4D 41 4C 20 4C 45 56 45 4C 53 20 28 31 30 30 29 0D  !pet "1 - normal levels (100)",$d
2770  $1AAF  32 20 2D 20 42 4F 4E 55 53 20 4C 45 56 45 4C 53 20 28 31 36 29 0D  !pet "2 - bonus levels (16)",$d
2771  $1AC5  52 45 54 55 52 4E 20 2D 20 42 41 43 4B 00  !pet "return - back", 0
2772  $1AD3              
2773  $1AD3              ;----------------------------------------------
2774  $1AD3              ;packlevels
2775  $1AD3              ;
2776  $1AD3              ; This will pack levels and save level data and pointers
2777  $1AD3              ;
2778  $1AD3              ; IN: A=level count to pack
2779  $1AD3              ;
2780  $1AD3              ; lda #<level count to pack>
2781  $1AD3              ; jsr level_count_p
2782  $1AD3              
2783  $1AD3              packlevels
2784  $1AD3  20 67 09    jsr NOIRQ
2785  $1AD6  20 10 16    jsr clearScreen
2786  $1AD9  20 32 16    jsr setDefaultScreen
2787  $1ADC              
2788  $1ADC  20 66 E5    jsr $E566        ;cursor to 0,0
2789  $1ADF              
2790  $1ADF  A2 0B       ldx #$0b
2791  $1AE1  A9 91       lda #<text_ask1
2792  $1AE3  A0 1A       ldy #>text_ask1
2793  $1AE5  20 A4 46    jsr print
2794  $1AE8              
2795  $1AE8  20 E4 FF    _pl0     jsr $ffe4
2796  $1AEB  8D 20 D0    sta $d020
2797  $1AEE  F0 F8       beq _pl0
2798  $1AF0              
2799  $1AF0  C9 31       cmp #"1"
2800  $1AF2  F0 0B       beq _pl01
2801  $1AF4              
2802  $1AF4  C9 32       cmp #"2"
2803  $1AF6  F0 0F       beq _pl02
2804  $1AF8              
2805  $1AF8  C9 0D       cmp #$0d            ; RETURN
2806  $1AFA  D0 EC       bne _pl0
2807  $1AFC  4C 7F 1B    jmp _pl_end
2808  $1AFF              
2809  $1AFF  A9 01       _pl01    lda #1;LEVEL_NORMAL_COUNT_TO_PACK
2810  $1B01  8D 47 1A    sta level_count_p
2811  $1B04  4C 0F 1B    jmp _pl1
2812  $1B07              
2813  $1B07  A9 10       _pl02    lda #LEVEL_BONUS_COUNT_TO_PACK
2814  $1B09  8D 47 1A    sta level_count_p
2815  $1B0C  4C 0F 1B    jmp _pl1
2816  $1B0F              
2817  $1B0F  20 66 E5    _pl1     jsr $E566        ;cursor to 0,0
2818  $1B12              
2819  $1B12  A2 0B       ldx #$0b
2820  $1B14  A9 48       lda #<text_pack1
2821  $1B16  A0 1A       ldy #>text_pack1
2822  $1B18  20 A4 46    jsr print
2823  $1B1B              ;         jsr $ab1e
2824  $1B1B              
2825  $1B1B  A9 30       lda #$30           ;Make ROM at $A000 visible.
2826  $1B1D  85 01       sta $01
2827  $1B1F              
2828  $1B1F  A9 00       lda #<PACKFROM     ;Set pointer to Source.Memory
2829  $1B21  A0 49       ldy #>PACKFROM
2830  $1B23  85 02       sta $02
2831  $1B25  84 03       sty $03
2832  $1B27  A9 00       lda #<PACKTO       ;Set pointer to Target.Memory
2833  $1B29  A0 AD       ldy #>PACKTO
2834  $1B2B  85 04       sta $04
2835  $1B2D  84 05       sty $05
2836  $1B2F  AE 47 1A    ldx level_count_p ;levels to pack
2837  $1B32  20 47 1C    jsr dopack
2838  $1B35              
2839  $1B35  A9 37       lda #$37           ;Make ROM at $A000 visible.
2840  $1B37  85 01       sta $01
2841  $1B39              
2842  $1B39  A9 00       lda #$00
2843  $1B3B  8D 20 D0    sta $d020
2844  $1B3E              
2845  $1B3E  A5 04       lda $04
2846  $1B40  8D 88 1B    sta pack_end+0
2847  $1B43  A5 05       lda $05
2848  $1B45  8D 89 1B    sta pack_end+1
2849  $1B48              
2850  $1B48  AD 89 1B    lda pack_end+1
2851  $1B4B  20 BA 46    jsr print_number_hex
2852  $1B4E  AD 88 1B    lda pack_end+0
2853  $1B51  20 BA 46    jsr print_number_hex
2854  $1B54              
2855  $1B54  A2 0B       ldx #$0b
2856  $1B56  A9 6D       lda #<text_pack2
2857  $1B58  A0 1A       ldy #>text_pack2
2858  $1B5A  20 A4 46    jsr print
2859  $1B5D  AD 47 1A    lda level_count_p
2860  $1B60  20 EC 46    jsr print_number
2861  $1B63              
2862  $1B63  20 D4 1B    jsr SAVE_packed_levels
2863  $1B66              
2864  $1B66  A9 37       lda #$37           ;Make ROM at $A000 visible.
2865  $1B68  85 01       sta $01
2866  $1B6A              
2867  $1B6A  A2 0B       ldx #$0b
2868  $1B6C  A9 7E       lda #<text_pack3
2869  $1B6E  A0 1A       ldy #>text_pack3
2870  $1B70  20 A4 46    jsr print
2871  $1B73  20 03 1C    jsr SAVE_packed_level_pointers
2872  $1B76              
2873  $1B76  A2 0B       ldx #$0b
2874  $1B78  A9 89       lda #<text_pack4
2875  $1B7A  A0 1A       ldy #>text_pack4
2876  $1B7C  20 A4 46    jsr print
2877  $1B7F              
2878  $1B7F              _pl_end
2879  $1B7F  A2 0E       ldx #14          ;Read 14 values from stack as we came to this routine 'ugly'
2880  $1B81  68          _pl00    pla
2881  $1B82  CA          dex
2882  $1B83  D0 FC       bne _pl00
2883  $1B85              
2884  $1B85  4C E7 1F    jmp _in_end
2885  $1B88              
2886  $1B88  00 00       pack_end  !byte 0,0
2887  $1B8A              
2888  $1B8A              ;------------------------------------
2889  $1B8A              
2890  $1B8A              ;1234567890123456789
2891  $1B8A  40 30 3A 50 54 36 34 2D 50 41 43 4B 2D 4C 45 56 45 4C 53  PNAME1   !pet "@0:pt64-pack-levels"
2892  $1B9D              PNAME1_END
2893  $1B9D  40 30 3A 50 54 36 34 2D 50 41 43 4B 2D 50 54 52 53  PNAME2   !pet "@0:pt64-pack-ptrs"
2894  $1BAE              PNAME2_END
2895  $1BAE              
2896  $1BAE  40 30 3A 50 54 36 34 2D 42 4F 4E 55 53 2D 4C 45 56 45 4C 53  PNAME3   !pet "@0:pt64-bonus-levels"
2897  $1BC2              PNAME3_END
2898  $1BC2  40 30 3A 50 54 36 34 2D 42 4F 4E 55 53 2D 50 54 52 53  PNAME4   !pet "@0:pt64-bonus-ptrs"
2899  $1BD4              PNAME4_END
2900  $1BD4              
2901  $1BD4              ;------------------------------------
2902  $1BD4              ;Save packed levels
2903  $1BD4              
2904  $1BD4              SAVE_packed_levels
2905  $1BD4  AD 47 1A    lda level_count_p
2906  $1BD7  C9 10       cmp #LEVEL_BONUS_COUNT_TO_PACK
2907  $1BD9  F0 09       beq _spl1
2908  $1BDB              
2909  $1BDB              ;set the normal save filename
2910  $1BDB  A9 13       lda #(PNAME1_END-PNAME1)   ;filename length
2911  $1BDD  A2 8A       ldx #<PNAME1
2912  $1BDF  A0 1B       ldy #>PNAME1
2913  $1BE1  4C EA 1B    jmp _spl0
2914  $1BE4              
2915  $1BE4              ;set the bonus save filename
2916  $1BE4  A9 14       _spl1    lda #(PNAME3_END-PNAME3)   ;filename length
2917  $1BE6  A2 AE       ldx #<PNAME3
2918  $1BE8  A0 1B       ldy #>PNAME3
2919  $1BEA              
2920  $1BEA  20 7E 45    _spl0    jsr SAVE_init
2921  $1BED              
2922  $1BED  A9 00       lda #<PACKTO       ;Set pointer to Source.Memory
2923  $1BEF  85 02       sta $02
2924  $1BF1  A9 AD       lda #>PACKTO
2925  $1BF3  85 03       sta $03
2926  $1BF5              
2927  $1BF5  AD 88 1B    lda pack_end+0
2928  $1BF8  85 04       sta $04
2929  $1BFA  AD 89 1B    lda pack_end+1
2930  $1BFD  85 05       sta $05
2931  $1BFF              
2932  $1BFF              ;         lda #<(PACKTO+100)
2933  $1BFF              ;         sta $04
2934  $1BFF              ;         lda #>(PACKTO+100)
2935  $1BFF              ;         sta $05
2936  $1BFF              
2937  $1BFF  20 39 46    jsr SAVE_file
2938  $1C02  60          rts
2939  $1C03              
2940  $1C03              ;------------------------------------
2941  $1C03              ;Save packed level pointers
2942  $1C03              
2943  $1C03              SAVE_packed_level_pointers
2944  $1C03              
2945  $1C03              ;move pointer data back to back
2946  $1C03  A2 00       ldx #$00
2947  $1C05  AC 47 1A    ldy level_count_p
2948  $1C08  BD 80 1E    _spp0    lda lvldata_hi,x
2949  $1C0B  99 00 1E    sta lvldata_lo,y
2950  $1C0E  C8          iny
2951  $1C0F  E8          inx
2952  $1C10  EC 47 1A    cpx level_count_p
2953  $1C13  D0 F3       bne _spp0
2954  $1C15              
2955  $1C15  AD 47 1A    lda level_count_p
2956  $1C18  C9 10       cmp #LEVEL_BONUS_COUNT_TO_PACK
2957  $1C1A  F0 09       beq _spp2
2958  $1C1C              
2959  $1C1C              ;set the normal save filename
2960  $1C1C  A9 11       lda #(PNAME2_END-PNAME2)   ;filename length
2961  $1C1E  A2 9D       ldx #<PNAME2
2962  $1C20  A0 1B       ldy #>PNAME2
2963  $1C22  4C 2B 1C    jmp _spp1
2964  $1C25              
2965  $1C25              ;set the bonus save filename
2966  $1C25  A9 12       _spp2    lda #(PNAME4_END-PNAME4)   ;filename length
2967  $1C27  A2 C2       ldx #<PNAME4
2968  $1C29  A0 1B       ldy #>PNAME4
2969  $1C2B              
2970  $1C2B  20 7E 45    _spp1    jsr SAVE_init
2971  $1C2E              
2972  $1C2E  A9 00       lda #<lvldata_lo
2973  $1C30  85 02       sta $02
2974  $1C32  A9 1E       lda #>lvldata_lo
2975  $1C34  85 03       sta $03
2976  $1C36  A9 00       lda #<(lvldata_lo)     ;LOPPU
2977  $1C38  18          clc
2978  $1C39  6D 47 1A    adc level_count_p
2979  $1C3C  0A          asl
2980  $1C3D  85 04       sta $04
2981  $1C3F  A9 1E       lda #>(lvldata_lo)
2982  $1C41  85 05       sta $05
2983  $1C43              
2984  $1C43  20 39 46    jsr SAVE_file
2985  $1C46  60          rts
2986  $1C47              
2987  $1C47              
2988  $1C47              ;---------------------------------------
2989  $1C47              ;LevelPACKer routine
2990  $1C47              ;(c)copyright 1995 Scapegoat/Topaz Beerline
2991  $1C47              ;
2992  $1C47              ;Modified by d'Arc to fit Penguin Tower
2993  $1C47              ;Version: 2023-02-16
2994  $1C47              ;---------------------------------------
2995  $1C47              ;
2996  $1C47              ; lda #<packfrom ;Set pointer to Source.Memory
2997  $1C47              ; ldy #>packfrom
2998  $1C47              ; sta $02
2999  $1C47              ; sty $03
3000  $1C47              ;
3001  $1C47              ; lda #<packto  ;Set pointer to Target.Memory
3002  $1C47              ; ldy #>packto
3003  $1C47              ; sta $04
3004  $1C47              ; sty $05
3005  $1C47              ;
3006  $1C47              ; ldx #how_many_levels_to_pack  ;max 100!
3007  $1C47              ; jsr dopack
3008  $1C47              
3009  $1C47              ENDCHAR = $ff
3010  $1C47              REPEAT_CTRL = $fe
3011  $1C47              LASTLEVEL = 1
3012  $1C47              PACK_LENGTH = $f3   ;how many bytes to pack. A penguin level is 20*12 blocks and 3 colors -> 243 -> $f3
3013  $1C47              
3014  $1C47  8E 9F 1D    dopack  stx levelcount
3015  $1C4A  A5 03       lda $03
3016  $1C4C  8D A0 1D    sta levelpage
3017  $1C4F  A9 00       lda #$00
3018  $1C51  8D 9E 1D    sta levelno
3019  $1C54              
3020  $1C54  A5 01       lda $01           ;store $01
3021  $1C56  48          pha
3022  $1C57  A9 30       lda #$30
3023  $1C59  85 01       sta $01
3024  $1C5B              
3025  $1C5B              packnextlevel
3026  $1C5B  A9 00       lda #$00
3027  $1C5D  8D 9D 1D    sta endflag
3028  $1C60  85 02       sta $02           ;level starts always in the begining of a page
3029  $1C62  AD 9E 1D    lda levelno
3030  $1C65  18          clc
3031  $1C66  6D A0 1D    adc levelpage
3032  $1C69  85 03       sta $03
3033  $1C6B              
3034  $1C6B              ;        ldy #$00
3035  $1C6B              ;        lda ($02),y
3036  $1C6B              ;        cmp #$ff
3037  $1C6B              ;        beq donepacking
3038  $1C6B  AC 9E 1D    ldy levelno
3039  $1C6E  A5 04       lda $04
3040  $1C70  99 00 1E    sta lvldata_lo,y
3041  $1C73  A5 05       lda $05
3042  $1C75  99 80 1E    sta lvldata_hi,y
3043  $1C78  EE 9E 1D    inc levelno
3044  $1C7B  20 8E 1C    jsr main
3045  $1C7E  AC 9E 1D    ldy levelno
3046  $1C81  CC 9F 1D    cpy levelcount
3047  $1C84  D0 D5       bne packnextlevel
3048  $1C86              
3049  $1C86              ;donepacking
3050  $1C86  A9 37       lda #$37          ;restore $01
3051  $1C88  85 01       sta $01
3052  $1C8A  68          pla
3053  $1C8B  85 01       sta $01
3054  $1C8D  60          rts
3055  $1C8E              
3056  $1C8E              main
3057  $1C8E  A9 FF       lda #$ff
3058  $1C90  85 FD       sta $fd
3059  $1C92  A9 00       lda #$00
3060  $1C94  85 FE       sta $fe
3061  $1C96  AD 9D 1D    lda endflag
3062  $1C99  C9 00       cmp #$00
3063  $1C9B  F0 0A       beq main2
3064  $1C9D  A0 00       ldy #$00
3065  $1C9F  A9 FF       lda #ENDCHAR
3066  $1CA1  91 04       sta ($04),y
3067  $1CA3  20 96 1D    jsr _add04
3068  $1CA6  60          rts
3069  $1CA7              ;        jmp packnextlevel
3070  $1CA7              
3071  $1CA7              main2
3072  $1CA7  A5 02       lda $02
3073  $1CA9  A4 03       ldy $03
3074  $1CAB  85 F8       sta $f8
3075  $1CAD  84 F9       sty $f9
3076  $1CAF  A0 00       ldy #$00
3077  $1CB1  B1 02       lda ($02),y
3078  $1CB3  85 FD       sta $fd
3079  $1CB5              _ed10
3080  $1CB5  E6 FE       inc $fe
3081  $1CB7  C8          iny
3082  $1CB8  B1 02       lda ($02),y
3083  $1CBA  C5 FD       cmp $fd
3084  $1CBC  D0 39       bne diffchars
3085  $1CBE  C0 03       cpy #$03
3086  $1CC0  D0 F3       bne _ed10
3087  $1CC2  E6 FE       inc $fe
3088  $1CC4  20 68 1D    jsr ruma02r
3089  $1CC7  20 68 1D    jsr ruma02r
3090  $1CCA  20 68 1D    jsr ruma02r
3091  $1CCD  20 68 1D    jsr ruma02r
3092  $1CD0  A0 00       ldy #$00
3093  $1CD2              loo2
3094  $1CD2  EE 20 D0    inc $d020
3095  $1CD5  B1 02       lda ($02),y
3096  $1CD7  C5 FD       cmp $fd
3097  $1CD9  D0 08       bne repeoff
3098  $1CDB  E6 FE       inc $fe
3099  $1CDD  20 68 1D    jsr ruma02r
3100  $1CE0  4C D2 1C    jmp loo2
3101  $1CE3              repeoff
3102  $1CE3  A0 00       ldy #$00
3103  $1CE5  A5 FE       lda $fe
3104  $1CE7  20 F2 1C    jsr store
3105  $1CEA  A5 FD       lda $fd
3106  $1CEC  20 F2 1C    jsr store
3107  $1CEF  4C 8E 1C    jmp main
3108  $1CF2              
3109  $1CF2              store
3110  $1CF2  91 04       sta ($04),y
3111  $1CF4  4C 96 1D    jmp _add04
3112  $1CF7              
3113  $1CF7              diffchars
3114  $1CF7  A5 F8       lda $f8
3115  $1CF9  A4 F9       ldy $f9
3116  $1CFB  85 02       sta $02
3117  $1CFD  84 03       sty $03
3118  $1CFF  A0 00       ldy #$00
3119  $1D01  84 FE       sty $fe
3120  $1D03  B1 02       lda ($02),y
3121  $1D05  85 FD       sta $fd
3122  $1D07  E6 FE       inc $fe
3123  $1D09  20 7C 1D    jsr ruma02d
3124  $1D0C              
3125  $1D0C  A9 37       setcolo lda #$37
3126  $1D0E  85 01       sta $01
3127  $1D10  EE 20 D0    inc $d020
3128  $1D13  A9 30       lda #$30
3129  $1D15  85 01       sta $01
3130  $1D17  A0 00       ldy #$00
3131  $1D19  B1 02       lda ($02),y
3132  $1D1B  C5 FD       cmp $fd
3133  $1D1D  D0 0F       bne _ed03
3134  $1D1F              _ed02
3135  $1D1F  C8          iny
3136  $1D20  B1 02       lda ($02),y
3137  $1D22  C5 FD       cmp $fd
3138  $1D24  F0 F9       beq _ed02
3139  $1D26  C0 03       cpy #$03
3140  $1D28  B0 0E       bcs _ed01
3141  $1D2A  A0 00       ldy #$00
3142  $1D2C  B1 02       lda ($02),y
3143  $1D2E              _ed03
3144  $1D2E  85 FD       sta $fd
3145  $1D30  E6 FE       inc $fe
3146  $1D32  20 7C 1D    jsr ruma02d
3147  $1D35  4C 0C 1D    jmp setcolo
3148  $1D38              
3149  $1D38              _ed01
3150  $1D38  A5 02       lda $02
3151  $1D3A  38          sec
3152  $1D3B  E9 01       sbc #$01
3153  $1D3D  85 02       sta $02
3154  $1D3F  A5 03       lda $03
3155  $1D41  E9 00       sbc #$00
3156  $1D43  85 03       sta $03
3157  $1D45  C6 FE       dec $fe
3158  $1D47              
3159  $1D47              exitdiff
3160  $1D47  A0 00       ldy #$00
3161  $1D49  A9 FE       lda #REPEAT_CTRL
3162  $1D4B  20 F2 1C    jsr store
3163  $1D4E  A5 FE       lda $fe
3164  $1D50  20 F2 1C    jsr store
3165  $1D53  A6 FE       ldx $fe
3166  $1D55  A0 00       ldy #$00
3167  $1D57              _ed00
3168  $1D57  B1 F8       lda ($f8),y
3169  $1D59  20 F2 1C    jsr store
3170  $1D5C  E6 F8       inc $f8
3171  $1D5E  D0 02       bne *+4
3172  $1D60  E6 F9       inc $f9
3173  $1D62  CA          dex
3174  $1D63  D0 F2       bne _ed00
3175  $1D65  4C 8E 1C    jmp main
3176  $1D68              
3177  $1D68              ruma02r
3178  $1D68  20 8F 1D    jsr _add02
3179  $1D6B  A5 02       lda $02
3180  $1D6D  C9 F3       cmp #PACK_LENGTH
3181  $1D6F  D0 0A       bne ruma02x
3182  $1D71  68          pla
3183  $1D72  68          pla
3184  $1D73  A9 01       lda #$01
3185  $1D75  8D 9D 1D    sta endflag
3186  $1D78  4C E3 1C    jmp repeoff
3187  $1D7B              ruma02x
3188  $1D7B  60          rts
3189  $1D7C              ruma02d
3190  $1D7C  20 8F 1D    jsr _add02
3191  $1D7F  A5 02       lda $02
3192  $1D81  C9 F3       cmp #PACK_LENGTH
3193  $1D83  D0 F6       bne ruma02x
3194  $1D85  68          pla
3195  $1D86  68          pla
3196  $1D87  A9 01       lda #$01
3197  $1D89  8D 9D 1D    sta endflag
3198  $1D8C  4C 47 1D    jmp exitdiff
3199  $1D8F              
3200  $1D8F              _add02
3201  $1D8F  E6 02       inc $02
3202  $1D91  D0 02       bne *+4
3203  $1D93  E6 03       inc $03
3204  $1D95  60          rts
3205  $1D96              
3206  $1D96              _add04
3207  $1D96  E6 04       inc $04
3208  $1D98  D0 02       bne *+4
3209  $1D9A  E6 05       inc $05
3210  $1D9C  60          rts
3211  $1D9D              
3212  $1D9D  00          endflag     !byte 00
3213  $1D9E  00          levelno     !byte 00
3214  $1D9F  00          levelcount  !byte 00
3215  $1DA0  00          levelpage   !byte 00  ;the start page for the levels ($100 per page)
3216  $1DA1  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  !align 255,0
3217  $1E00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  lvldata_lo  !fill $80,0
3218  $1E80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  lvldata_hi  !fill $80,0
3219  $1F00              
3220  $1F00              
3221  $1F00              
3222  $1F00              
3223  $1F00              
3224  $1F00              
3225  $1F00              
3226  $1F00              
3227  $1F00              
3228  $1F00              
3229  $1F00              ;---------------------------
3230  $1F00              ;Get filename for 2x2bled
3231  $1F00              ;
3232  $1F00              ; IN: X=LOADSAVE_* - See bledglobal for definitions
3233  $1F00              
3234  $1F00  00          LoadSave  !byte 0
3235  $1F01  00          CursorPos !byte 0
3236  $1F02              
3237  $1F02  8E 00 1F    GETNAME  stx LoadSave
3238  $1F05  8A          txa
3239  $1F06              
3240  $1F06              ;clear stack
3241  $1F06  A2 12       ldx #18          ;Mapedit: Read 18 values from stack as we came to this routine 'ugly'
3242  $1F08  C9 02       cmp #LOADSAVE_MAPEDIT_LOAD
3243  $1F0A  B0 02       bcs _gn06
3244  $1F0C  A2 10       ldx #16          ;Bled: Read 16 values from stack as we came to this routine 'ugly'
3245  $1F0E  68          _gn06    pla
3246  $1F0F  CA          dex
3247  $1F10  D0 FC       bne _gn06
3248  $1F12              
3249  $1F12  78          sei
3250  $1F13  A9 BA       lda #<IRQ_GETNAME
3251  $1F15  A0 1F       ldy #>IRQ_GETNAME
3252  $1F17  8D 14 03    sta $0314
3253  $1F1A  8C 15 03    sty $0315
3254  $1F1D  A2 7F       ldx #$7F
3255  $1F1F  8E 0D DC    stx $DC0D
3256  $1F22  A2 01       ldx #$01
3257  $1F24  8E 1A D0    stx $d01A
3258  $1F27              
3259  $1F27  A9 0B       lda #$0b
3260  $1F29  20 10 16    jsr clearScreen
3261  $1F2C  20 32 16    jsr setDefaultScreen
3262  $1F2F  A2 1B       ldx #$1B
3263  $1F31  8E 11 D0    stx $d011
3264  $1F34              
3265  $1F34              ;Prepare the filename
3266  $1F34  AD 00 1F    lda LoadSave
3267  $1F37  C9 02       cmp #LOADSAVE_MAPEDIT_LOAD
3268  $1F39  F0 16       beq _gn08                    ;_gn10 - let's autofill the level name for load too
3269  $1F3B  C9 03       cmp #LOADSAVE_MAPEDIT_SAVE
3270  $1F3D  F0 12       beq _gn08
3271  $1F3F              
3272  $1F3F              ;Move the gfx default filename
3273  $1F3F  A0 00       ldy #$00
3274  $1F41  B9 83 1F    _gn09    lda NAME_GFX_DEF,y
3275  $1F44  99 A6 1F    sta FILENAME,y
3276  $1F47  C8          iny
3277  $1F48  C0 10       cpy #FILENAME_LEN
3278  $1F4A  D0 F5       bne _gn09
3279  $1F4C  A2 00       ldx #$00               ;Cursorpos to be 0
3280  $1F4E  4C 5C 1F    jmp _gn07
3281  $1F51              
3282  $1F51              _gn08    ;autofill levelname
3283  $1F51  AD C9 44    lda LevelNum
3284  $1F54  20 99 20    jsr autofillLevelname
3285  $1F57  A2 07       ldx #$07                 ;Cursorpos to be 7 as level## is 7 chars
3286  $1F59  4C 5C 1F    jmp _gn07
3287  $1F5C              
3288  $1F5C  8E 01 1F    _gn07    stx CursorPos          ;move cursor to right position
3289  $1F5F              
3290  $1F5F              ;Print default text to screen
3291  $1F5F  20 66 E5    jsr $E566        ;cursor to 0,0
3292  $1F62              
3293  $1F62  A2 0F       ldx #$0f
3294  $1F64  A9 79       lda #<text_filename
3295  $1F66  A0 1F       ldy #>text_filename
3296  $1F68  20 A4 46    jsr print
3297  $1F6B              
3298  $1F6B              ;reset keypress
3299  $1F6B  A9 00       lda #$00
3300  $1F6D  8D 91 44    sta keypress
3301  $1F70              
3302  $1F70  A9 80       lda #$80
3303  $1F72  8D 12 D0    sta $d012
3304  $1F75              
3305  $1F75  58          cli
3306  $1F76  4C 76 1F    jmp *
3307  $1F79              
3308  $1F79  46 49 4C 45 4E 41 4D 45 3A 00  text_filename !pet "filename:", 0
3309  $1F83              text_filename_end
3310  $1F83              
3311  $1F83              ;0123456789012345
3312  $1F83  20 20 20 20 20 20 20 20 20 20 20 20 2E 32 42 2B  NAME_GFX_DEF          !pet "            .2b+"
3313  $1F93  4C 45 56 45 4C 20 20 20 20 20 20 20 2E 32 4D 2B  NAME_DEF_LEVEL        !pet "level       .2m+"
3314  $1FA3              NAME_DEF_LEVEL_OFFSET = 5
3315  $1FA3              
3316  $1FA3              FILENAME_SCR_PTR  = $0400 + (text_filename_end-text_filename) ;Screen address where the filename is written
3317  $1FA3              FILENAME_DEBUGLINE = FILENAME_SCR_PTR+$50-3
3318  $1FA3              
3319  $1FA3  40 30 3A    FILENAME_SAVE !pet "@0:"              ;Add "@0:" to filename to overwrite - bytes: $40,$30,$3A
3320  $1FA6  30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35  FILENAME      !pet "0123456789012345" ;16 chars
3321  $1FB6              FILENAME_END
3322  $1FB6  2C D0 2C D7  !pet ",P,W"
3323  $1FBA              FILENAME_SAVE_END
3324  $1FBA              FILENAME_LEN        = FILENAME_END-FILENAME
3325  $1FBA              FILENAME_SAVE_LEN   = FILENAME_SAVE_END-FILENAME_SAVE
3326  $1FBA              
3327  $1FBA              ;---------------------------
3328  $1FBA              
3329  $1FBA              IRQ_GETNAME
3330  $1FBA  AD 91 44    lda keypress
3331  $1FBD  C9 00       cmp #$00
3332  $1FBF  D0 03       bne _in01
3333  $1FC1  4C 46 20    jmp _in_print
3334  $1FC4              _in01    ;check for DEL
3335  $1FC4  C9 14       cmp #$14           ;DEL
3336  $1FC6  D0 16       bne _in05
3337  $1FC8              
3338  $1FC8              ;Handle DEL
3339  $1FC8  AE 01 1F    ldx CursorPos
3340  $1FCB  CA          dex
3341  $1FCC  30 0D       bmi _in03
3342  $1FCE  8E 01 1F    stx CursorPos
3343  $1FD1  A9 20       lda #$20           ;print spaces when deleting
3344  $1FD3  9D A6 1F    _in02    sta FILENAME,x
3345  $1FD6  E8          inx
3346  $1FD7  E0 0C       cpx #$0c
3347  $1FD9  D0 F8       bne _in02
3348  $1FDB              
3349  $1FDB  4C 46 20    _in03    jmp _in_print
3350  $1FDE              
3351  $1FDE              _in05    ;check for RET
3352  $1FDE  C9 0D       cmp #$0D           ;RETURN
3353  $1FE0  D0 53       bne _in_keyh_ANY
3354  $1FE2  AE 01 1F    ldx CursorPos
3355  $1FE5  D0 1D       bne _in_keyh_RET   ;Avoids empty filenames and just returns
3356  $1FE7              
3357  $1FE7              ;jmp here to go to the right editor and initialize the IRQ properly
3358  $1FE7  AD 00 1F    _in_end  lda LoadSave
3359  $1FEA  C9 02       cmp #LOADSAVE_MAPEDIT_LOAD
3360  $1FEC  B0 0B       bcs _in30
3361  $1FEE              ;init bled
3362  $1FEE  20 13 44    jsr Initbled
3363  $1FF1  A9 01       lda #S_IRQ_BLED
3364  $1FF3  8D 49 08    sta s_irq
3365  $1FF6  4C 1C 08    jmp START
3366  $1FF9              _in30    ;init mapedit
3367  $1FF9  20 00 44    jsr Initmapedit
3368  $1FFC  A9 03       lda #S_IRQ_MAPEDIT
3369  $1FFE  8D 49 08    sta s_irq
3370  $2001  4C 1C 08    jmp START
3371  $2004              
3372  $2004              ;Handle RET
3373  $2004              _in_keyh_RET
3374  $2004  AE 00 1F    ldx LoadSave
3375  $2007  E0 00       cpx #LOADSAVE_BLED_LOAD
3376  $2009  D0 06       bne _in12
3377  $200B  20 EA 20    jsr gfx_Load_ffd5
3378  $200E  4C E7 1F    jmp _in_end
3379  $2011  E0 01       _in12    cpx #LOADSAVE_BLED_SAVE
3380  $2013  D0 06       bne _in13
3381  $2015              ;jsr gfx_Save
3382  $2015  20 26 21    jsr gfx_Save_ffd8
3383  $2018  4C E7 1F    jmp _in_end
3384  $201B  E0 02       _in13    cpx #LOADSAVE_MAPEDIT_LOAD
3385  $201D  D0 09       bne _in14
3386  $201F  20 7A 21    jsr level_Load_ffd5
3387  $2022  20 B3 15    jsr levelRelocate
3388  $2025  4C E7 1F    jmp _in_end
3389  $2028  E0 03       _in14    cpx #LOADSAVE_MAPEDIT_SAVE
3390  $202A  D0 06       bne _in15
3391  $202C  20 98 21    jsr level_Save_ffd8
3392  $202F  4C E7 1F    jmp _in_end
3393  $2032  4C 43 08    _in15    jmp error
3394  $2035              
3395  $2035              ;Handle keys
3396  $2035              _in_keyh_ANY
3397  $2035  AE 01 1F    ldx CursorPos
3398  $2038  9D A6 1F    sta FILENAME,x     ;print PETSCII
3399  $203B              ;move cursor
3400  $203B  AE 01 1F    ldx CursorPos
3401  $203E  E0 0B       cpx #$0B
3402  $2040  F0 04       beq *+6
3403  $2042  E8          inx
3404  $2043  8E 01 1F    stx CursorPos
3405  $2046              
3406  $2046              ;Print information to screen
3407  $2046              _in_print
3408  $2046              ;print cursor
3409  $2046  AE 01 1F    ldx CursorPos
3410  $2049  A9 63       lda #$63
3411  $204B  9D 32 04    sta FILENAME_SCR_PTR+$28,x        ;print a cursor on second line
3412  $204E  A9 01       lda #$01
3413  $2050  9D 32 D8    sta FILENAME_SCR_PTR+$28+$d400,x  ;print a cursor color
3414  $2053  A9 20       lda #$20
3415  $2055  9D 31 04    sta FILENAME_SCR_PTR+$27,x        ;clear cursor left and right
3416  $2058  9D 33 04    sta FILENAME_SCR_PTR+$29,x
3417  $205B              
3418  $205B              ;Print filename
3419  $205B  A2 00       ldx #$00
3420  $205D  BD A6 1F    _in11    lda FILENAME,x
3421  $2060  C9 40       cmp #$40
3422  $2062  90 03       bcc _in00
3423  $2064  38          sec
3424  $2065  E9 40       sbc #$40
3425  $2067  9D 0A 04    _in00    sta FILENAME_SCR_PTR,x             ;print screencodes
3426  $206A  A9 01       lda #$01
3427  $206C  9D 0A D8    sta FILENAME_SCR_PTR + $d400,x
3428  $206F  E8          inx
3429  $2070  E0 10       cpx #(FILENAME_END - FILENAME)
3430  $2072  D0 E9       bne _in11
3431  $2074              
3432  $2074              !ifdef DEBUG {
3433  $2074              ;DEBUG information
3434  $2074  A2 00       ldx #$00
3435  $2076  BD A3 1F    _in16    lda FILENAME_SAVE,x
3436  $2079  9D 57 04    sta FILENAME_DEBUGLINE,x
3437  $207C  A9 0C       lda #$0c
3438  $207E  9D 57 D8    sta FILENAME_DEBUGLINE + $d400,x
3439  $2081  E8          inx
3440  $2082  E0 17       cpx #(FILENAME_SAVE_END - FILENAME_SAVE)
3441  $2084  D0 F0       bne _in16
3442  $2086              }
3443  $2086  A2 01       ldx #$01
3444  $2088  8E 19 D0    stx $d019
3445  $208B  20 E4 FF    jsr $ffe4
3446  $208E  8D 91 44    sta keypress
3447  $2091              ;         beq _in16
3448  $2091              ;         nop
3449  $2091              ;_in16
3450  $2091  A9 80       lda #$80
3451  $2093  8D 12 D0    sta $d012
3452  $2096  4C 31 EA    jmp $EA31
3453  $2099              
3454  $2099              ;-----------------------------
3455  $2099              ;autofillLevelname
3456  $2099              ;
3457  $2099              ; Autofill the levelname to FILENAME to include the current level number.
3458  $2099              ;
3459  $2099              ; IN: A = Levelnumber to autofill
3460  $2099              
3461  $2099              autofillLevelname
3462  $2099              ;convert to BCD
3463  $2099  20 04 47    jsr hexToBcd
3464  $209C  48          pha
3465  $209D  4A          lsr
3466  $209E  4A          lsr
3467  $209F  4A          lsr
3468  $20A0  4A          lsr
3469  $20A1  A8          tay
3470  $20A2  B9 A9 44    lda Numchars,y
3471  $20A5  8D 98 1F    sta NAME_DEF_LEVEL+NAME_DEF_LEVEL_OFFSET+0
3472  $20A8  68          pla
3473  $20A9  29 0F       and #%1111
3474  $20AB  A8          tay
3475  $20AC  B9 A9 44    lda Numchars,y
3476  $20AF  8D 99 1F    sta NAME_DEF_LEVEL+NAME_DEF_LEVEL_OFFSET+1
3477  $20B2              
3478  $20B2              ;Move the fixed name to be FILENAME
3479  $20B2  A2 00       ldx #$00
3480  $20B4  BD 93 1F    _afll0   lda NAME_DEF_LEVEL,x
3481  $20B7  9D A6 1F    sta FILENAME,x
3482  $20BA  E8          inx
3483  $20BB  E0 10       cpx #FILENAME_LEN
3484  $20BD  D0 F5       bne _afll0
3485  $20BF              
3486  $20BF  60          rts
3487  $20C0              
3488  $20C0              ;------------------------------------
3489  $20C0              ;Load/save routines
3490  $20C0              
3491  $20C0              ;Load gfx/map
3492  $20C0              ;
3493  $20C0              ;OUT: A=0 - no errors
3494  $20C0              ;     A=$ff - error
3495  $20C0              
3496  $20C0              ;------------------------------------
3497  $20C0              ;Loads graphics from disc with kernal function $ffd5
3498  $20C0              
3499  $20C0  20 67 09    gfx_Load jsr NOIRQ
3500  $20C3              
3501  $20C3              ;set the load filename
3502  $20C3  A9 10       lda #FILENAME_LEN
3503  $20C5  A2 A6       ldx #<FILENAME
3504  $20C7  A0 1F       ldy #>FILENAME
3505  $20C9  20 9B 45    jsr LOAD_init
3506  $20CC  F0 03       beq *+5                ;no error
3507  $20CE  4C BD 21    jmp fileErrorHandler
3508  $20D1              
3509  $20D1  A2 F8       ldx #<FDAT_SAVE_START  ;ALKU
3510  $20D3  A0 2F       ldy #>FDAT_SAVE_START
3511  $20D5  86 02       stx $02
3512  $20D7  84 03       sty $03
3513  $20D9              
3514  $20D9  A9 00       lda #$00               ;Load the full file
3515  $20DB  85 04       sta $04
3516  $20DD  A9 00       lda #$00
3517  $20DF  85 05       sta $05
3518  $20E1              
3519  $20E1  20 E4 45    jsr LOAD_file
3520  $20E4  F0 03       beq *+5                ;no error
3521  $20E6  4C BD 21    jmp fileErrorHandler
3522  $20E9  60          rts
3523  $20EA              
3524  $20EA              ;------------------------------------
3525  $20EA              ;Loads graphics from disc with kernal function $ffd5
3526  $20EA              
3527  $20EA              gfx_Load_ffd5
3528  $20EA  20 67 09    jsr NOIRQ
3529  $20ED              
3530  $20ED  A9 10       lda #FILENAME_LEN
3531  $20EF  A2 A6       ldx #<FILENAME
3532  $20F1  A0 1F       ldy #>FILENAME
3533  $20F3  20 B8 45    jsr LOAD_init_ffd5
3534  $20F6              
3535  $20F6              ;Level is loaded to MAP and moved to right place
3536  $20F6  A2 F8       ldx #<FDAT_SAVE_START
3537  $20F8  A0 2F       ldy #>FDAT_SAVE_START
3538  $20FA  20 DE 45    jsr LOAD_ffd5
3539  $20FD  B0 01       bcs _lg_error
3540  $20FF  18          clc
3541  $2100              _lg_error
3542  $2100  60          rts
3543  $2101              
3544  $2101              ;------------------------------------
3545  $2101              ;Save gfx
3546  $2101              
3547  $2101  20 67 09    gfx_Save jsr NOIRQ
3548  $2104              
3549  $2104              ;set the save filename
3550  $2104  A9 17       lda #FILENAME_SAVE_LEN
3551  $2106  A2 A3       ldx #<FILENAME_SAVE
3552  $2108  A0 1F       ldy #>FILENAME_SAVE
3553  $210A  20 7E 45    jsr SAVE_init
3554  $210D              
3555  $210D  A2 F8       ldx #<FDAT_SAVE_START  ;ALKU
3556  $210F  A0 2F       ldy #>FDAT_SAVE_START
3557  $2111  86 02       stx $02
3558  $2113  84 03       sty $03
3559  $2115              
3560  $2115  A2 00       ldx #<FDAT_SAVE_END    ;LOPPU
3561  $2117  A0 40       ldy #>FDAT_SAVE_END
3562  $2119  86 04       stx $04
3563  $211B  84 05       sty $05
3564  $211D              
3565  $211D  20 39 46    jsr SAVE_file
3566  $2120  F0 03       beq *+5                ;no error
3567  $2122  4C BD 21    jmp fileErrorHandler
3568  $2125  60          rts
3569  $2126              
3570  $2126              gfx_Save_ffd8
3571  $2126  20 67 09    jsr NOIRQ
3572  $2129              
3573  $2129              ;set the save filename
3574  $2129  A9 17       lda #FILENAME_SAVE_LEN
3575  $212B  A2 A3       ldx #<FILENAME_SAVE
3576  $212D  A0 1F       ldy #>FILENAME_SAVE
3577  $212F  20 C9 45    jsr SAVE_init_ffd8
3578  $2132              
3579  $2132  A2 F8       ldx #<FDAT_SAVE_START       ;ALKU
3580  $2134  A0 2F       ldy #>FDAT_SAVE_START
3581  $2136  86 FB       stx $FB
3582  $2138  84 FC       sty $FC
3583  $213A  A9 FB       lda #$FB
3584  $213C  A2 00       ldx #<FDAT_SAVE_END
3585  $213E  A0 40       ldy #>FDAT_SAVE_END
3586  $2140  20 D8 FF    jsr $ffd8      ;SAVE
3587  $2143  B0 75       bcs _s_error
3588  $2145  A9 00       lda #$00
3589  $2147  60          rts
3590  $2148              
3591  $2148              ;------------------------------------
3592  $2148              ;Loads one level file from disc
3593  $2148              
3594  $2148              level_Load
3595  $2148  20 67 09    jsr NOIRQ
3596  $214B              
3597  $214B  A9 10       lda #FILENAME_LEN
3598  $214D  A2 A6       ldx #<FILENAME
3599  $214F  A0 1F       ldy #>FILENAME
3600  $2151  20 9B 45    jsr LOAD_init
3601  $2154  F0 03       beq *+5                ;no error
3602  $2156  4C BD 21    jmp fileErrorHandler
3603  $2159  20 62 21    jsr LoadLevelFile
3604  $215C  F0 03       beq *+5                ;no error
3605  $215E  4C BD 21    jmp fileErrorHandler
3606  $2161  60          rts
3607  $2162              
3608  $2162              LoadLevelFile
3609  $2162              ;load address is set as ($YYXX)
3610  $2162              ;By default we load to LEVEL01 address. The data needs to be moved to MAP.
3611  $2162  A2 00       ldx #<MAP_LEVELS
3612  $2164  A9 49       lda #>MAP_LEVELS
3613  $2166  18          clc
3614  $2167  6D C9 44    adc LevelNum
3615  $216A  86 02       stx $02
3616  $216C  85 03       sta $03
3617  $216E              ;         ldx #<MAP_SIZE
3618  $216E              ;         lda #>MAP_SIZE
3619  $216E  A2 00       ldx #$00         ;Filesize set to $0000 to load to the end of file
3620  $2170  A9 00       lda #$00
3621  $2172  86 04       stx $04
3622  $2174  85 05       sta $05
3623  $2176  20 E4 45    jsr LOAD_file    ;error handling is handled outside LoadLevelFile
3624  $2179  60          rts
3625  $217A              
3626  $217A              ;------------------------------------
3627  $217A              ;Loads one level file from disc with kernal function $ffd5
3628  $217A              
3629  $217A              level_Load_ffd5
3630  $217A  20 67 09    jsr NOIRQ
3631  $217D              
3632  $217D  A9 10       lda #FILENAME_LEN
3633  $217F  A2 A6       ldx #<FILENAME
3634  $2181  A0 1F       ldy #>FILENAME
3635  $2183  20 B8 45    jsr LOAD_init_ffd5
3636  $2186  20 8A 21    jsr LoadLevelFile_ffd5
3637  $2189  60          rts
3638  $218A              
3639  $218A              LoadLevelFile_ffd5
3640  $218A              ;Level is loaded to MAP and moved to right place
3641  $218A  A2 00       ldx #<MAP
3642  $218C  A0 48       ldy #>MAP
3643  $218E  20 DE 45    jsr LOAD_ffd5
3644  $2191  B0 04       bcs _llf_error
3645  $2193  20 92 15    jsr mapStore
3646  $2196  18          clc
3647  $2197              _llf_error
3648  $2197  60          rts
3649  $2198              
3650  $2198              ;------------------------------------
3651  $2198              ;Save map
3652  $2198              ;
3653  $2198              ; returns: A=0 for success, A=$ff for error
3654  $2198              
3655  $2198              level_Save_ffd8
3656  $2198  20 67 09    jsr NOIRQ
3657  $219B              
3658  $219B              ;set the save filename
3659  $219B  A9 17       lda #FILENAME_SAVE_LEN
3660  $219D  A2 A3       ldx #<FILENAME_SAVE
3661  $219F  A0 1F       ldy #>FILENAME_SAVE
3662  $21A1  20 C9 45    jsr SAVE_init_ffd8
3663  $21A4              
3664  $21A4  A2 00       ldx #<MAP       ;ALKU
3665  $21A6  A0 48       ldy #>MAP
3666  $21A8  86 FB       stx $FB
3667  $21AA  84 FC       sty $FC
3668  $21AC  A9 FB       lda #$FB
3669  $21AE  A2 FF       ldx #<(MAP+$ff)
3670  $21B0  A0 48       ldy #>(MAP+$ff)
3671  $21B2  20 D8 FF    jsr $ffd8      ;SAVE
3672  $21B5  B0 03       bcs _s_error
3673  $21B7  A9 00       lda #$00
3674  $21B9  60          rts
3675  $21BA              
3676  $21BA              _s_error ; Accumulator contains BASIC error code
3677  $21BA              ; most likely errors:
3678  $21BA              ; A = $05 (DEVICE NOT PRESENT)
3679  $21BA              ; A = $04 (FILE NOT FOUND)
3680  $21BA              ; A = $1D (LOAD ERROR)
3681  $21BA              ; A = $00 (BREAK, RUN/STOP has been pressed during loading)
3682  $21BA  A9 FF       lda #$ff
3683  $21BC  60          rts
3684  $21BD              
3685  $21BD              ;------------------------
3686  $21BD              ;Error handler
3687  $21BD              
3688  $21BD              fileErrorHandler
3689  $21BD              
3690  $21BD              ; Accumulator contains BASIC error code
3691  $21BD              ; most likely errors:
3692  $21BD              ; A = $05 (DEVICE NOT PRESENT)
3693  $21BD              ; A = $04 (FILE NOT FOUND)
3694  $21BD              ; A = $1D (LOAD ERROR)
3695  $21BD              ; A = $00 (BREAK, RUN/STOP has been pressed during loading)
3696  $21BD              
3697  $21BD  48          pha          ;store error
3698  $21BE              
3699  $21BE  A2 36       ldx #$36
3700  $21C0  86 01       stx $01
3701  $21C2              
3702  $21C2  A9 0B       lda #$0b
3703  $21C4  20 10 16    jsr clearScreen
3704  $21C7              
3705  $21C7  20 66 E5    jsr $E566        ;cursor to 0,0
3706  $21CA              
3707  $21CA  A2 0F       ldx #$0f
3708  $21CC  A9 DF       lda #<text_fileerror
3709  $21CE  A0 21       ldy #>text_fileerror
3710  $21D0  20 A4 46    jsr print
3711  $21D3              
3712  $21D3  68          pla
3713  $21D4  20 BA 46    jsr print_number_hex
3714  $21D7              
3715  $21D7  20 E4 FF    jsr $ffe4
3716  $21DA  F0 FB       beq *-3
3717  $21DC              
3718  $21DC  A9 FF       lda #$ff     ;load failure
3719  $21DE  60          rts
3720  $21DF              
3721  $21DF  46 49 4C 45 20 45 52 52 4F 52 3A 20 24 00  text_fileerror !pet "file error: $",0
3722  $21ED              
3723  $21ED              ;------------------------------------
3724  $21ED              ;Load all levels named 'LEVEL##    .2M+' in order.
3725  $21ED              
3726  $21ED  42 41 54 43 48 20 4C 4F 41 44 49 4E 47 20 4C 45 56 45 4C 53 2E  text_mload1 !pet "batch loading levels."
3727  $2202  0D 52 45 44 20 4D 41 52 4B 20 49 53 20 46 41 49 4C 55 52 45 2E  !pet $d, "red mark is failure."
3728  $2217  0D 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 00  !pet $d, "...............", 0
3729  $2228              
3730  $2228              level_LoadAll
3731  $2228  20 67 09    jsr NOIRQ
3732  $222B              
3733  $222B              ;clear stack
3734  $222B  A2 0E       ldx #14          ;Read 14 values from stack as we came to this routine 'ugly'
3735  $222D  68          _mlb4    pla
3736  $222E  CA          dex
3737  $222F  D0 FC       bne _mlb4
3738  $2231              
3739  $2231  20 10 16    jsr clearScreen
3740  $2234  20 32 16    jsr setDefaultScreen
3741  $2237              
3742  $2237  20 66 E5    jsr $E566        ;cursor to 0,0
3743  $223A              
3744  $223A  A2 0B       ldx #$0b           ;set cursor color
3745  $223C  A9 ED       lda #<text_mload1
3746  $223E  A0 21       ldy #>text_mload1
3747  $2240  20 A4 46    jsr print
3748  $2243              
3749  $2243              ;We're loading maps.
3750  $2243  A9 02       lda #LOADSAVE_MAPEDIT_LOAD
3751  $2245  8D 00 1F    sta LoadSave
3752  $2248              
3753  $2248              ;set cursor position
3754  $2248  A2 03       ldx #03
3755  $224A  A0 00       ldy #00
3756  $224C  20 E0 46    jsr set_cursor
3757  $224F              
3758  $224F  A2 00       ldx #00
3759  $2251  8E C9 44    stx LevelNum
3760  $2254              
3761  $2254  AD C9 44    _mlb1    lda LevelNum
3762  $2257  20 99 20    jsr autofillLevelname
3763  $225A              
3764  $225A              !ifdef DEBUG {
3765  $225A  A0 00       ldy #$00
3766  $225C  B9 A6 1F    _mlb0    lda FILENAME,y
3767  $225F  99 50 04    sta $0400+$50,y
3768  $2262  C8          iny
3769  $2263  C0 10       cpy #FILENAME_LEN
3770  $2265  D0 F5       bne _mlb0
3771  $2267              }
3772  $2267              ;jsr initFilenameAndDevice
3773  $2267              ;jsr MLOAD2
3774  $2267  A9 10       lda #FILENAME_LEN
3775  $2269  A2 A6       ldx #<FILENAME
3776  $226B  A0 1F       ldy #>FILENAME
3777  $226D  20 B8 45    jsr LOAD_init_ffd5
3778  $2270  20 8A 21    jsr LoadLevelFile_ffd5
3779  $2273  B0 05       bcs _mlb3
3780  $2275              
3781  $2275  A9 01       lda #$01       ;no error - set color white
3782  $2277  4C 7C 22    jmp _mlb2
3783  $227A  A9 02       _mlb3    lda #$02       ;load error - set color red
3784  $227C              
3785  $227C              ;         jsr LOAD_init
3786  $227C              ;         jsr LoadLevelFile
3787  $227C              ;         tay
3788  $227C              ;         lda #$01       ;no error - set color white
3789  $227C              ;         cpy #$00
3790  $227C              ;         beq _mlb2
3791  $227C              ;         lda #$02       ;load error - set color red
3792  $227C              
3793  $227C              ;Draw some progressbar
3794  $227C  20 E8 46    _mlb2    jsr set_color
3795  $227F              
3796  $227F              ;delay .. this is needed as otherwise multiload will fail
3797  $227F  A9 80       lda #$80
3798  $2281  CD 12 D0    cmp $d012
3799  $2284  D0 FB       bne *-3
3800  $2286              
3801  $2286  AD C9 44    lda LevelNum
3802  $2289  20 EC 46    jsr print_number
3803  $228C  A9 28       lda #"("
3804  $228E  20 9A 46    jsr print_char
3805  $2291  A9 24       lda #"$"
3806  $2293  20 9A 46    jsr print_char
3807  $2296  AD C9 44    lda LevelNum
3808  $2299  18          clc
3809  $229A  69 49       adc #>MAP_LEVELS
3810  $229C  20 BA 46    jsr print_number_hex
3811  $229F  A9 00       lda #$00
3812  $22A1  20 BA 46    jsr print_number_hex
3813  $22A4  A9 29       lda #")"
3814  $22A6  20 9A 46    jsr print_char
3815  $22A9  A9 2C       lda #","
3816  $22AB  20 9A 46    jsr print_char
3817  $22AE              
3818  $22AE              ;delay .. this is needed as otherwise multiload will fail
3819  $22AE  A9 80       lda #$80
3820  $22B0  CD 12 D0    cmp $d012
3821  $22B3  D0 FB       bne *-3
3822  $22B5              
3823  $22B5  EE C9 44    inc LevelNum
3824  $22B8  AD C9 44    lda LevelNum
3825  $22BB  C9 64       cmp #100
3826  $22BD  D0 95       bne _mlb1
3827  $22BF              
3828  $22BF              ;return to editor to level 00
3829  $22BF  A2 00       ldx #$00
3830  $22C1  8E C9 44    stx LevelNum
3831  $22C4  20 B3 15    jsr levelRelocate
3832  $22C7              
3833  $22C7  4C E7 1F    jmp _in_end
3834  $22CA              
3835  $22CA              ;------------------------------------
3836  $22CA              ;Shows the file directory
3837  $22CA              
3838  $22CA              FileDirectory_Show
3839  $22CA  20 67 09    jsr NOIRQ
3840  $22CD              
3841  $22CD  A2 0A       ldx #10            ;Read 10 values from stack as we came to this routine 'ugly'
3842  $22CF  68          _dir01   pla
3843  $22D0  CA          dex
3844  $22D1  D0 FC       bne _dir01
3845  $22D3              
3846  $22D3  A9 37       lda #$37           ;we need basic for printing
3847  $22D5  85 01       sta $01
3848  $22D7              
3849  $22D7  20 10 16    jsr clearScreen
3850  $22DA  20 32 16    jsr setDefaultScreen
3851  $22DD              
3852  $22DD  20 F3 22    jsr DIR_show
3853  $22E0              
3854  $22E0  AD 49 08    lda s_irq
3855  $22E3  C9 01       cmp #S_IRQ_BLED
3856  $22E5  D0 06       bne _dir00
3857  $22E7  20 13 44    jsr Initbled
3858  $22EA  4C 1C 08    jmp START
3859  $22ED              
3860  $22ED  20 00 44    _dir00   jsr Initmapedit
3861  $22F0  4C 1C 08    jmp START
3862  $22F3              
3863  $22F3              ;-----------------------------
3864  $22F3              ;Show directory
3865  $22F3              
3866  $22F3              DIR_show
3867  $22F3  20 66 E5    jsr $E566          ;set cursor to 0,0
3868  $22F6              
3869  $22F6  A9 49       lda #73
3870  $22F8  20 C3 FF    jsr $FFC3
3871  $22FB  A9 49       lda #73
3872  $22FD  A2 08       ldx #$08
3873  $22FF  A0 60       ldy #$60     ;0
3874  $2301  20 BA FF    jsr $FFBA
3875  $2304  A9 01       lda #1
3876  $2306  A2 86       ldx #<DIRNAME
3877  $2308  A0 23       ldy #>DIRNAME
3878  $230A  20 BD FF    jsr $FFBD
3879  $230D  20 C0 FF    jsr $FFC0
3880  $2310  A2 49       ldx #73
3881  $2312  20 C6 FF    jsr $FFC6
3882  $2315  20 CF FF    jsr $FFCF
3883  $2318  20 CF FF    jsr $FFCF
3884  $231B  20 CF FF    DLINE    jsr $FFCF
3885  $231E  20 CF FF    jsr $FFCF
3886  $2321  C9 00       cmp #$00
3887  $2323  F0 51       beq DIREND
3888  $2325  20 CC FF    jsr $FFCC
3889  $2328              
3890  $2328  A2 49       ldx #73
3891  $232A  20 C6 FF    jsr $FFC6
3892  $232D  A2 05       ldx #$05
3893  $232F  8E 86 02    stx $0286
3894  $2332  A6 D6       ldx $D6
3895  $2334  A0 00       ldy #$00
3896  $2336  18          clc
3897  $2337  20 F0 FF    jsr $FFF0
3898  $233A  20 CF FF    jsr $FFCF
3899  $233D  A8          tay
3900  $233E  20 CF FF    jsr $FFCF
3901  $2341  48          pha
3902  $2342  98          tya
3903  $2343  AA          tax
3904  $2344  68          pla
3905  $2345  20 CD BD    jsr $BDCD
3906  $2348              
3907  $2348  20 CF FF    DSKIP    jsr $FFCF
3908  $234B  C9 22       cmp #$22
3909  $234D  F0 F9       beq DSKIP
3910  $234F  48          pha
3911  $2350  A2 0F       ldx #$0F
3912  $2352  8E 86 02    stx $0286
3913  $2355  A6 D6       ldx $D6
3914  $2357  A0 04       ldy #$04
3915  $2359  18          clc
3916  $235A  20 F0 FF    jsr $FFF0
3917  $235D  68          pla
3918  $235E  4C 64 23    jmp DOVER
3919  $2361  20 CF FF    DNEXT    jsr $FFCF
3920  $2364  C9 00       DOVER    cmp #$00
3921  $2366  F0 06       beq D1001
3922  $2368  20 D2 FF    jsr $FFD2
3923  $236B  4C 61 23    jmp DNEXT
3924  $236E  A9 0D       D1001    lda #13
3925  $2370  20 D2 FF    jsr $FFD2
3926  $2373  4C 1B 23    jmp DLINE
3927  $2376              
3928  $2376  A9 49       DIREND   lda #73
3929  $2378  20 C3 FF    jsr $FFC3
3930  $237B  20 CC FF    jsr $FFCC
3931  $237E              
3932  $237E  AE 01 DC    ldx $DC01
3933  $2381  E0 EF       cpx #$EF
3934  $2383  D0 F9       bne *-5
3935  $2385  60          rts
3936  $2386              
3937  $2386  24          DIRNAME  !pet "$"
3938  $2387              ;
3939  $4400              * = CODE_2
3940  $4400              
3941  $4400              ;-------------------------------
3942  $4400              ;Initialize mapedit screen
3943  $4400              
3944  $4400              Initmapedit
3945  $4400  20 10 16    jsr clearScreen
3946  $4403              
3947  $4403  A2 00       ldx #$00
3948  $4405  8E 93 44    stx MRETURN
3949  $4408              
3950  $4408  20 B3 15    jsr levelRelocate
3951  $440B              
3952  $440B  EE 94 44    inc UpdateMapscreen
3953  $440E  60          rts
3954  $440F              
3955  $440F              ;-------------------------------
3956  $440F              ;Initialize help screen
3957  $440F              ;
3958  $440F              ; This is used both by bled and mapedit
3959  $440F              
3960  $440F              Inithelp
3961  $440F  20 10 16    jsr clearScreen
3962  $4412  60          rts
3963  $4413              
3964  $4413              ;-------------------------------
3965  $4413              ;Initialize bled screen
3966  $4413              
3967  $4413              Initbled ;sei
3968  $4413  A2 00       ldx #$00
3969  $4415  BD 00 40    INILOOP1 lda BLEDSCREEN,x
3970  $4418  9D 00 04    sta $0400,x
3971  $441B  BD 00 41    lda BLEDSCREEN+$100,x
3972  $441E  9D 00 05    sta $0500,x
3973  $4421  BD 00 42    lda BLEDSCREEN+$200,x
3974  $4424  9D 00 06    sta $0600,x
3975  $4427  BD 00 43    lda BLEDSCREEN+$300,x
3976  $442A  9D 00 07    sta $0700,x
3977  $442D  A9 00       lda #$00
3978  $442F  9D 00 D8    sta $D800,x
3979  $4432  9D 00 D9    sta $D900,x
3980  $4435  9D 00 DA    sta $DA00,x
3981  $4438  9D 00 DB    sta $DB00,x
3982  $443B              ;         sta $D9D0,x
3983  $443B  E8          inx
3984  $443C  D0 D7       bne INILOOP1
3985  $443E              
3986  $443E              ;draw the font data colors on screen
3987  $443E  A2 00       ldx #$00
3988  $4440  BC 00 38    INILOOP2 ldy BDAT0,x
3989  $4443  BD 00 3C    lda BCOL0,x
3990  $4446  99 D0 DA    sta FD8PLC,y
3991  $4449  BC 00 39    ldy BDAT1,x
3992  $444C  BD 00 3D    lda BCOL1,x
3993  $444F  99 D0 DA    sta FD8PLC,y
3994  $4452  BC 00 3A    ldy BDAT2,x
3995  $4455  BD 00 3E    lda BCOL2,x
3996  $4458  99 D0 DA    sta FD8PLC,y
3997  $445B  BC 00 3B    ldy BDAT3,x
3998  $445E  BD 00 3F    lda BCOL3,x
3999  $4461  99 D0 DA    sta FD8PLC,y
4000  $4464  E8          inx
4001  $4465  D0 D9       bne INILOOP2
4002  $4467              
4003  $4467              ;color the credits
4004  $4467              ;         ldx #$00
4005  $4467              ;INILOOP3 lda #$0b
4006  $4467              ;         sta $D820,x
4007  $4467              ;         sta $D848,x
4008  $4467              ;         sta $D870,x
4009  $4467              ;         sta $D898,x
4010  $4467              ;         sta $D8C0,x
4011  $4467              ;         sta $D8E8,x
4012  $4467              ;         sta $D910,x
4013  $4467              ;         sta $D938,x
4014  $4467              ;         sta $D960,x
4015  $4467              ;         inx
4016  $4467              ;         cpx #$07
4017  $4467              ;         bne INILOOP3
4018  $4467              
4019  $4467  A2 0F       ldx #%00001111
4020  $4469  8E 15 D0    stx $d015
4021  $446C  A2 01       ldx #$01
4022  $446E  8E 27 D0    stx $d027 ;OUTO SPR
4023  $4471  8E 28 D0    stx $d028 ;PLOT SPR
4024  $4474              
4025  $4474  A2 80       ldx #$80
4026  $4476  8E 8A 02    stx $028A
4027  $4479              
4028  $4479  A2 B4       ldx #$B4
4029  $447B  8E 02 D0    stx $d002
4030  $447E  A2 BB       ldx #$BB
4031  $4480  8E 03 D0    stx $d003
4032  $4483  A2 B9       ldx #(SPRITE-$40)/$40
4033  $4485  8E F9 07    stx $07F9
4034  $4488  A2 BA       ldx #(SPRITE)/$40
4035  $448A  8E FA 07    stx $07FA
4036  $448D  8E FB 07    stx $07FB
4037  $4490              ;cli
4038  $4490  60          rts
4039  $4491              
4040  $4491              ;Common data
4041  $4491              
4042  $4491  00          keypress !byte 0
4043  $4492              
4044  $4492  00          RETURN   !byte 0          ;flip-flop for bled
4045  $4493  00          MRETURN  !byte 0          ;flip-flop for mapedit
4046  $4494  00          UpdateMapscreen !byte 0   ;A request to update map screen. If !=0 the screen will update.
4047  $4495              
4048  $4495  00 00 00 00 00 00 00 00  BCOPYTEMP !byte 0,0,0,0,0,0,0,0
4049  $449D              
4050  $449D  00 00 00 00  COLORS   !byte 0,0,0,0
4051  $44A1  00          MARKCOLOR !byte $00
4052  $44A2  00          TEMP     !byte $00
4053  $44A3              
4054  $44A3              ;Mapeditor data
4055  $44A3              
4056  $44A3  00          MAPX     !byte 0
4057  $44A4  00          MAPY     !byte 0
4058  $44A5              
4059  $44A5  00          TEMP1    !byte 0
4060  $44A6  00          TEMP2    !byte 0
4061  $44A7  00          TEMP3    !byte 0
4062  $44A8              
4063  $44A8  00          RowCount !byte 0
4064  $44A9  30 31 32 33 34 35 36 37 38 39 01 02 03 04 05 06  Numchars        !scr "0123456789abcdef"
4065  $44B9  B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 81 82 83 84 85 86  NumcharsReverse !byte $B0,$B1,$B2,$B3,$B4,$B5,$B6,$B7,$B8,$B9,$81,$82,$83,$84,$85,$86
4066  $44C9              
4067  $44C9  00          LevelNum !byte 0    ;the number of level we're editing
4068  $44CA  00          BlockNum !byte 0    ;the active block
4069  $44CB              
4070  $44CB              X20      = MAP/$0100
4071  $44CB  00 14 28 3C  KER20LO  !byte $00,$14,$28,$3C
4072  $44CF  50 64 78 8C  !byte $50,$64,$78,$8C
4073  $44D3  A0 B4 C8 DC  !byte $A0,$B4,$C8,$DC
4074  $44D7  F0 04 18 2C  !byte $F0,$04,$18,$2C
4075  $44DB  40 54 68 7C  !byte $40,$54,$68,$7C
4076  $44DF              
4077  $44DF  48 48 48 48  KER20HI  !byte X20+0,X20+0,X20+0,X20+0
4078  $44E3  48 48 48 48  !byte X20+0,X20+0,X20+0,X20+0
4079  $44E7  48 48 48 48  !byte X20+0,X20+0,X20+0,X20+0
4080  $44EB  48 49 49 49  !byte X20+0,X20+1,X20+1,X20+1
4081  $44EF  49 49 49 49  !byte X20+1,X20+1,X20+1,X20+1
4082  $44F3              
4083  $44F3              ;---DATAS---
4084  $44F3              
4085  $44F3  38 40       SPRY     !byte $38,$40
4086  $44F5  48 50 58 60 68 70  !byte $48,$50,$58,$60,$68,$70
4087  $44FB  78 80 88 90 98 A0  !byte $78,$80,$88,$90,$98,$A0
4088  $4501  A8 B0 B8 C0 C8 D0  !byte $A8,$B0,$B8,$C0,$C8,$d0
4089  $4507  D8 E0 E8 F0 F8 00  !byte $D8,$E0,$E8,$F0,$F8,$00
4090  $450D              
4091  $450D  20 28       SPRX     !byte $20,$28
4092  $450F  30 38 40 48 50 58  !byte $30,$38,$40,$48,$50,$58
4093  $4515  60 68 70 78 80 88  !byte $60,$68,$70,$78,$80,$88
4094  $451B  90 98 A0 A8 B0 B8  !byte $90,$98,$A0,$A8,$B0,$B8
4095  $4521  C0 C8 D0 D8 E0 E8  !byte $C0,$C8,$d0,$D8,$E0,$E8
4096  $4527  F0 F8 00 08 10 18  !byte $F0,$F8,$00,$08,$10,$18
4097  $452D  20 28 30 38 40 48  !byte $20,$28,$30,$38,$40,$48
4098  $4533  50 58       !byte $50,$58
4099  $4535              
4100  $4535  00 28 50 78 A0  SCRYLOPLC !byte $00,$28,$50,$78,$A0
4101  $453A  C8 F0 18 40 68  !byte $C8,$F0,$18,$40,$68
4102  $453F  90 B8 E0 08 30  !byte $90,$B8,$E0,$08,$30
4103  $4544  58 80 A8 D0 F8  !byte $58,$80,$A8,$d0,$F8
4104  $4549  20 48 70 98 C0  !byte $20,$48,$70,$98,$C0
4105  $454E              
4106  $454E              ;--------------------------------------------
4107  $454E              ;For use with C/V
4108  $454E  00 00 00 00 00 00 00 00  COPYTEMP !byte 0,0,0,0,0,0,0,0    ;single char copy
4109  $4556              
4110  $4556              ;For use with C=+C/C=+V
4111  $4556              COPYTEMP_BLOCK_CHARS
4112  $4556  00 00 00 00  !byte 0,0,0,0             ;blocks
4113  $455A              COPYTEMP_BLOCK_COLORS
4114  $455A  00 00 00 00  !byte 0,0,0,0             ;colors
4115  $455E              COPYTEMP_BLOCK_CHARDATA            ;total of 4 char data
4116  $455E  00 00 00 00 00 00 00 00  !byte 0,0,0,0,0,0,0,0
4117  $4566  00 00 00 00 00 00 00 00  !byte 0,0,0,0,0,0,0,0
4118  $456E  00 00 00 00 00 00 00 00  !byte 0,0,0,0,0,0,0,0
4119  $4576  00 00 00 00 00 00 00 00  !byte 0,0,0,0,0,0,0,0
4120  $457E              
4121  $457E              ;------------------------------------
4122  $457E              ;
4123  $457E              ;DEFINES you can use
4124  $457E              ; DEF_FILEIO_BYTE   : Compile only the per byte load and save routines
4125  $457E              ; DEF_FILEIO_FFD5   : Compile only the basic kernel load (ffd5) and save routines
4126  $457E              ; DEF_FILEIO_RESET  : Include the drive reset code
4127  $457E              
4128  $457E              ;If neither is defined, enable both
4129  $457E              !ifndef DEF_FILEIO_BYTE {
4130  $457E              !ifndef DEF_FILEIO_FFD5 {
4131  $457E              DEF_FILEIO_BYTE
4132  $457E              DEF_FILEIO_FFD5
4133  $457E              }
4134  $457E              }
4135  $457E              
4136  $457E              ;------------------------------------
4137  $457E              ;Open file and prepare saving
4138  $457E              ;
4139  $457E              ; IN: A=Filename length
4140  $457E              ;     X=<Filename
4141  $457E              ;     Y=>Filename
4142  $457E              ;
4143  $457E              ; Filename  !pet "@0:filename"
4144  $457E              ; See: https://c64os.com/post/c64kernalrom
4145  $457E              ; See: https://www.c64-wiki.com/wiki/OPEN
4146  $457E              ;
4147  $457E              ; lda #$xx          ;filename length
4148  $457E              ; ldx #<Filename
4149  $457E              ; ldy #>Filename
4150  $457E              ; jsr SAVE_init/LOAD_init/LOAD_init_ffd5
4151  $457E              
4152  $457E              FILENUMBER = 8
4153  $457E              
4154  $457E              !ifdef DEF_FILEIO_BYTE {
4155  $457E              SAVE_init
4156  $457E  20 BD FF    jsr $ffbd          ;set the filename
4157  $4581              
4158  $4581  A9 08       lda #FILENUMBER    ;filenumber
4159  $4583  A6 BA       ldx $ba            ;last used device
4160  $4585  D0 02       bne *+4
4161  $4587  A2 08       ldx #$08           ;default device number
4162  $4589  A0 01       ldy #$01           ;save
4163  $458B  20 BA FF    jsr $ffba          ;setlfs
4164  $458E              
4165  $458E  20 C0 FF    jsr $ffc0          ;open a logical file
4166  $4591  B0 47       bcs INIT_error
4167  $4593              
4168  $4593  A2 08       ldx #FILENUMBER    ;filenumber
4169  $4595  20 C9 FF    jsr $ffc9          ;open channel for output
4170  $4598  B0 40       bcs INIT_error
4171  $459A  60          rts
4172  $459B              
4173  $459B              LOAD_init
4174  $459B  20 BD FF    jsr $ffbd          ;set the filename
4175  $459E              
4176  $459E  A9 08       lda #FILENUMBER    ;filenumber
4177  $45A0  A6 BA       ldx $ba            ;last used device
4178  $45A2  D0 02       bne *+4
4179  $45A4  A2 08       ldx #$08           ;default device number
4180  $45A6  A0 08       ldy #$08           ;disk drive
4181  $45A8  20 BA FF    jsr $ffba          ;setlfs
4182  $45AB              
4183  $45AB  20 C0 FF    jsr $ffc0          ;open a logical file
4184  $45AE  B0 2A       bcs INIT_error
4185  $45B0              
4186  $45B0  A2 08       ldx #FILENUMBER    ;filenumber
4187  $45B2  20 C6 FF    jsr $ffc6          ;open channel for input
4188  $45B5  B0 23       bcs INIT_error
4189  $45B7  60          rts
4190  $45B8              }
4191  $45B8              
4192  $45B8              !ifdef DEF_FILEIO_FFD5 {
4193  $45B8              LOAD_init_ffd5
4194  $45B8  20 BD FF    jsr $ffbd          ;set the filename
4195  $45BB              
4196  $45BB  A9 08       lda #FILENUMBER    ;filenumber
4197  $45BD  A6 BA       ldx $ba            ;last used device
4198  $45BF  D0 02       bne *+4
4199  $45C1  A2 08       ldx #$08           ;default device number
4200  $45C3  A0 00       ldy #$00           ;$00 means: load to new address
4201  $45C5  20 BA FF    jsr $ffba          ;setlfs
4202  $45C8  60          rts
4203  $45C9              
4204  $45C9              SAVE_init_ffd8
4205  $45C9  20 BD FF    jsr $ffbd          ;set the filename
4206  $45CC              
4207  $45CC  A9 08       lda #FILENUMBER    ;filenumber
4208  $45CE  A6 BA       ldx $ba            ;last used device
4209  $45D0  D0 02       bne *+4
4210  $45D2  A2 08       ldx #$08           ;default device number
4211  $45D4  A0 01       ldy #$01
4212  $45D6  20 BA FF    jsr $ffba          ;setlfs
4213  $45D9  60          rts
4214  $45DA              }
4215  $45DA              ;------------------------------------
4216  $45DA              ;Init error handler
4217  $45DA              ;
4218  $45DA              ; Accu has the BASIC error code
4219  $45DA              
4220  $45DA              INIT_error
4221  $45DA  EE 20 D0    inc $d020
4222  $45DD              ;lda #$ff
4223  $45DD  60          rts
4224  $45DE              
4225  $45DE              ;------------------------------------
4226  $45DE              ;Load file usimg $ffd5 kernal function
4227  $45DE              ;
4228  $45DE              ; ldx #<memory_start        ;Where to load
4229  $45DE              ; ldy #<memory_start
4230  $45DE              ;
4231  $45DE              ; OUT: if carry set, an error has happened. Accu has the BASIC error code
4232  $45DE              
4233  $45DE              !ifdef DEF_FILEIO_FFD5 {
4234  $45DE              LOAD_ffd5
4235  $45DE  A9 00       lda #$00
4236  $45E0  20 D5 FF    jsr $ffd5
4237  $45E3  60          rts
4238  $45E4              }
4239  $45E4              
4240  $45E4              ;------------------------------------
4241  $45E4              ;Load file
4242  $45E4              ;
4243  $45E4              ; lda #<memory_start        ;Where to load
4244  $45E4              ; sta $02
4245  $45E4              ; lda #<memory_start
4246  $45E4              ; sta $03
4247  $45E4              ;
4248  $45E4              ; lda #<length              ;Amount of bytes to load, or left to 0 to load to end of file
4249  $45E4              ; sta $04
4250  $45E4              ; lda #<length
4251  $45E4              ; sta $05
4252  $45E4              ;
4253  $45E4              ; jsr LOAD_file
4254  $45E4              ;
4255  $45E4              ;See: https://codebase64.org/doku.php?id=base:writing_a_file_byte-by-byte
4256  $45E4              
4257  $45E4              !ifdef DEF_FILEIO_BYTE {
4258  $45E4              LOAD_file
4259  $45E4  A5 01       lda $01
4260  $45E6  8D 2D 46    sta _lf_01+1
4261  $45E9              
4262  $45E9  A5 02       lda $02
4263  $45EB  18          clc
4264  $45EC  65 04       adc $04
4265  $45EE  85 04       sta $04
4266  $45F0  A5 03       lda $03
4267  $45F2  65 05       adc $05
4268  $45F4  85 05       sta $05
4269  $45F6              
4270  $45F6              ;Read load address as we don't need it
4271  $45F6  20 CF FF    jsr $ffcf
4272  $45F9  20 CF FF    jsr $ffcf
4273  $45FC  20 B7 FF    _lf00    jsr $ffb7          ; call READST (read status byte)
4274  $45FF  D0 31       bne _lf_error      ; read error
4275  $4601  20 CF FF    jsr $ffcf          ;Read byte from output channel
4276  $4604  A2 30       ldx #$30           ;Make RAM at $A000 visible. This probably gives some issues on load
4277  $4606  86 01       stx $01
4278  $4608  A0 00       ldy #$00
4279  $460A  91 02       sta ($02),y
4280  $460C  A2 37       ldx #$37           ;Make ROM at $A000 visible.
4281  $460E  86 01       stx $01
4282  $4610              
4283  $4610  E6 02       inc $02
4284  $4612  D0 02       bne *+4
4285  $4614  E6 03       inc $03
4286  $4616              
4287  $4616  A5 03       lda $03
4288  $4618  C5 05       cmp $05
4289  $461A  D0 E0       bne _lf00
4290  $461C  A5 02       lda $02
4291  $461E  C5 04       cmp $04
4292  $4620  D0 DA       bne _lf00
4293  $4622              
4294  $4622  A9 00       _lf_ok   lda #$00           ;success
4295  $4624  48          _lf_nok  pha
4296  $4625  A9 37       lda #$37           ;Make ROM at $A000 visible.
4297  $4627  85 01       sta $01
4298  $4629  20 76 46    jsr FILE_close
4299  $462C  A9 00       _lf_01   lda #$00           ;SMC!!!!
4300  $462E  85 01       sta $01
4301  $4630  68          pla
4302  $4631  60          rts
4303  $4632              
4304  $4632              _lf_error ;error
4305  $4632  C9 40       cmp #$40           ;end of file
4306  $4634  F0 EC       beq _lf_ok
4307  $4636  4C 24 46    jmp _lf_nok        ;Failure error code is returned in A
4308  $4639              }
4309  $4639              
4310  $4639              ;------------------------------------
4311  $4639              ;Save file
4312  $4639              ;
4313  $4639              ; lda #<memory_start        ;From where to save
4314  $4639              ; sta $02
4315  $4639              ; lda #>memory_start
4316  $4639              ; sta $03
4317  $4639              ;
4318  $4639              ; lda #<memory_end          ;To where to save
4319  $4639              ; sta $04
4320  $4639              ; lda #>memory_end
4321  $4639              ; sta $05
4322  $4639              ;
4323  $4639              ; jsr SAVE_file
4324  $4639              ;
4325  $4639              ;See: https://codebase64.org/doku.php?id=base:writing_a_file_byte-by-byte
4326  $4639              
4327  $4639              SAVE_file
4328  $4639  A5 02       lda $02            ;Store start address
4329  $463B  20 D2 FF    jsr $ffd2          ;Output Vector, chrout
4330  $463E  A5 03       lda $03
4331  $4640  20 D2 FF    jsr $ffd2
4332  $4643              
4333  $4643  20 B7 FF    _sf00    jsr $ffb7          ; call READST (read status byte)
4334  $4646  D0 27       bne _sf_error      ; write error
4335  $4648  A0 00       ldy #$00
4336  $464A  A2 30       ldx #$30           ;Make RAM at $A000 visible.
4337  $464C  86 01       stx $01
4338  $464E  B1 02       lda ($02),y
4339  $4650  A2 37       ldx #$37           ;Make ROM at $A000 visible.
4340  $4652  86 01       stx $01
4341  $4654  20 D2 FF    jsr $ffd2          ;Write byte to output channel
4342  $4657              
4343  $4657  E6 02       inc $02
4344  $4659  D0 02       bne *+4
4345  $465B  E6 03       inc $03
4346  $465D              
4347  $465D  A5 03       lda $03
4348  $465F  C5 05       cmp $05
4349  $4661  D0 E0       bne _sf00
4350  $4663  A5 02       lda $02
4351  $4665  C5 04       cmp $04
4352  $4667  D0 DA       bne _sf00
4353  $4669  20 76 46    jsr FILE_close
4354  $466C  A9 00       lda #$00           ;Success
4355  $466E  60          rts
4356  $466F              
4357  $466F              _sf_error ;error
4358  $466F  20 76 46    jsr FILE_close
4359  $4672  A9 FF       lda #$ff           ;Failure
4360  $4674  60          rts
4361  $4675              
4362  $4675              ;------------------------------------
4363  $4675              ;Close open file and stop
4364  $4675              ;
4365  $4675              ;$ffb7 READST values:
4366  $4675              ; Bit  Bit Value Serial Devices
4367  $4675              ; 0    1         Time out (Write)
4368  $4675              ; 1    2         Time out (Read)
4369  $4675              ; 6    64        EOI (End or Identify)
4370  $4675              ; 7    128       Device not present
4371  $4675              
4372  $4675  00          status_ffb7 !byte 0
4373  $4676              
4374  $4676              FILE_close
4375  $4676  20 B7 FF    _fc00    jsr $ffb7          ;TBD: In a case where READST never returns 0, this could end up in a forever loop
4376  $4679  8D 75 46    sta status_ffb7
4377  $467C  29 40       and #%01000000     ;EndOfFile or similar ($40=EndOfFile, $42=...)
4378  $467E  D0 0E       bne _fc01
4379  $4680  AD 75 46    lda status_ffb7
4380  $4683  29 80       and #%10000000     ;Device not present
4381  $4685  D0 07       bne _fc01
4382  $4687  AD 75 46    lda status_ffb7
4383  $468A  C9 00       cmp #$00
4384  $468C  D0 E8       bne _fc00
4385  $468E              
4386  $468E  A9 08       _fc01    lda #FILENUMBER    ;filenumber
4387  $4690  20 C3 FF    jsr $ffc3          ;close
4388  $4693              
4389  $4693              ;jsr $ffe7          ;Close all files and set standard input/output to keyboard/CRT
4390  $4693  20 CC FF    jsr $ffcc          ;Restore default I/O channels
4391  $4696  AD 75 46    lda status_ffb7    ;Return the original error code
4392  $4699  60          rts
4393  $469A              
4394  $469A              ;------------------------------------
4395  $469A              ;Unknown if this works...
4396  $469A              
4397  $469A              !ifdef DEF_FILEIO_RESET {
4398  $469A              FILE_drivereset
4399  $469A              ;reset diskdrive
4400  $469A              lda #$fb
4401  $469A              ldx #<resettxt
4402  $469A              ldy #>resettxt
4403  $469A              jsr $ffbd     ; call SETNAM
4404  $469A              
4405  $469A              lda #$0f
4406  $469A              ldx #$08
4407  $469A              ldy #$0f
4408  $469A              jsr $ffba
4409  $469A              
4410  $469A              jsr $ffc0
4411  $469A              ;bcs errorhandling
4412  $469A              rts
4413  $469A              
4414  $469A              resettxt !pet "u:"
4415  $469A              }
4416  $469A              
4417  $469A              ;------------------------------------
4418  $469A              ;Print a zero ended string
4419  $469A              ;
4420  $469A              ; lda #char
4421  $469A              ; jsr print_char
4422  $469A              
4423  $469A              print_char
4424  $469A  AE 86 02    ldx $0286
4425  $469D  20 13 EA    jsr $ea13
4426  $46A0  20 DD 46    jsr move_cursor
4427  $46A3  60          rts
4428  $46A4              
4429  $46A4              ;------------------------------------
4430  $46A4              ;Print a zero ended string
4431  $46A4              ;
4432  $46A4              ; string !pet "hello world",0
4433  $46A4              ;
4434  $46A4              ; ldx #color
4435  $46A4              ; lda #<string
4436  $46A4              ; ldy #>string
4437  $46A4              ; jsr print
4438  $46A4              
4439  $46A4  8D B2 46    print    sta _p_smc+1
4440  $46A7  A5 01       lda $01
4441  $46A9  48          pha
4442  $46AA  A9 37       lda #$37
4443  $46AC  85 01       sta $01
4444  $46AE  8E 86 02    stx $0286      ;set color
4445  $46B1  A9 00       _p_smc   lda #$00
4446  $46B3  20 1E AB    jsr $ab1e
4447  $46B6              
4448  $46B6  68          pla
4449  $46B7  85 01       sta $01
4450  $46B9  60          rts
4451  $46BA              
4452  $46BA              ;------------------------------------
4453  $46BA              ;Output a 8bit hex number
4454  $46BA              ;
4455  $46BA              ; lda #$number
4456  $46BA              ; jsr print_number_hex
4457  $46BA              
4458  $46BA              print_number_hex
4459  $46BA  48          pha
4460  $46BB  4A          lsr
4461  $46BC  4A          lsr
4462  $46BD  4A          lsr
4463  $46BE  4A          lsr
4464  $46BF  18          clc
4465  $46C0  69 30       adc #$30
4466  $46C2  C9 3A       cmp #$3a
4467  $46C4  90 03       bcc _pn0
4468  $46C6  38          sec
4469  $46C7  E9 39       sbc #$39         ;$a-$f
4470  $46C9  20 9A 46    _pn0     jsr print_char
4471  $46CC              ;ldx #0286
4472  $46CC              ;jsr $ea13
4473  $46CC              ;jsr move_cursor
4474  $46CC  68          pla
4475  $46CD  29 0F       and #%1111
4476  $46CF  18          clc
4477  $46D0  69 30       adc #$30
4478  $46D2  C9 3A       cmp #$3a
4479  $46D4  90 03       bcc _pn1
4480  $46D6  38          sec
4481  $46D7  E9 39       sbc #$39
4482  $46D9  20 9A 46    _pn1     jsr print_char
4483  $46DC              ;ldx #0286
4484  $46DC              ;jsr $ea13
4485  $46DC              ;jsr move_cursor
4486  $46DC  60          rts
4487  $46DD              
4488  $46DD              ;------------------------------------
4489  $46DD              ;Move Cursor
4490  $46DD              
4491  $46DD              move_cursor
4492  $46DD  4C B6 E6    jmp $e6B6;
4493  $46E0              
4494  $46E0              ;------------------------------------
4495  $46E0              ;Set Cursor
4496  $46E0              ; ldx #x-coord
4497  $46E0              ; ldy #y-coord
4498  $46E0              
4499  $46E0              set_cursor
4500  $46E0  84 D3       sty $d3
4501  $46E2  86 D6       stx $d6        ;TBD: Switch X/Y
4502  $46E4  20 6C E5    jsr $e56c
4503  $46E7  60          rts
4504  $46E8              
4505  $46E8              ;------------------------------------
4506  $46E8              ;Set Cursor color
4507  $46E8              ; lda #color
4508  $46E8              
4509  $46E8              set_color
4510  $46E8  8D 86 02    sta $0286      ;set color
4511  $46EB  60          rts
4512  $46EC              
4513  $46EC              ;------------------------------------
4514  $46EC              ;Output Positive Integer in A/X
4515  $46EC              ;
4516  $46EC              ; lda #number
4517  $46EC              ; jsr print_number
4518  $46EC              
4519  $46EC              print_number
4520  $46EC  20 04 47    jsr hexToBcd
4521  $46EF  48          pha
4522  $46F0  4A          lsr
4523  $46F1  4A          lsr
4524  $46F2  4A          lsr
4525  $46F3  4A          lsr
4526  $46F4  18          clc
4527  $46F5  69 30       adc #$30
4528  $46F7  20 9A 46    jsr print_char
4529  $46FA  68          pla
4530  $46FB  29 0F       and #%00001111
4531  $46FD  18          clc
4532  $46FE  69 30       adc #$30
4533  $4700  20 9A 46    jsr print_char
4534  $4703  60          rts
4535  $4704              
4536  $4704              ;basic version
4537  $4704              ;         tax
4538  $4704              ;         lda #$00       ;A=HI part of 16bit value. We only show upto 255
4539  $4704              ;         jmp $bdcd
4540  $4704              
4541  $4704              ;----------------------------------------------
4542  $4704              ;Hex to BCD
4543  $4704              ;in : A hex number ($10 = 16)
4544  $4704              ;out: X bcd high   (  1)
4545  $4704              ;     Y bcd low    (  6)
4546  $4704              ;     A bcd number ( 16)
4547  $4704              
4548  $4704  A2 00       hexToBcd ldx #$00
4549  $4706  8E 20 47    stx ky0+1
4550  $4709  8E 26 47    stx yk0+1
4551  $470C  38          hw30     sec
4552  $470D  E9 0A       sbc #10
4553  $470F  90 06       bcc hw40
4554  $4711  EE 20 47    inc ky0+1
4555  $4714  4C 0C 47    jmp hw30
4556  $4717  18          hw40     clc
4557  $4718  69 0A       adc #10
4558  $471A  8D 26 47    sta yk0+1
4559  $471D  C8          iny
4560  $471E  C8          iny
4561  $471F  A9 00       ky0      lda #$00
4562  $4721              ;         clc
4563  $4721              ;         adc #$30
4564  $4721  8D 3A 47    sta htbNumb+0
4565  $4724  C8          iny
4566  $4725  A9 00       yk0      lda #$00
4567  $4727              ;         clc
4568  $4727              ;         adc #$30
4569  $4727  8D 3B 47    sta htbNumb+1
4570  $472A              
4571  $472A  AE 3A 47    ldx htbNumb+0
4572  $472D  AC 3B 47    ldy htbNumb+1
4573  $4730  8A          txa
4574  $4731  0A          asl
4575  $4732  0A          asl
4576  $4733  0A          asl
4577  $4734  0A          asl
4578  $4735  18          clc
4579  $4736  6D 3B 47    adc htbNumb+1
4580  $4739  60          rts
4581  $473A              
4582  $473A  00 00       htbNumb !byte 0,0
4583  $473C              
4584  $473C              ;
